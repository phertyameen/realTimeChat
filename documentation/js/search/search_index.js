var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.69,1,2.315]],["body/guards/AccessTokenGuard.html",[1,2.841,2,2.526,3,0.143,4,0.127,5,0.127,6,5.146,7,3.889,8,2.82,9,0.265,10,0.992,11,1.571,12,5.146,13,1.979,14,4.675,15,1.533,16,3.266,17,5.075,18,4.223,19,4.209,20,0.645,21,3.266,22,1.265,23,0.017,24,1.108,25,0.541,26,0.923,27,4.036,28,4.209,29,3.266,30,3.301,31,0.992,32,2.127,33,4.675,34,4.409,35,3.266,36,0.436,37,1.225,38,0.584,39,3.05,40,0.477,41,1.653,42,2.131,43,2.526,44,2.526,45,2.306,46,2.131,47,2.526,48,2.526,49,2.82,50,0.143,51,0.033,52,1.86,53,1.533,54,2.306,55,4.036,56,3.266,57,2.343,58,3.266,59,4.107,60,3.266,61,3.266,62,2.306,63,2.366,64,1.754,65,1.985,66,3.05,67,1.025,68,2.82,69,3.266,70,2.82,71,3.266,72,1.985,73,1.86,74,3.266,75,0.992,76,1.653,77,3.266,78,3.266,79,0.01,80,0.01]],["title/interfaces/ActiveUserData.html",[81,2.169,82,2.485]],["body/interfaces/ActiveUserData.html",[3,0.233,4,0.207,5,0.207,9,0.433,23,0.016,25,0.641,26,1.093,50,0.233,79,0.014,80,0.014,81,3.036,82,4.22,83,3.764,84,4.603,85,2.121,86,2.984,87,5.113,88,1.837,89,2.496]],["title/controllers/AppController.html",[90,1.497,91,2.69]],["body/controllers/AppController.html",[3,0.223,4,0.197,5,0.197,9,0.414,10,1.335,20,0.602,23,0.017,31,1.081,36,0.406,40,0.744,50,0.223,51,0.051,53,1.669,75,1.081,79,0.013,80,0.013,88,1.659,90,2.472,91,4.44,92,2.001,93,4.396,94,6.153,95,1.669,96,5.092,97,4.147,98,4.396,99,3.595,100,5.092]],["title/modules/AppModule.html",[101,1.144,102,2.69]],["body/modules/AppModule.html",[1,2.467,3,0.118,4,0.105,5,0.105,7,1.758,23,0.017,25,0.267,36,0.483,37,1.011,40,0.394,41,1.364,50,0.118,51,0.027,76,1.364,79,0.009,80,0.009,91,3.449,92,1.596,97,3.724,98,2.327,101,1.467,102,5.266,103,1.166,104,1.166,105,1.364,106,1.364,107,1.226,108,2.472,109,1.364,110,2.327,111,2.327,112,2.327,113,3.724,114,4.369,115,3.998,116,3.998,117,3.724,118,3.998,119,2.055,120,1.364,121,1.364,122,2.695,123,3.186,124,3.186,125,2.781,126,2.695,127,3.505,128,4.693,129,3.505,130,2.695,131,4.06,132,2.695,133,1.903,134,1.111,135,2.695,136,2.327,137,1.758,138,1.903,139,2.695,140,2.695,141,2.695,142,2.695,143,3.505,144,4.06,145,1.758,146,2.867,147,2.695,148,2.084,149,2.695,150,2.695,151,2.084,152,4.06,153,4.06,154,2.695,155,4.06,156,2.327,157,2.695,158,2.867,159,2.695,160,2.695,161,2.695,162,2.695,163,2.695,164,2.695,165,2.695,166,2.695,167,2.695,168,2.327,169,2.695,170,2.327,171,2.695,172,2.695,173,2.695,174,1.364,175,2.695,176,1.535,177,2.695,178,2.695,179,2.695,180,2.695,181,2.695,182,2.695,183,2.695,184,3.505,185,3.505,186,1.903]],["title/injectables/AppService.html",[38,0.476,97,2.315]],["body/injectables/AppService.html",[3,0.233,4,0.207,5,0.207,9,0.433,10,1.373,20,0.63,23,0.017,31,1.131,36,0.344,38,0.808,40,0.779,50,0.233,51,0.053,75,1.131,79,0.014,80,0.014,88,1.707,94,6.251,97,3.931,187,1.673,188,4.603,189,5.331,190,4.603]],["title/controllers/AuthController.html",[90,1.497,123,2.485]],["body/controllers/AuthController.html",[3,0.169,4,0.15,5,0.15,9,0.315,10,1.117,11,1.721,13,1.215,15,1.269,20,0.622,22,1.22,23,0.017,24,1.069,25,0.522,26,0.89,31,1.117,36,0.447,40,0.565,50,0.169,51,0.039,53,1.269,67,1.215,75,1.117,79,0.011,80,0.011,90,1.522,92,1.522,95,1.726,123,3.434,191,3.342,192,2.526,193,3.406,194,2.482,195,4.532,196,3.717,197,3.872,198,3.901,199,5.265,200,3.872,201,2.994,202,4.209,203,3.872,204,3.872,205,1.856,206,2.526,207,3.872,208,3.872,209,3.872,210,2.353,211,3.872,212,3.635,213,3.342,214,2.994,215,2.526,216,3.342,217,2.994,218,3.342,219,3.872,220,2.526,221,2.734,222,3.872,223,3.342,224,3.872,225,3.872,226,3.872,227,3.872,228,3.872,229,3.872]],["title/guards/AuthGuardGuard.html",[0,2.69,146,2.69]],["body/guards/AuthGuardGuard.html",[0,4.053,1,4.007,2,4.724,3,0.132,4,0.117,5,0.117,7,1.965,9,0.245,10,0.936,11,1.5,12,5.692,13,2.003,15,1.446,20,0.521,22,1.022,23,0.017,24,0.895,25,0.437,26,0.745,27,3.807,28,4.053,30,2.127,31,0.639,32,2.006,36,0.412,38,0.551,39,2.877,40,0.44,44,2.33,45,2.127,49,2.601,50,0.132,51,0.03,52,1.715,53,2.093,57,2.509,63,1.525,64,1.13,67,0.945,73,1.715,75,0.936,76,2.232,79,0.009,80,0.009,85,0.988,145,1.965,146,3.113,148,4.033,151,2.33,215,3.986,230,4.503,231,2.601,232,4.409,233,4.409,234,4.409,235,3.012,236,6.594,237,3.012,238,3.012,239,2.601,240,3.012,241,2.33,242,4.409,243,3.012,244,3.012,245,3.012,246,3.012,247,3.012,248,3.012,249,3.012,250,3.012,251,2.33,252,3.41,253,3.012,254,4.409,255,3.012,256,3.012,257,3.012,258,3.012,259,3.012,260,3.012,261,3.012,262,3.012,263,3.012,264,4.409,265,3.012,266,3.012,267,3.012,268,3.012,269,3.012,270,3.012]],["title/modules/AuthModule.html",[101,1.144,113,2.315]],["body/modules/AuthModule.html",[1,1.938,3,0.139,4,0.124,5,0.124,7,2.081,23,0.017,36,0.483,40,0.466,41,1.614,42,2.081,46,2.081,47,2.466,50,0.139,51,0.046,59,1.938,79,0.01,80,0.01,92,1.806,101,1.619,103,1.38,104,1.38,105,1.614,106,1.614,107,1.451,108,2.727,109,2.727,113,4.548,117,2.793,119,2.326,120,1.614,121,1.614,123,3.515,125,1.816,127,2.753,143,2.753,145,2.081,151,2.466,184,2.753,185,2.753,212,4.416,213,2.753,271,2.753,272,2.753,273,2.753,274,3.681,275,3.489,276,3.707,277,3.956,278,3.956,279,3.189,280,3.515,281,2.463,282,3.245,283,3.189,284,3.189,285,3.189,286,2.753,287,3.189,288,3.189,289,3.189,290,2.998,291,3.189,292,3.189,293,3.189,294,3.189,295,2.466,296,3.189,297,2.753,298,3.189,299,3.189,300,2.753,301,2.753,302,3.189,303,3.189,304,3.189]],["title/injectables/AuthService.html",[38,0.476,212,2.315]],["body/injectables/AuthService.html",[3,0.158,4,0.14,5,0.14,9,0.294,10,1.066,11,1.66,13,1.81,15,1.646,20,0.682,22,1.337,23,0.017,24,1.171,25,0.572,26,0.975,31,1.066,36,0.438,37,2.165,38,0.627,40,0.528,50,0.158,51,0.036,53,1.892,67,1.134,75,1.066,79,0.011,80,0.011,187,1.134,194,2.431,195,3.545,196,3.545,198,3.981,201,3.883,202,3.981,205,1.732,212,3.051,214,2.795,217,2.795,220,2.358,221,2.552,277,4.227,278,4.31,281,1.937,286,3.12,290,2.358,305,3.12,306,2.358,307,3.165,308,3.614,309,5.021,310,3.614,311,3.614,312,2.358,313,3.614,314,2.795,315,0.913,316,2.196,317,3.614,318,3.614,319,3.614]],["title/injectables/BcryptProvider.html",[38,0.476,282,2.69]],["body/injectables/BcryptProvider.html",[3,0.175,4,0.155,5,0.155,9,0.326,10,1.144,11,2.013,20,0.637,22,1.249,23,0.017,24,1.094,25,0.534,26,0.911,31,1.144,32,2.963,36,0.393,38,0.673,40,0.585,50,0.175,51,0.04,52,2.283,57,2.118,67,1.911,75,1.144,79,0.011,80,0.011,88,1.943,174,2.029,187,1.258,194,2.508,274,2.889,282,3.806,320,3.461,321,4.653,322,4.653,323,4.653,324,5.622,325,4.009,326,4.653,327,5.257,328,4.009,329,3.461,330,3.1,331,4.653,332,4.009,333,4.009,334,4.009,335,5.39,336,4.009,337,4.009,338,3.1,339,4.009]],["title/modules/ChatModule.html",[101,1.144,114,2.485]],["body/modules/ChatModule.html",[3,0.193,4,0.171,5,0.171,23,0.017,36,0.464,40,0.644,50,0.193,51,0.044,79,0.012,80,0.012,92,2.257,101,1.918,103,1.91,104,1.91,105,2.234,106,2.234,107,2.008,108,3.232,109,3.232,114,4.775,119,2.907,120,2.234,121,2.234,125,2.513,133,3.116,134,1.819,315,1.451,340,3.81,341,3.81,342,3.81,343,4.662,344,4.413,345,4.508,346,2.008,347,3.81,348,4.413,349,3.81,350,3.412,351,4.413]],["title/entities/ChatRoom.html",[346,1.734,352,2.042]],["body/entities/ChatRoom.html",[3,0.166,4,0.147,5,0.147,9,0.308,20,0.788,23,0.017,24,1.202,25,0.721,36,0.382,50,0.166,51,0.038,79,0.011,80,0.011,85,1.703,88,1.37,89,1.862,95,2.186,315,1.74,346,2.363,352,2.034,353,2.68,354,3.277,355,5.921,356,2.694,357,4.181,358,4.484,359,5.112,360,3.796,361,4.579,362,3.796,363,4.484,364,3.667,365,4.484,366,3.796,367,4.708,368,2.935,369,5.496,370,2.784,371,2.161,372,3.796,373,3.796,374,5.194,375,4.484,376,4.017,377,3.796,378,3.388,379,4.484,380,3.277,381,1.424,382,2.307,383,2.935,384,3.796,385,3.277,386,3.796,387,3.796,388,3.277,389,3.796]],["title/controllers/ChatRoomController.html",[90,1.497,345,2.69]],["body/controllers/ChatRoomController.html",[3,0.12,4,0.107,5,0.107,9,0.223,10,0.875,20,0.757,22,1.431,23,0.017,24,1.253,25,0.612,26,1.043,31,1.359,36,0.38,40,0.402,50,0.12,51,0.028,53,0.902,75,1.359,79,0.009,80,0.009,89,2.692,90,1.081,92,1.081,95,2.099,99,1.942,192,1.794,206,2.689,210,3.004,343,3.004,345,2.91,349,2.374,356,3.121,390,3.558,391,2.649,392,3.187,393,4.943,394,1.784,395,3.582,396,3.558,397,3.558,398,4.943,399,3.49,400,2.75,401,5.092,402,4.122,403,2.75,404,2.374,405,3.752,406,2.75,407,2.75,408,2.374,409,4.122,410,2.75,411,2.374,412,4.122,413,2.75,414,2.75,415,4.122,416,2.75,417,2.374,418,4.296,419,4.122,420,2.75,421,1.942,422,2.127,423,1.942,424,2.75,425,5.685,426,1.794,427,3.187,428,2.374,429,2.75,430,2.75,431,2.75,432,2.75,433,2.75,434,2.374,435,2.75,436,2.75,437,2.75,438,2.75,439,4.943,440,2.75,441,2.75,442,2.75,443,4.122,444,2.75,445,2.75]],["title/injectables/ChatRoomService.html",[38,0.476,343,2.315]],["body/injectables/ChatRoomService.html",[3,0.085,4,0.076,5,0.076,9,0.158,10,0.669,11,2.051,13,1.429,15,1.033,20,0.693,22,1.305,23,0.017,24,1.19,25,0.581,26,0.952,31,1.195,32,3.042,36,0.378,38,0.394,40,0.285,50,0.085,51,0.02,57,2.38,63,2.968,64,2.272,67,1.9,75,1.136,79,0.007,80,0.007,89,2.556,134,0.803,187,0.611,315,1.002,343,1.915,346,2.668,347,1.682,356,2.83,357,4.653,367,1.376,381,0.731,382,1.184,383,1.507,385,1.682,391,2.868,392,3.067,394,1.716,395,2.972,396,2.72,397,3.424,399,2.225,401,4.355,404,2.72,405,3.04,408,2.72,411,2.72,417,2.72,418,3.825,426,1.271,427,2.436,428,1.682,446,1.682,447,3.151,448,3.151,449,1.949,450,2.851,451,2.41,452,1.949,453,3.151,454,3.151,455,1.949,456,2.436,457,1.949,458,1.949,459,1.949,460,1.949,461,3.151,462,1.949,463,1.949,464,1.682,465,1.682,466,1.11,467,1.682,468,1.184,469,1.376,470,1.949,471,1.949,472,3.151,473,1.949,474,3.966,475,3.966,476,1.949,477,1.949,478,3.151,479,4.318,480,3.067,481,1.949,482,1.949,483,1.949,484,4.556,485,1.949,486,2.72,487,1.949,488,3.151,489,1.949,490,1.949,491,1.949,492,1.949,493,1.949,494,3.966,495,3.966,496,2.225,497,1.949,498,1.949,499,2.72,500,1.949,501,1.376,502,1.949,503,1.682,504,1.507,505,3.151,506,1.682,507,3.151,508,1.949,509,3.151,510,1.949,511,1.949,512,1.949,513,1.949]],["title/classes/CreateChatRoomDto.html",[51,0.038,405,2.315]],["body/classes/CreateChatRoomDto.html",[3,0.187,4,0.166,5,0.166,9,0.348,20,0.744,23,0.017,24,1.278,25,0.731,26,0.952,36,0.406,50,0.187,51,0.063,76,2.17,79,0.012,80,0.012,85,1.848,88,1.487,89,2.257,95,2.064,367,4.446,383,3.315,391,3.584,405,3.425,514,1.767,515,5.774,516,3.315,517,6.296,518,3.826,519,4.287,520,4.287,521,4.287,522,4.287,523,4.358,524,3.701,525,4.287,526,3.315,527,4.358,528,4.287,529,3.677,530,5.636,531,1.855,532,2.441,533,4.287]],["title/injectables/CreateGoogleUserProvider.html",[38,0.476,534,2.315]],["body/injectables/CreateGoogleUserProvider.html",[3,0.177,4,0.157,5,0.157,9,0.329,10,1.151,11,1.759,13,1.269,15,1.778,20,0.641,22,1.256,23,0.017,24,1.101,25,0.537,26,0.916,31,0.858,36,0.44,37,1.517,38,0.677,40,0.591,50,0.177,51,0.041,53,1.326,57,1.59,63,2.047,64,2.034,65,2.458,67,1.269,72,2.458,73,2.303,75,0.858,79,0.012,80,0.012,134,1.667,187,1.269,194,2.193,205,1.939,315,1.546,381,1.517,382,2.458,394,1.75,450,3.308,451,3.717,466,2.303,468,2.458,534,3.295,535,3.492,536,4.681,537,2.639,538,4.045,539,4.681,540,4.263,541,4.045,542,3.492,543,4.045,544,4.045,545,4.045,546,4.045,547,4.045,548,2.303]],["title/classes/CreateUserDto.html",[51,0.038,549,2.042]],["body/classes/CreateUserDto.html",[3,0.089,4,0.079,5,0.079,9,0.165,11,0.584,20,0.704,23,0.017,24,1.037,25,0.697,26,1.065,36,0.352,50,0.089,51,0.047,52,1.156,57,0.798,62,1.433,75,0.865,76,2.585,79,0.007,80,0.007,85,1.068,86,2.105,88,1.942,89,1.954,95,1.952,174,3.371,252,2.518,338,1.57,346,2.324,364,2.299,370,1.088,371,1.156,378,2.124,381,0.762,514,0.837,518,3.313,523,1.57,524,1.753,526,1.57,527,2.518,529,3.044,531,0.879,532,1.156,548,3.733,549,2.185,550,4.749,551,1.433,552,3.153,553,4.028,554,2.66,555,2.185,556,2.66,557,3.849,558,5.727,559,2.811,560,2.811,561,2.03,562,2.03,563,5.07,564,4.028,565,4.028,566,4.028,567,4.409,568,2.811,569,2.03,570,2.03,571,2.811,572,2.03,573,2.811,574,2.03,575,2.811,576,2.299,577,2.03,578,2.03,579,2.03,580,2.811,581,2.66,582,2.518,583,2.03,584,2.03,585,2.811,586,2.518,587,2.03,588,2.03,589,2.03,590,2.811,591,2.811,592,2.811,593,2.811,594,2.811,595,2.811,596,1.561,597,2.811,598,3.19,599,4.028,600,2.811,601,2.811,602,2.811,603,2.03,604,2.03,605,2.03,606,2.299,607,2.478,608,1.753,609,2.811,610,2.811,611,2.811,612,3.52,613,2.811,614,5.139,615,1.57,616,1.57,617,2.811,618,1.57,619,1.753,620,1.57,621,1.753,622,1.753,623,2.124,624,1.433,625,1.753,626,1.753,627,1.57,628,1.753,629,1.753,630,2.811,631,1.753,632,1.753,633,1.753,634,1.753,635,1.753,636,3.153,637,2.811,638,1.753,639,1.57,640,3.52,641,1.753,642,1.753,643,2.124,644,1.57,645,1.753,646,1.753]],["title/injectables/CreateUserProvider.html",[38,0.476,647,2.315]],["body/injectables/CreateUserProvider.html",[3,0.132,4,0.117,5,0.117,9,0.245,10,0.936,11,1.5,13,1.383,15,1.446,20,0.521,22,1.022,23,0.017,24,0.895,25,0.437,26,0.745,31,0.639,32,2.006,34,2.877,36,0.412,37,1.957,38,0.551,40,0.44,50,0.132,51,0.03,53,0.988,57,1.733,63,2.64,64,1.957,65,3.488,67,1.383,72,2.68,73,3.634,75,0.639,79,0.009,80,0.009,86,1.242,134,1.242,174,1.525,176,2.511,187,0.945,194,1.87,274,3.696,281,1.614,315,1.544,316,1.831,371,1.715,381,1.13,394,1.304,426,1.965,450,2.906,451,3.17,465,2.601,466,1.715,468,1.831,506,2.601,537,1.965,548,2.511,549,3.421,647,2.68,648,4.503,649,2.601,650,3.41,651,3.012,652,3.41,653,3.012,654,4.033,655,1.965,656,2.127,657,3.012,658,2.601,659,4.409,660,3.012,661,5.216,662,3.012,663,3.012,664,4.409,665,3.807,666,4.409,667,4.409,668,4.409,669,3.41,670,4.409,671,4.409,672,4.409,673,4.409,674,3.012,675,3.012,676,2.127,677,4.409,678,3.012,679,3.012,680,3.807,681,3.012,682,3.012]],["title/injectables/DataResponseInterceptor.html",[38,0.476,186,2.69]],["body/injectables/DataResponseInterceptor.html",[3,0.201,4,0.178,5,0.178,9,0.373,10,1.251,20,0.543,22,1.064,23,0.017,24,0.932,25,0.455,26,0.776,28,4.848,30,3.242,31,0.975,36,0.38,38,0.736,40,0.671,44,5.032,45,3.242,50,0.201,51,0.046,52,2.615,75,0.975,79,0.013,80,0.013,186,4.161,187,1.441,501,3.242,683,5.088,684,5.088,685,3.964,686,5.893,687,5.893,688,5.618,689,6.866,690,4.592,691,5.893,692,4.592,693,4.592,694,4.592,695,4.592,696,4.592,697,4.592,698,4.592,699,3.845]],["title/classes/EditUserDto.html",[51,0.038,700,2.485]],["body/classes/EditUserDto.html",[3,0.208,4,0.184,5,0.184,9,0.386,20,0.562,23,0.017,25,0.471,26,0.803,36,0.427,50,0.208,51,0.06,79,0.013,80,0.013,85,1.975,89,2.159,95,1.558,251,3.675,356,3.009,394,2.057,421,3.356,514,1.959,518,2.888,531,2.057,549,2.547,551,3.356,606,3.356,607,3.661,656,3.356,699,3.101,700,3.93,701,5.201,702,5.201,703,6.024,704,4.753,705,4.753,706,5.201,707,5.201,708,4.103,709,3.356,710,4.103,711,4.753,712,4.753,713,4.753]],["title/injectables/FindOneByEmail.html",[38,0.476,714,2.315]],["body/injectables/FindOneByEmail.html",[3,0.172,4,0.153,5,0.153,9,0.32,10,1.13,11,1.736,13,1.236,15,1.291,20,0.63,22,1.234,23,0.017,24,1.081,25,0.528,26,0.9,31,0.836,32,2.424,36,0.417,38,0.665,39,2.57,40,0.575,50,0.172,51,0.039,63,2.696,64,1.998,65,2.394,67,1.236,72,2.394,73,3.033,75,0.836,79,0.011,80,0.011,86,2.195,88,1.592,134,1.623,176,2.243,187,1.236,194,2.163,315,1.798,371,2.243,381,1.478,450,3.272,451,3.237,466,2.243,537,2.57,548,2.243,598,3.234,654,3.046,655,2.57,669,3.046,676,2.781,714,3.929,715,4.667,716,3.401,717,3.939,718,5.326,719,3.939,720,3.939,721,3.046,722,3.939,723,3.939,724,3.939]],["title/injectables/FindOneByGoogleIdProvider.html",[38,0.476,725,2.315]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.188,4,0.167,5,0.167,9,0.349,10,1.199,11,1.814,13,1.349,15,1.852,20,0.668,22,1.309,23,0.017,24,1.147,25,0.56,26,0.954,31,0.913,36,0.432,37,1.614,38,0.705,40,0.628,50,0.188,51,0.043,67,1.349,75,0.913,79,0.012,80,0.012,88,1.664,134,1.773,187,1.349,194,2.26,205,2.062,315,1.087,381,1.614,450,3.389,451,3.832,466,2.449,468,2.614,537,2.806,555,3.027,598,3.38,655,2.806,715,4.877,721,3.326,725,3.432,726,3.713,727,4.876,728,4.301,729,4.876,730,4.301]],["title/injectables/GenerateTokensProvider.html",[38,0.476,275,2.042]],["body/injectables/GenerateTokensProvider.html",[3,0.134,4,0.119,5,0.119,9,0.249,10,0.947,11,1.846,13,1.651,15,1.462,17,5.251,18,4.07,19,4.083,20,0.622,22,1.34,23,0.017,24,1.068,25,0.573,26,0.889,31,0.947,36,0.428,37,1.148,38,0.557,40,0.447,41,1.549,42,1.996,46,2.91,50,0.134,51,0.031,53,1.725,54,2.161,57,1.203,59,2.71,66,3.773,67,1.399,75,0.947,79,0.01,80,0.01,82,2.91,86,1.261,87,2.161,89,2.301,187,0.96,194,2.301,195,3.716,205,2.138,220,3.433,239,2.642,275,2.39,281,1.64,306,1.996,307,3.09,312,1.996,314,2.366,315,1.622,316,1.859,382,1.859,401,3.449,731,4.472,732,2.366,733,4.46,734,4.46,735,2.642,736,4.46,737,3.06,738,4.46,739,5.783,740,4.472,741,3.06,742,3.06,743,2.642,744,3.06,745,2.366,746,3.06,747,2.642,748,2.642,749,2.642,750,2.642,751,2.642,752,2.642,753,5.263,754,3.06,755,3.149,756,4.46,757,4.46,758,2.642]],["title/classes/GetuserParamDto.html",[51,0.038,759,2.485]],["body/classes/GetuserParamDto.html",[3,0.223,4,0.198,5,0.198,9,0.415,20,0.604,23,0.017,25,0.677,26,1.065,36,0.407,50,0.223,51,0.069,79,0.013,80,0.013,85,2.067,89,2.26,95,1.675,356,2.868,514,2.106,531,2.212,532,2.91,706,4.412,759,4.112,760,4.412,761,5.111,762,5.111,763,5.111,764,5.111]],["title/controllers/GoogleAuthenticationController.html",[90,1.497,280,2.485]],["body/controllers/GoogleAuthenticationController.html",[3,0.19,4,0.168,5,0.168,9,0.353,10,1.206,13,1.362,15,1.424,20,0.513,22,1.006,23,0.017,24,0.881,25,0.43,26,0.734,31,0.922,36,0.45,37,1.629,40,0.634,50,0.19,51,0.044,53,1.424,75,0.922,79,0.012,80,0.012,90,1.707,92,1.707,95,1.424,192,2.833,193,2.472,194,2.271,206,2.833,210,3.85,215,2.833,216,3.749,218,3.749,223,3.749,276,3.827,280,3.708,295,3.358,765,4.395,766,3.749,767,4.342,768,5.683,769,4.907,770,4.342,771,4.385,772,4.342,773,5.683,774,3.749,775,3.749,776,3.749,777,4.342,778,4.342,779,4.342]],["title/injectables/GoogleAuthenticationService.html",[38,0.476,276,2.169]],["body/injectables/GoogleAuthenticationService.html",[3,0.118,4,0.104,5,0.104,9,0.219,10,0.86,11,1.403,13,1.921,15,1.329,19,3.834,20,0.642,22,0.939,23,0.017,24,0.823,25,0.483,26,0.685,31,0.86,36,0.41,37,2.037,38,0.506,39,1.755,40,0.393,41,1.362,46,2.645,47,2.08,50,0.118,51,0.027,52,1.532,53,1.599,54,1.899,55,2.322,57,2.407,59,3.721,63,1.362,64,1.521,65,1.635,66,2.645,67,1.531,72,1.635,73,2.778,75,0.86,79,0.009,80,0.009,85,1.329,86,2.011,87,1.899,176,1.532,187,0.844,193,2.308,194,1.749,205,1.29,275,3.505,276,2.308,281,1.442,290,1.755,306,1.755,307,2.976,312,1.755,315,1.547,316,1.635,394,1.164,469,1.899,554,3.183,555,2.91,556,3.183,581,3.543,676,1.899,680,2.322,709,1.899,731,2.08,755,2.862,769,4.212,771,3.801,775,2.322,776,2.322,780,5.03,781,2.322,782,4.878,783,6.124,784,4.878,785,4.054,786,4.054,787,2.69,788,2.69,789,2.69,790,4.878,791,2.322,792,2.69,793,2.69,794,4.054,795,2.69,796,2.69,797,2.69,798,2.69,799,4.054,800,2.69,801,2.69,802,2.69,803,2.69,804,2.69,805,2.69,806,4.054,807,2.322,808,2.69,809,2.69,810,2.69,811,2.69,812,2.69,813,2.69,814,2.69,815,2.69,816,2.322,817,2.69,818,2.69,819,2.69,820,2.69]],["title/modules/GoogleAuthticationModule.html",[101,1.144,821,2.69]],["body/modules/GoogleAuthticationModule.html",[3,0.212,4,0.188,5,0.188,23,0.016,36,0.431,40,0.709,50,0.212,51,0.049,79,0.013,80,0.013,92,2.399,101,2.006,103,2.101,104,2.101,105,2.457,106,2.457,107,2.209,108,3.38,109,2.457,119,3.09,120,2.457,121,2.457,276,4.197,280,4.357,295,3.754,297,4.191,581,3.167,765,3.754,774,4.191,821,5.204,822,4.191,823,4.855,824,4.855]],["title/interfaces/GoogleInterface.html",[81,2.169,540,2.485]],["body/interfaces/GoogleInterface.html",[3,0.219,4,0.195,5,0.195,9,0.408,23,0.016,25,0.703,50,0.219,79,0.013,80,0.013,81,2.856,83,3.542,85,2.043,86,2.922,88,2.06,540,4.065,554,4.625,555,3.8,556,4.625,825,4.331]],["title/classes/GoogleTokenDto.html",[51,0.038,771,2.485]],["body/classes/GoogleTokenDto.html",[3,0.234,4,0.208,5,0.208,9,0.435,20,0.633,23,0.016,25,0.53,36,0.345,50,0.234,51,0.065,59,4.239,79,0.014,80,0.014,85,2.126,88,1.711,95,1.755,514,2.206,531,2.316,607,4.239,771,4.23,826,5.598,827,4.621,828,5.353]],["title/injectables/HashingProvider.html",[38,0.476,274,2.042]],["body/injectables/HashingProvider.html",[3,0.194,4,0.172,5,0.172,9,0.361,10,1.224,20,0.682,22,1.336,23,0.017,24,1.171,25,0.572,26,0.975,31,1.224,32,3.085,36,0.287,38,0.72,40,0.649,50,0.194,51,0.045,79,0.012,80,0.012,88,1.982,174,2.248,187,1.394,196,3.136,274,3.091,301,6.329,321,4.98,322,4.98,323,4.98,324,5.53,326,4.98,327,5.53,329,3.835,330,3.435,582,3.435,829,3.835,830,4.442,831,4.442,832,5.768,833,4.442]],["title/modules/MailModule.html",[101,1.144,834,2.485]],["body/modules/MailModule.html",[3,0.161,4,0.143,5,0.143,23,0.017,36,0.472,37,1.382,40,0.538,41,1.864,50,0.161,51,0.037,64,1.382,76,1.864,79,0.011,80,0.011,101,1.751,103,1.594,104,1.594,105,1.864,106,1.864,107,1.676,108,2.95,109,2.95,119,2.575,120,1.864,121,1.864,125,2.097,128,4.392,136,3.179,137,3.319,138,2.6,168,3.179,170,3.179,193,2.097,315,0.931,370,1.974,623,3.319,665,3.179,699,2.402,834,4.561,835,3.179,836,3.179,837,3.179,838,4.865,839,3.683,840,5.087,841,3.179,842,3.683,843,5.031,844,2.848,845,3.683,846,3.683,847,5.087,848,3.683,849,5.087,850,3.683,851,3.683,852,3.683,853,3.683,854,3.683,855,3.683,856,3.683,857,3.683,858,3.683,859,3.683,860,3.683,861,3.683,862,3.683,863,3.683,864,3.683,865,3.683,866,3.179]],["title/injectables/MailProvider.html",[38,0.476,838,2.485]],["body/injectables/MailProvider.html",[3,0.183,4,0.162,5,0.162,9,0.34,10,1.177,11,1.789,13,1.312,15,1.818,20,0.655,22,1.285,23,0.017,24,1.344,25,0.549,26,0.937,30,2.953,31,0.887,32,1.903,36,0.427,37,1.569,38,0.692,40,0.611,50,0.183,51,0.042,53,1.371,67,1.312,79,0.012,80,0.012,86,1.723,137,2.728,138,2.953,187,1.312,194,2.229,221,2.953,315,1.674,382,2.541,758,4.786,838,3.617,843,3.61,844,3.234,867,3.61,868,6.219,869,4.182,870,6.623,871,4.182,872,4.182,873,4.182,874,4.182,875,4.182,876,4.182,877,4.182,878,4.182,879,4.182,880,4.182,881,5.544,882,3.61,883,4.182,884,4.182,885,4.182]],["title/classes/MatchPasswordsConstraint.html",[51,0.038,624,2.69]],["body/classes/MatchPasswordsConstraint.html",[3,0.112,4,0.099,5,0.099,9,0.207,10,0.827,11,0.734,20,0.461,22,0.903,23,0.017,24,1.156,25,0.688,26,0.658,31,0.827,36,0.387,50,0.112,51,0.053,52,2.219,57,1.004,62,3.336,75,1.003,76,2.392,79,0.008,80,0.008,86,1.606,88,1.919,89,1.694,174,3.258,252,1.975,338,1.975,346,2.406,364,1.803,370,1.368,371,1.454,378,2.542,381,0.958,514,1.052,518,3.647,523,1.975,526,1.975,527,3.013,529,3.45,531,1.105,532,1.454,548,3.417,549,2.088,550,3.654,551,1.803,552,1.975,553,4.08,554,1.666,555,1.368,556,1.666,557,3.336,559,2.204,560,2.204,563,4.641,564,3.364,565,3.364,566,3.364,567,4.08,568,2.204,571,2.204,573,2.204,575,2.204,576,1.803,580,2.204,581,2.542,582,1.975,585,2.204,586,1.975,590,2.204,591,2.204,592,2.204,593,2.204,594,2.204,595,2.204,596,1.224,597,2.204,598,2.834,599,3.364,600,2.204,601,2.204,602,2.204,606,2.751,607,2.872,608,2.204,609,3.364,610,3.364,611,4.08,612,5.39,613,3.364,614,5.557,615,1.975,616,1.975,617,3.364,618,1.975,619,2.204,620,1.975,621,2.204,622,2.204,623,2.542,624,2.751,625,3.364,626,4.565,627,3.013,628,2.204,629,2.204,630,3.364,631,2.204,632,2.204,633,3.364,634,2.204,635,2.204,636,3.654,637,3.364,638,2.204,639,1.975,640,4.08,641,2.204,642,2.204,643,2.542,644,1.975,645,2.204,646,2.204,886,3.897,887,2.553,888,2.553]],["title/entities/Message.html",[352,2.042,596,1.826]],["body/entities/Message.html",[3,0.169,4,0.15,5,0.15,9,0.314,20,0.793,23,0.017,25,0.686,36,0.385,50,0.169,51,0.039,79,0.011,80,0.011,85,1.723,88,1.692,95,2.199,315,1.749,346,3.324,350,2.985,352,2.816,353,2.726,356,2.718,358,4.536,359,5.157,361,4.619,368,2.985,375,5.535,376,4.958,378,3.428,381,1.448,596,2.519,889,3.333,890,5.157,891,5.187,892,5.973,893,5.254,894,5.254,895,3.861,896,3.861,897,5.254,898,3.861,899,3.861,900,3.861,901,5.973,902,2.985]],["title/controllers/MessageController.html",[90,1.497,903,2.69]],["body/controllers/MessageController.html",[3,0.139,4,0.124,5,0.124,9,0.259,10,0.975,11,2.09,20,0.697,22,1.366,23,0.017,24,1.197,25,0.681,26,0.996,31,1.251,36,0.297,40,0.466,50,0.139,51,0.032,53,1.046,64,1.197,67,1.85,75,1.251,79,0.01,80,0.01,88,1.935,90,1.253,92,1.253,95,1.933,99,2.252,192,2.081,205,2.827,206,4.377,210,3.583,356,2.091,391,1.709,394,1.989,395,2.998,399,3.804,421,3.245,422,2.466,423,4.413,434,2.753,456,4.167,480,2.466,596,2.827,816,2.753,891,4.167,903,3.245,904,2.753,905,3.189,906,5.091,907,3.189,908,2.753,909,4.596,910,3.189,911,5.091,912,2.753,913,4.596,914,3.189,915,2.753,916,4.596,917,3.189,918,3.274,919,2.753,920,3.189,921,2.753,922,3.189,923,3.189,924,4.596,925,2.466,926,3.189,927,3.189,928,3.189,929,3.189,930,3.189,931,3.189]],["title/modules/MessageModule.html",[101,1.144,115,2.485]],["body/modules/MessageModule.html",[3,0.191,4,0.169,5,0.169,23,0.017,36,0.471,40,0.636,50,0.191,51,0.044,79,0.012,80,0.012,92,2.238,101,1.906,103,1.885,104,1.885,105,2.205,106,2.205,107,1.982,108,3.212,109,3.212,115,4.761,119,2.883,120,2.205,121,2.205,125,2.48,133,3.076,134,1.795,315,1.439,346,2.592,350,3.369,596,2.088,618,3.369,903,4.48,918,4.653,919,3.761,932,3.761,933,3.761,934,3.761,935,4.356,936,3.761,937,4.356,938,4.356]],["title/injectables/MessageService.html",[38,0.476,918,2.315]],["body/injectables/MessageService.html",[3,0.109,4,0.097,5,0.097,9,0.203,10,0.813,11,1.986,13,1.462,15,1.256,20,0.666,22,1.306,23,0.017,24,1.144,25,0.559,26,0.953,31,1.109,32,2.908,36,0.384,38,0.478,40,0.365,50,0.109,51,0.025,57,2.216,63,2.645,64,2.115,67,1.943,75,0.989,79,0.008,80,0.008,88,1.956,134,1.029,187,0.783,315,0.631,346,2.565,356,2.378,381,0.937,382,1.517,391,2.053,394,2.262,395,2.499,399,3.291,423,3.291,450,3.386,456,4.042,464,2.156,466,1.422,467,2.156,468,1.517,469,3.291,479,4.512,480,3.604,486,2.156,496,1.763,501,1.763,503,2.156,504,1.931,596,3.064,890,4.867,891,4.359,902,1.931,908,3.307,911,4.024,912,3.307,915,3.307,918,2.328,921,4.512,925,1.931,936,2.156,939,2.156,940,2.497,941,4.661,942,4.661,943,2.497,944,3.831,945,3.831,946,2.497,947,2.497,948,2.497,949,5.227,950,2.497,951,2.497,952,3.831,953,3.307,954,1.931,955,2.497,956,2.497,957,2.497,958,2.497,959,2.156,960,2.497,961,3.831,962,2.497,963,2.497,964,3.831,965,2.497,966,2.497]],["title/classes/Paginated.html",[51,0.038,967,2.69]],["body/classes/Paginated.html",[3,0.215,4,0.19,5,0.19,9,0.399,20,0.793,23,0.017,25,0.718,50,0.215,51,0.049,79,0.013,80,0.013,85,2.015,88,1.622,89,1.759,514,2.023,576,3.465,699,4.01,740,3.795,906,5.307,967,4.34,968,4.237,969,5.19,970,5.794,971,4.907,972,4.907,973,4.907,974,4.907,975,4.907,976,4.237,977,4.907,978,4.907,979,4.907,980,4.237,981,4.907,982,4.907]],["title/modules/PaginationModule.html",[101,1.144,116,2.485]],["body/modules/PaginationModule.html",[3,0.212,4,0.188,5,0.188,23,0.016,36,0.393,40,0.706,50,0.212,51,0.048,79,0.013,80,0.013,92,1.901,101,1.83,103,2.093,104,2.093,105,2.449,106,2.449,107,2.201,108,3.375,109,3.083,116,4.877,119,3.083,120,2.449,121,2.449,125,2.754,983,4.176,984,4.176,985,4.176,986,5.044,987,4.837,988,4.837,989,4.837,990,4.837]],["title/injectables/PaginationProvider.html",[38,0.476,986,2.485]],["body/injectables/PaginationProvider.html",[3,0.133,4,0.118,5,0.118,9,0.246,10,0.94,11,1.506,13,0.951,15,1.453,20,0.524,22,1.213,23,0.017,24,0.899,25,0.519,26,0.749,31,0.644,32,2.016,34,3.996,36,0.413,37,1.138,38,0.553,40,0.443,43,2.345,50,0.133,51,0.03,53,0.994,57,2.662,64,1.138,67,1.39,75,0.644,79,0.009,80,0.009,89,1.588,145,1.978,187,0.951,194,1.877,210,2.693,381,1.138,394,1.312,450,3.101,501,3.697,576,2.141,586,2.345,688,2.618,699,1.978,740,2.345,954,4.737,967,3.129,969,2.345,970,2.618,976,4.52,980,2.618,986,2.891,991,2.618,992,5.236,993,3.033,994,3.033,995,3.033,996,4.066,997,3.033,998,3.033,999,3.033,1000,3.033,1001,3.033,1002,3.033,1003,3.033,1004,3.033,1005,3.033,1006,3.033,1007,4.431,1008,4.431,1009,3.033,1010,3.033,1011,2.141,1012,5.759,1013,6.774,1014,3.033,1015,2.618,1016,4.431,1017,3.033,1018,3.033,1019,4.431,1020,3.033,1021,3.033,1022,3.033,1023,3.033,1024,3.033,1025,2.618,1026,3.033,1027,3.033,1028,3.033,1029,3.033,1030,3.033,1031,3.033,1032,5.236,1033,3.033,1034,3.033,1035,3.033,1036,4.431,1037,3.033,1038,3.033,1039,3.033,1040,3.033,1041,3.033,1042,3.033,1043,3.033,1044,3.033]],["title/classes/PaginationQueryDto.html",[51,0.038,996,2.69]],["body/classes/PaginationQueryDto.html",[3,0.207,4,0.184,5,0.184,9,0.385,20,0.711,23,0.017,25,0.596,26,1.174,36,0.306,50,0.207,51,0.06,79,0.013,80,0.013,85,1.97,89,2.154,95,1.97,370,3.221,496,4.244,514,1.952,529,4.307,531,2.05,643,3.921,954,4.648,996,4.244,1011,4.244,1045,5.7,1046,4.089,1047,4.648,1048,6.01,1049,4.736,1050,4.736,1051,6.603,1052,4.736,1053,4.736]],["title/classes/RefreshTokenDto.html",[51,0.038,198,2.315]],["body/classes/RefreshTokenDto.html",[3,0.232,4,0.206,5,0.206,9,0.431,20,0.628,23,0.016,25,0.526,36,0.343,50,0.232,51,0.065,79,0.014,80,0.014,85,2.116,88,1.703,95,1.741,195,4.909,198,3.922,514,2.189,518,3.922,531,2.298,607,3.922,1054,4.585,1055,4.585,1056,5.311]],["title/injectables/RefreshTokensProvider.html",[38,0.476,277,2.315]],["body/injectables/RefreshTokensProvider.html",[3,0.146,4,0.13,5,0.13,9,0.272,10,1.01,11,1.592,13,1.891,15,1.56,17,5.473,18,4.28,19,4.256,20,0.562,22,1.102,23,0.017,24,0.966,25,0.471,26,0.804,31,0.71,36,0.439,37,2.261,38,0.594,40,0.489,41,1.694,42,2.183,46,2.183,50,0.146,51,0.034,53,1.976,54,2.363,57,1.87,59,2.891,62,2.363,67,1.737,68,2.889,75,0.71,79,0.01,80,0.01,87,2.363,176,1.906,187,1.05,194,1.984,198,3.869,205,1.604,217,2.588,220,2.183,275,3.23,277,2.891,281,1.793,290,2.183,306,2.183,307,3.165,312,2.183,314,2.588,315,1.202,316,2.034,709,2.363,732,2.588,735,2.889,743,2.889,745,2.588,747,2.889,748,2.889,749,2.889,750,2.889,751,2.889,752,2.889,755,3.359,807,2.889,1057,4.778,1058,4.757,1059,5.204,1060,4.757,1061,3.347,1062,3.347,1063,3.347,1064,3.347,1065,2.889]],["title/interfaces/ServerToClientEvents.html",[81,2.169,1066,2.946]],["body/interfaces/ServerToClientEvents.html",[3,0.25,4,0.222,5,0.222,23,0.016,50,0.25,66,3.727,79,0.014,80,0.014,81,3.253,83,4.034,596,2.739,1066,5.214,1067,4.034,1068,4.932,1069,4.932,1070,5.713]],["title/classes/SignInDto.html",[51,0.038,202,2.315]],["body/classes/SignInDto.html",[3,0.219,4,0.195,5,0.195,9,0.408,20,0.737,23,0.016,25,0.617,36,0.324,50,0.219,51,0.062,79,0.013,80,0.013,85,2.043,86,2.794,88,1.871,95,2.043,174,3.431,202,3.787,514,2.067,518,3.787,531,2.171,606,4.4,607,4.119,1055,4.331,1071,4.331,1072,5.016,1073,5.016,1074,5.016]],["title/injectables/SignInProvider.html",[38,0.476,278,2.315]],["body/injectables/SignInProvider.html",[3,0.144,4,0.128,5,0.128,9,0.267,10,0.997,11,1.577,13,1.72,15,1.541,20,0.556,22,1.089,23,0.017,24,0.954,25,0.466,26,0.794,31,0.698,36,0.408,37,1.234,38,0.587,39,2.146,40,0.48,50,0.144,51,0.033,53,1.797,63,3.027,64,2.057,65,1.999,67,1.72,72,1.999,73,3.122,75,0.698,79,0.01,80,0.01,174,2.775,176,1.873,187,1.032,194,1.965,196,3.318,201,3.634,202,3.844,205,1.577,214,2.544,220,3.577,274,3.629,275,3.205,278,2.856,281,1.763,290,2.146,306,2.146,307,3.151,312,2.146,315,1.511,316,1.999,330,3.634,548,1.873,623,2.146,627,2.544,654,2.544,658,2.84,669,2.544,676,3.318,745,2.544,755,2.323,953,2.84,1059,5.163,1065,2.84,1075,4.733,1076,2.84,1077,3.29,1078,3.29,1079,3.29,1080,3.29,1081,3.29,1082,4.699,1083,4.699,1084,3.29,1085,5.483,1086,3.29,1087,3.29,1088,3.29,1089,3.29]],["title/classes/UpdateChatRoomDto.html",[51,0.038,418,2.485]],["body/classes/UpdateChatRoomDto.html",[3,0.238,4,0.211,5,0.211,23,0.016,36,0.422,50,0.238,51,0.055,79,0.014,80,0.014,251,4.205,391,3.509,394,2.353,405,3.305,418,4.271,427,4.205,514,2.241,516,4.205,702,5.652,707,4.695,708,4.695,1090,4.695,1091,6.547]],["title/entities/User.html",[315,0.963,352,2.042]],["body/entities/User.html",[3,0.118,4,0.104,5,0.104,9,0.219,20,0.791,23,0.017,25,0.676,26,1.152,36,0.41,50,0.118,51,0.049,76,3.311,79,0.009,80,0.009,85,1.329,86,2.011,88,1.799,89,1.453,95,2.194,174,2.469,315,1.024,346,2.892,352,2.173,353,1.899,356,2.22,357,1.899,361,3.772,363,5.778,364,4.324,365,4.688,368,2.08,369,4.688,370,2.173,371,1.532,376,3.135,378,2.645,379,3.5,380,3.5,381,1.009,388,3.5,391,1.442,392,2.08,499,2.322,529,3.183,531,1.164,532,1.532,552,3.772,554,3.183,555,2.614,556,3.183,557,4.619,596,3.136,598,1.442,616,2.08,623,3.543,639,3.135,644,2.08,902,2.08,925,3.772,969,2.08,1092,2.322,1093,2.69,1094,2.69,1095,2.69,1096,6.541,1097,2.69,1098,2.69,1099,4.054,1100,2.69,1101,2.69,1102,2.69,1103,2.69,1104,4.054,1105,2.69,1106,2.69,1107,2.69,1108,2.69,1109,4.054,1110,4.054,1111,4.054,1112,4.878,1113,2.69,1114,2.69,1115,2.322]],["title/controllers/UserController.html",[90,1.497,124,2.485]],["body/controllers/UserController.html",[3,0.142,4,0.126,5,0.126,9,0.264,10,0.989,20,0.703,22,1.378,23,0.017,24,1.207,25,0.589,26,1.005,31,1.262,36,0.406,40,0.475,50,0.142,51,0.033,53,1.066,64,1.748,75,1.262,79,0.01,80,0.01,89,2.474,90,1.277,92,1.277,95,1.95,99,2.295,124,3.04,192,2.121,194,2.614,206,2.121,210,3.309,307,1.479,356,1.479,357,2.295,421,3.845,422,3.603,423,3.845,425,5.135,426,2.121,549,3.511,650,3.603,652,2.514,656,3.29,700,4.275,759,4.275,1011,4.2,1047,4.6,1116,2.806,1117,4.022,1118,4.659,1119,5.446,1120,3.25,1121,2.806,1122,3.25,1123,3.25,1124,3.25,1125,3.25,1126,4.659,1127,3.25,1128,3.25,1129,3.25,1130,2.806,1131,2.806,1132,2.806,1133,3.25,1134,3.25,1135,3.25,1136,3.25,1137,3.25,1138,3.25,1139,3.25,1140,3.25,1141,3.25,1142,3.25,1143,3.25,1144,3.25,1145,3.25,1146,3.25,1147,3.25]],["title/modules/UserModule.html",[101,1.144,117,2.315]],["body/modules/UserModule.html",[3,0.155,4,0.138,5,0.138,23,0.017,36,0.474,40,0.518,50,0.155,51,0.036,79,0.011,80,0.011,86,1.462,92,1.948,101,1.716,103,1.535,104,1.535,105,1.796,106,1.796,107,1.614,108,2.892,109,2.892,113,3.012,117,4.637,119,2.509,120,1.796,121,1.796,124,3.727,125,2.822,133,2.505,134,1.462,281,2.656,307,3.372,315,0.896,534,4.097,555,1.901,598,2.656,647,4.097,655,2.315,714,4.097,725,4.097,834,4.398,1130,3.063,1148,3.063,1149,3.548,1150,3.063,1151,3.063,1152,3.548,1153,3.548,1154,3.548,1155,3.063,1156,4.957,1157,3.548,1158,3.548,1159,3.548,1160,3.548]],["title/injectables/UserService.html",[38,0.476,307,1.734]],["body/injectables/UserService.html",[3,0.094,4,0.084,5,0.084,9,0.175,10,0.726,11,2.046,13,1.652,15,1.121,20,0.741,22,1.452,23,0.017,24,1.272,25,0.621,26,1.059,31,1.292,32,2.198,36,0.43,37,0.81,38,0.427,40,0.315,50,0.094,51,0.022,53,1.584,67,1.333,75,1.292,76,1.093,79,0.007,80,0.007,86,1.41,88,1.478,89,2.389,134,0.89,187,0.678,194,2.639,205,2.685,307,1.556,315,0.864,352,1.157,356,2.396,381,0.81,394,0.934,395,2.771,426,1.409,450,2.445,451,2.079,466,1.23,468,1.312,469,2.415,534,3.566,536,2.953,537,1.409,539,2.953,540,3.152,542,1.864,549,2.822,555,1.833,598,1.833,647,3.566,650,2.645,652,2.645,655,1.409,656,2.415,700,3.435,710,1.864,714,3.566,721,2.645,725,3.566,727,2.953,729,2.953,759,3.654,1011,2.999,1047,3.285,1117,2.953,1121,2.953,1131,1.864,1132,1.864,1155,1.864,1161,1.864,1162,3.42,1163,3.42,1164,3.42,1165,2.159,1166,2.159,1167,2.159,1168,2.159,1169,3.42,1170,2.159,1171,2.159,1172,2.159,1173,2.159,1174,3.42,1175,2.159,1176,3.42,1177,2.159,1178,2.159,1179,2.159,1180,2.159,1181,2.159,1182,2.159,1183,2.159,1184,2.159,1185,2.159,1186,3.42,1187,2.159,1188,3.42,1189,2.159,1190,3.42,1191,2.159,1192,3.42,1193,2.159,1194,2.159,1195,2.159,1196,2.159]],["title/modules/WebSocketModule.html",[101,1.144,118,2.485]],["body/modules/WebSocketModule.html",[3,0.249,4,0.221,5,0.221,23,0.016,36,0.367,40,0.831,50,0.249,51,0.057,79,0.014,80,0.014,101,2.02,103,2.462,118,4.387,156,4.912,1067,4.017,1197,5.689]],["title/classes/WebsocketGateway.html",[51,0.038,158,2.69]],["body/classes/WebsocketGateway.html",[3,0.219,4,0.194,5,0.194,9,0.406,10,1.319,20,0.591,22,1.158,23,0.017,24,1.015,25,0.495,26,0.845,31,1.061,36,0.322,50,0.219,51,0.05,66,4.415,75,1.061,79,0.013,80,0.013,88,1.64,95,1.638,158,4.999,190,4.315,514,2.06,1067,4.39,1198,4.315,1199,6.217,1200,6.217,1201,6.217,1202,4.998,1203,4.998,1204,4.998,1205,4.315,1206,4.998]],["title/coverage.html",[1207,4.495]],["body/coverage.html",[0,2.675,1,1.495,5,0.095,6,2.124,7,1.605,8,2.124,23,0.017,25,0.244,38,0.909,48,1.903,51,0.069,64,0.923,79,0.008,80,0.008,81,2.63,82,1.605,84,2.124,90,2.325,91,1.738,93,2.124,97,1.495,107,1.12,123,1.605,124,1.605,146,1.738,148,1.903,158,1.738,186,1.738,188,2.124,191,2.124,193,1.401,198,1.495,202,1.495,212,1.495,230,2.124,231,2.124,241,1.903,274,1.319,275,1.319,276,1.401,277,1.495,278,1.495,280,1.605,282,1.738,305,2.124,307,1.12,315,0.622,320,2.124,343,1.495,345,1.738,346,1.12,352,2.475,354,2.124,390,2.124,391,2.03,405,1.495,418,1.605,446,2.124,504,6.069,515,2.124,516,2.929,534,1.495,535,2.124,540,1.605,549,1.319,550,2.929,551,3.261,596,1.18,598,2.03,624,1.738,647,1.495,648,2.124,649,2.124,683,2.124,684,2.124,685,2.124,700,1.605,701,2.124,714,1.495,715,2.929,716,2.124,725,1.495,726,2.124,731,1.903,732,2.929,759,1.605,760,2.124,765,1.903,766,2.124,771,1.605,780,2.124,781,2.124,825,2.124,826,2.124,827,2.124,829,2.124,838,1.605,867,2.124,889,2.124,903,1.738,904,2.124,918,1.495,939,2.124,967,1.738,968,2.124,986,1.605,991,2.124,996,1.738,1045,2.124,1046,2.124,1054,2.124,1057,2.124,1066,1.903,1067,2.675,1068,2.124,1069,2.124,1071,2.124,1075,2.124,1076,2.124,1090,2.124,1092,2.124,1115,2.124,1116,2.124,1161,2.124,1198,2.124,1207,2.124,1208,2.124,1209,2.461,1210,2.461,1211,6.525,1212,7.113,1213,3.27,1214,5.187,1215,6.663,1216,2.124,1217,2.124,1218,2.124,1219,5.6,1220,5.6,1221,2.461,1222,3.788,1223,2.124,1224,2.461,1225,2.461,1226,2.461,1227,2.461]],["title/dependencies.html",[104,1.984,1228,2.743]],["body/dependencies.html",[23,0.017,40,0.664,41,2.301,42,2.966,43,3.515,45,3.21,51,0.059,79,0.012,80,0.012,104,1.967,134,1.874,137,2.966,138,3.21,145,2.966,193,2.588,331,3.925,381,1.706,531,1.967,532,2.588,581,2.966,615,3.515,791,3.925,844,3.515,1205,3.925,1229,4.546,1230,4.546,1231,4.546,1232,6.477,1233,4.546,1234,5.855,1235,5.855,1236,5.855,1237,5.855,1238,4.546,1239,4.546,1240,4.546,1241,4.546,1242,4.546,1243,4.546,1244,4.546,1245,4.546,1246,4.546,1247,4.546,1248,4.546,1249,4.546,1250,4.546,1251,4.546,1252,4.546,1253,4.546,1254,4.546,1255,4.546]],["title/miscellaneous/enumerations.html",[1256,1.931,1257,3.957]],["body/miscellaneous/enumerations.html",[9,0.428,13,2.015,23,0.016,79,0.014,80,0.014,215,4.19,315,1.623,367,4.535,557,4.535,643,4.824,1256,3.202,1257,4.549,1258,5.269,1259,5.269,1260,5.269,1261,5.269,1262,5.269,1263,5.269,1264,5.269,1265,6.423,1266,5.269,1267,6.423,1268,6.423]],["title/miscellaneous/functions.html",[1256,1.931,1269,3.957]],["body/miscellaneous/functions.html",[9,0.482,23,0.015,79,0.015,80,0.015,107,3.316,1223,5.126,1256,3.608,1269,5.126,1270,5.938]],["title/index.html",[9,0.258,1271,2.743,1272,2.743]],["body/index.html",[4,0.141,23,0.016,34,2.37,41,1.839,51,0.051,64,1.363,79,0.011,80,0.011,90,1.428,101,1.091,104,1.572,129,3.137,134,1.497,137,3.288,176,2.069,221,2.565,300,3.137,370,2.701,381,1.891,394,1.572,450,1.839,531,1.572,532,2.069,563,2.81,620,2.81,709,2.565,841,3.137,866,3.137,882,4.351,1015,3.137,1025,4.351,1208,3.137,1271,3.137,1272,3.137,1273,6.564,1274,3.633,1275,3.633,1276,3.633,1277,3.633,1278,3.633,1279,3.633,1280,3.633,1281,6.793,1282,3.633,1283,5.04,1284,5.04,1285,3.633,1286,3.633,1287,3.633,1288,3.633,1289,5.786,1290,5.04,1291,3.633,1292,3.633,1293,6.564,1294,3.633,1295,3.633,1296,3.633,1297,3.633,1298,3.633,1299,3.633,1300,3.633,1301,3.633,1302,3.633,1303,3.633,1304,3.633,1305,3.633,1306,3.633,1307,3.633,1308,3.633,1309,3.633,1310,3.633,1311,3.633,1312,3.633,1313,3.633,1314,3.633,1315,3.633,1316,3.633,1317,5.04,1318,3.633,1319,3.633,1320,3.633,1321,3.633,1322,5.04,1323,5.04,1324,3.633,1325,3.633,1326,3.633,1327,3.633,1328,3.633,1329,3.633,1330,5.04,1331,5.786,1332,3.633,1333,3.633,1334,3.633,1335,3.633,1336,3.633,1337,3.633,1338,3.633,1339,3.633,1340,5.04,1341,3.633,1342,3.633,1343,3.633,1344,3.633,1345,3.633,1346,5.04,1347,3.633,1348,3.633,1349,4.351,1350,3.633,1351,3.633,1352,3.633]],["title/modules.html",[103,2.253]],["body/modules.html",[23,0.013,79,0.013,80,0.013,102,3.609,103,2.212,113,3.106,114,3.334,115,3.334,116,3.334,117,3.106,118,3.334,821,3.609,834,3.334,1353,7.641,1354,7.641,1355,7.641,1356,7.702,1357,5.111,1358,5.111]],["title/overview.html",[1359,4.495]],["body/overview.html",[2,2.309,23,0.017,79,0.009,80,0.009,83,2.108,92,1.174,97,3.153,101,0.897,102,5.29,103,1.292,104,1.292,105,1.511,106,1.511,107,1.359,108,1.511,109,1.511,110,2.578,111,2.578,112,2.578,113,4.474,114,4.29,115,4.151,116,4.151,117,4.503,118,3.385,119,2.217,120,1.511,121,1.511,187,0.937,212,3.996,271,2.578,272,2.578,273,2.578,274,3.063,275,2.781,276,3.255,277,3.153,278,3.153,307,2.992,340,2.578,341,2.578,342,2.578,343,3.996,353,2.108,496,2.108,514,1.231,534,3.153,647,3.153,714,3.153,725,3.153,821,4.036,822,2.578,834,4.151,835,2.578,836,2.578,837,2.578,838,4.29,918,3.996,932,2.578,933,2.578,934,2.578,959,3.782,983,2.578,984,2.578,985,2.578,986,4.29,1148,2.578,1150,2.578,1151,2.578,1359,2.578,1360,2.986,1361,2.986,1362,2.986,1363,2.986]],["title/properties.html",[85,1.503,1228,2.743]],["body/properties.html",[23,0.016,79,0.015,80,0.015,85,1.921,548,3.337,1349,5.06,1364,5.861,1365,5.861,1366,5.861,1367,5.861]],["title/miscellaneous/variables.html",[1256,1.931,1368,3.957]],["body/miscellaneous/variables.html",[9,0.38,23,0.017,25,0.59,28,3.298,34,3.047,48,4.607,57,2.342,70,4.033,75,0.991,79,0.013,80,0.013,82,3.887,88,1.572,193,3.735,215,4.28,241,4.607,315,1.658,370,3.703,371,2.66,636,4.607,643,4.508,1213,4.033,1216,4.033,1217,5.143,1218,4.033,1256,2.839,1368,4.033,1369,4.671,1370,4.671,1371,5.958,1372,4.671,1373,4.671,1374,4.671,1375,4.671,1376,4.671,1377,4.671]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":504,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1365,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1212,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":954,"title":{},"body":{"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["1.1.23",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["10.0.0",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":365,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["11.0.0",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1363,"title":{},"body":{"overview.html":{}}}],["150",{"_index":573,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["18",{"_index":1362,"title":{},"body":{"overview.html":{}}}],["2",{"_index":496,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"classes/PaginationQueryDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["225",{"_index":1099,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":959,"title":{},"body":{"injectables/MessageService.html":{},"overview.html":{}}}],["3.1.10",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["34",{"_index":1026,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["4.0.0",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1361,"title":{},"body":{"overview.html":{}}}],["6.9.13",{"_index":1247,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1360,"title":{},"body":{"overview.html":{}}}],["9!@#$%^&*]{8,16",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["9.15.1",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["9])[a",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["_",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["access",{"_index":239,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstoken",{"_index":753,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["activate",{"_index":262,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["activeuser",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":82,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":864,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":510,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["adduser",{"_index":393,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["adduser(id",{"_index":400,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["addusertochatroom",{"_index":447,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["addusertochatroom(chatroomid",{"_index":454,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["admin",{"_index":1267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alphabets",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["already",{"_index":659,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["alt",{"_index":1341,"title":{},"body":{"index.html":{}}}],["always",{"_index":1323,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apiproperty",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apiproperty({type",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiversrion:'0.0.1",{"_index":697,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1310,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1304,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1311,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["app_interceptor",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appcontroller",{"_index":91,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1289,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":102,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":97,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["args.object",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":252,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array.isarray(guard",{"_index":256,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["assert",{"_index":848,"title":{},"body":{"modules/MailModule.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":749,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtypes.none",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["auth.controller",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":431,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/auth.controller",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":767,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guard/access",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/auth",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":430,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/social/interfaces/user.interface",{"_index":544,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["auth_type_key",{"_index":241,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig/jwt.config",{"_index":743,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["authcontroller",{"_index":123,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":769,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":778,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":786,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(googltokendto",{"_index":770,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":768,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.controller.ts",{"_index":766,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":772,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.service.ts",{"_index":781,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:11",{"_index":785,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:30",{"_index":788,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:36",{"_index":787,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authguardguard",{"_index":146,"title":{"guards/AuthGuardGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["authguardguard.defaultauthtype",{"_index":249,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authmodule",{"_index":113,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1367,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":212,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtication.module.ts",{"_index":824,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["authtypeguardmap",{"_index":232,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtypes.bearer",{"_index":242,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.map((type",{"_index":253,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.none",{"_index":245,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["autogenerated",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["autoloadentities",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":386,"title":{},"body":{"entities/ChatRoom.html":{}}}],["available",{"_index":1358,"title":{},"body":{"modules.html":{}}}],["await",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":465,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["badrequestexception('cannot",{"_index":509,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('one",{"_index":493,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('private",{"_index":497,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('user",{"_index":675,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["baseurl",{"_index":1019,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(inppassword",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":282,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["before",{"_index":1328,"title":{},"body":{"index.html":{}}}],["bind",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{}}}],["blog",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["body.senderid",{"_index":923,"title":{},"body":{"controllers/MessageController.html":{}}}],["body.text",{"_index":924,"title":{},"body":{"controllers/MessageController.html":{}}}],["boolean",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1274,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1322,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1356,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1353,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1346,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":689,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["cascade",{"_index":376,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["catch((err",{"_index":268,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["cause",{"_index":670,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["cd",{"_index":1287,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1324,"title":{},"body":{"index.html":{}}}],["character",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["chat",{"_index":391,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatmodule",{"_index":114,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatroom",{"_index":346,"title":{"entities/ChatRoom.html":{}},"body":{"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatroom.controller",{"_index":348,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.entity",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{}}}],["chatroom.id",{"_index":894,"title":{},"body":{"entities/Message.html":{}}}],["chatroom.type",{"_index":494,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users",{"_index":499,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatroom.users)@jointable",{"_index":1094,"title":{},"body":{"entities/User.html":{}}}],["chatroom.users.filter(user",{"_index":512,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.push(user",{"_index":511,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomcontroller",{"_index":345,"title":{"controllers/ChatRoomController.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["chatroomid",{"_index":456,"title":{},"body":{"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["chatroomrepository",{"_index":453,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["chatrooms/chatroom.entity",{"_index":902,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["chatrooms/chatrooms.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["chatroomservice",{"_index":343,"title":{"injectables/ChatRoomService.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"coverage.html":{},"overview.html":{}}}],["chatroomsrepo",{"_index":941,"title":{},"body":{"injectables/MessageService.html":{}}}],["chatroomtype",{"_index":367,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatroomtype.group",{"_index":385,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["chatroomtype.private",{"_index":495,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["check",{"_index":658,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["class",{"_index":51,"title":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/WebsocketGateway.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":514,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/WebsocketGateway.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["cleanup",{"_index":389,"title":{},"body":{"entities/ChatRoom.html":{}}}],["cli",{"_index":1276,"title":{},"body":{"index.html":{}}}],["client",{"_index":1203,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["client_id",{"_index":792,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_secret",{"_index":794,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":1283,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":340,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":342,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":341,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule",{"_index":822,"title":{},"body":{"modules/GoogleAuthticationModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule_providers",{"_index":823,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["cluster_mailmodule",{"_index":835,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":836,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":837,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":932,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":933,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":934,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":983,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":984,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":985,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1148,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1151,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1149,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1150,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1300,"title":{},"body":{"index.html":{}}}],["column",{"_index":378,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["column('varchar",{"_index":363,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["column({type",{"_index":368,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["commands",{"_index":1345,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1331,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":1339,"title":{},"body":{"index.html":{}}}],["common/pagination.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["comparepasswords",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(password",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":833,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{}}}],["config",{"_index":841,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["config.get('mail_host",{"_index":855,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_port",{"_index":857,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_password",{"_index":860,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_username",{"_index":858,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["configservice.get('database.autoload",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.blog",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":1314,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1309,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["confirmpassword",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["conflictexception",{"_index":543,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":547,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["connecting",{"_index":669,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["connection",{"_index":1306,"title":{},"body":{"index.html":{}}}],["conpare",{"_index":1084,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["console.error(\"google",{"_index":819,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"google",{"_index":805,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"instance",{"_index":265,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(\"received",{"_index":798,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log('before",{"_index":695,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('show",{"_index":250,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(baseurl",{"_index":1024,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(canactivate",{"_index":270,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(getuserparamdto",{"_index":1139,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(newurl",{"_index":1030,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(payload",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@injectrepository(user",{"_index":720,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["constructor(chatroomrepository",{"_index":449,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(mailerservice",{"_index":869,"title":{},"body":{"injectables/MailProvider.html":{}}}],["constructor(messagesrepo",{"_index":940,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(private",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":235,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["constructor(request",{"_index":993,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":537,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["containg",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["contains",{"_index":1308,"title":{},"body":{"index.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailProvider.html":{}}}],["context.getclass",{"_index":248,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gethandler",{"_index":247,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":90,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":777,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('chat",{"_index":432,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["controller('message",{"_index":920,"title":{},"body":{"controllers/MessageController.html":{}}}],["controller('users",{"_index":1133,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1207,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":394,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/UpdateChatRoomDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":434,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{}}}],["create(body",{"_index":905,"title":{},"body":{"controllers/MessageController.html":{}}}],["create(chatroomid",{"_index":945,"title":{},"body":{"injectables/MessageService.html":{}}}],["create(createchatroomdto",{"_index":404,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["createchatroomdto",{"_index":405,"title":{"classes/CreateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["createchatroomdto.name",{"_index":482,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.type",{"_index":483,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.length",{"_index":476,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.map(id",{"_index":473,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createdat",{"_index":355,"title":{},"body":{"entities/ChatRoom.html":{}}}],["createdatecolumn",{"_index":359,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["creategoogleuser",{"_index":536,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":539,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":534,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":1113,"title":{},"body":{"entities/User.html":{}}}],["createuserdto",{"_index":549,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":662,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":679,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":647,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":650,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createusers(@body",{"_index":1141,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":652,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":980,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1038,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["currentpage:number",{"_index":977,"title":{},"body":{"classes/Paginated.html":{}}}],["custum",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["data",{"_index":699,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"modules/MailModule.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data.length",{"_index":698,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["data:t",{"_index":974,"title":{},"body":{"classes/Paginated.html":{}}}],["database",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"index.html":{}}}],["databaseconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":186,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":358,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["db",{"_index":953,"title":{},"body":{"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["declarations",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["decorators/auth.decorator",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":370,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":234,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["defaultmessage",{"_index":886,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["defaultmessage(args",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["defaultvaluepipe",{"_index":1128,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1138,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(20",{"_index":1136,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["delete",{"_index":423,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":412,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':id/users/:userid",{"_index":415,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':messageid",{"_index":909,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(@param('messageid",{"_index":928,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(messageid",{"_index":908,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["deleted",{"_index":1184,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser",{"_index":1117,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":1143,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1121,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":104,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1079,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["description",{"_index":548,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"properties.html":{}}}],["development",{"_index":1291,"title":{},"body":{"index.html":{}}}],["dir",{"_index":862,"title":{},"body":{"modules/MailModule.html":{}}}],["directly",{"_index":1321,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1208,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":1080,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["double",{"_index":1334,"title":{},"body":{"index.html":{}}}],["dtos/create",{"_index":426,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/getuserparamdto",{"_index":1132,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":775,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1131,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/refreshtokendto",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/update",{"_index":428,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["dtos/userdto",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["during",{"_index":832,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["each",{"_index":523,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["edit",{"_index":710,"title":{},"body":{"classes/EditUserDto.html":{},"injectables/UserService.html":{}}}],["edit.email",{"_index":1192,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.firstname",{"_index":1186,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.lastname",{"_index":1188,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.password",{"_index":1190,"title":{},"body":{"injectables/UserService.html":{}}}],["editedpost",{"_index":1118,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(@body",{"_index":1146,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(edituserdto",{"_index":1123,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":1162,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser(edituserdto",{"_index":1169,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto",{"_index":700,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto.email",{"_index":1193,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.firstname",{"_index":1187,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.id",{"_index":1185,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.lastname",{"_index":1189,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.password",{"_index":1191,"title":{},"body":{"injectables/UserService.html":{}}}],["ejs",{"_index":844,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":849,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.ts",{"_index":716,"title":{},"body":{"injectables/FindOneByEmail.html":{},"coverage.html":{}}}],["email.ts:11",{"_index":719,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["email.ts:8",{"_index":717,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["encrypassword",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enforced",{"_index":1280,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["entities",{"_index":353,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":352,"title":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity('chat_rooms",{"_index":384,"title":{},"body":{"entities/ChatRoom.html":{}}}],["entry",{"_index":1302,"title":{},"body":{"index.html":{}}}],["enum",{"_index":369,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1257,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtypes.enum",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/chatroomtype",{"_index":383,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{}}}],["enums/userrole.enum",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["env.development",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":269,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["error",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["everything",{"_index":713,"title":{},"body":{"classes/EditUserDto.html":{}}}],["exactly",{"_index":498,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["example",{"_index":563,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["exception",{"_index":818,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["exclude",{"_index":1109,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column('varchar",{"_index":1106,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":676,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["existinguser",{"_index":661,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exits",{"_index":660,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expiresin",{"_index":739,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["exports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":990,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":702,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["extract",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["fails",{"_index":815,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["false",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["family_name",{"_index":809,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fatima",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatimaaminu@mail.com",{"_index":571,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fetch",{"_index":723,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["field",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"miscellaneous/variables.html":{}}}],["field'})@isemail()@maxlength(150)@column({unique",{"_index":572,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isnotempty()@maxlength(100",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isoptional()@maxlength(100",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["finalresponse",{"_index":1036,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":469,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":395,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["findall(@param('chatroomid",{"_index":926,"title":{},"body":{"controllers/MessageController.html":{}}}],["findall(chatroomid",{"_index":912,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["findall(getuserparamdto",{"_index":1171,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":396,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findone(@param('id",{"_index":437,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["findone(id",{"_index":408,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findonebyemail",{"_index":714,"title":{"injectables/FindOneByEmail.html":{}},"body":{"injectables/FindOneByEmail.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemail(email",{"_index":718,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["findonebygoogleid",{"_index":727,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":729,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":725,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1163,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1174,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":261,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["first",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["flat",{"_index":258,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["folder",{"_index":1307,"title":{},"body":{"index.html":{}}}],["form",{"_index":842,"title":{},"body":{"modules/MailModule.html":{}}}],["forwardref",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UserModule.html":{}}}],["found",{"_index":479,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["function",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1269,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":755,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1059,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":733,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":736,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":275,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1126,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':chatroomid",{"_index":913,"title":{},"body":{"controllers/MessageController.html":{}}}],["get(':id",{"_index":409,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":1164,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":1176,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1271,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserparamdto",{"_index":759,"title":{"classes/GetuserParamDto.html":{}},"body":{"classes/GetuserParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getusers",{"_index":1119,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1125,"title":{},"body":{"controllers/UserController.html":{}}}],["git",{"_index":1285,"title":{},"body":{"index.html":{}}}],["give",{"_index":1027,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["given_name",{"_index":808,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":840,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/MatchPasswordsConstraint.html":{},"dependencies.html":{}}}],["google'})@isstring()@isoptional()@maxlength(225",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["googleauthenticationcontroller",{"_index":280,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":276,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthticationmodule",{"_index":821,"title":{"modules/GoogleAuthticationModule.html":{}},"body":{"modules/GoogleAuthticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleid",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["googleid.ts",{"_index":726,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["googleid.ts:15",{"_index":730,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleid.ts:7",{"_index":728,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleinterface",{"_index":540,"title":{"interfaces/GoogleInterface.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["googletokendto",{"_index":771,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":799,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":542,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["googleuserprovider",{"_index":1178,"title":{},"body":{"injectables/UserService.html":{}}}],["googltokendto",{"_index":773,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["grab",{"_index":1063,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["graph",{"_index":1357,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["guard.guard.ts",{"_index":231,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:24",{"_index":237,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:31",{"_index":238,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard/access",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard/auth",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"overview.html":{}}}],["handle",{"_index":674,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["handlemessage",{"_index":1199,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage(client",{"_index":1200,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handles",{"_index":387,"title":{},"body":{"entities/ChatRoom.html":{}}}],["hash",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":677,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashing",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":274,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(inppassword",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["having",{"_index":671,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["header",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":190,"title":{},"body":{"injectables/AppService.html":{},"classes/WebsocketGateway.html":{}}}],["helpdesk",{"_index":878,"title":{},"body":{"injectables/MailProvider.html":{}}}],["host",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hot",{"_index":1294,"title":{},"body":{"index.html":{}}}],["http",{"_index":1017,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["http://localhost:3000",{"_index":885,"title":{},"body":{"injectables/MailProvider.html":{}}}],["http://localhost:3000/resource",{"_index":1016,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpcode",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/phertyameen/realtimechat.git",{"_index":1286,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":1015,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["id",{"_index":356,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id:number",{"_index":1144,"title":{},"body":{"controllers/UserController.html":{}}}],["id?:number",{"_index":764,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["identifier",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":471,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["idtoken",{"_index":804,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["implementation",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["imports",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{}}}],["in.provider",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1076,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:26",{"_index":1078,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:8",{"_index":1077,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["incorrect",{"_index":1083,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["inject",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":1002,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":187,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["injectrepository",{"_index":466,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["injectrepository(chatroom",{"_index":467,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["injectrepository(message",{"_index":951,"title":{},"body":{"injectables/MessageService.html":{}}}],["injectrepository(user",{"_index":468,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":865,"title":{},"body":{"modules/MailModule.html":{}}}],["inppassword",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["install",{"_index":1284,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1282,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1312,"title":{},"body":{"index.html":{}}}],["instance",{"_index":264,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instance.canactivate(context",{"_index":267,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instead",{"_index":1333,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1316,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":686,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":687,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":81,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["interface/activeinterface",{"_index":744,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces",{"_index":83,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{},"overview.html":{}}}],["interfaces/paginatedinterface",{"_index":1001,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["isarray",{"_index":527,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isarray()@isnumber",{"_index":522,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["ischeckedpassword",{"_index":1085,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isemail",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1072,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":526,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(chatroomtype",{"_index":533,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(chatroomtype)@isoptional",{"_index":520,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(userrole",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(userrole)@isoptional()@transform",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":706,"title":{},"body":{"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{}}}],["isint()@isnotempty",{"_index":704,"title":{},"body":{"classes/EditUserDto.html":{}}}],["isint()@type(undefined",{"_index":761,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["isnotempty",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnumber",{"_index":530,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isoptional",{"_index":529,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{}}}],["isoptional()@ispositive",{"_index":1048,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@manytomany(undefined",{"_index":1093,"title":{},"body":{"entities/User.html":{}}}],["isoptional()@onetomany(undefined",{"_index":1103,"title":{},"body":{"entities/User.html":{}}}],["isoptional,isint",{"_index":763,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["ispositive",{"_index":1051,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":518,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1055,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["issuer",{"_index":751,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["issues",{"_index":673,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["isuuid",{"_index":528,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["items",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["itemsperpage",{"_index":1037,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["itemsperpage:number",{"_index":975,"title":{},"body":{"classes/Paginated.html":{}}}],["join",{"_index":845,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":863,"title":{},"body":{"modules/MailModule.html":{}}}],["jointable",{"_index":380,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["junction",{"_index":1114,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":807,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtauthguard",{"_index":429,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfigurattion",{"_index":784,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtmodule",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["keyboard",{"_index":1337,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/PaginationProvider.html":{}}}],["last:string",{"_index":979,"title":{},"body":{"classes/Paginated.html":{}}}],["lastname",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["later",{"_index":668,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["legend",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":364,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["letter",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["library",{"_index":791,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1349,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1350,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1047,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["limit?:number",{"_index":1052,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["line",{"_index":1025,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["link",{"_index":969,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["literal",{"_index":906,"title":{},"body":{"controllers/MessageController.html":{},"classes/Paginated.html":{}}}],["load",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":1089,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":802,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":806,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":884,"title":{},"body":{"injectables/MailProvider.html":{}}}],["loop",{"_index":259,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["lowercase",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["lts",{"_index":1279,"title":{},"body":{"index.html":{}}}],["mac",{"_index":1343,"title":{},"body":{"index.html":{}}}],["mailer",{"_index":874,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailermodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":852,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":870,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailerservice:mailerservice",{"_index":875,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailmodule",{"_index":834,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprovider",{"_index":838,"title":{"injectables/MailProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1299,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":1301,"title":{},"body":{"index.html":{}}}],["makes",{"_index":712,"title":{},"body":{"classes/EditUserDto.html":{}}}],["management",{"_index":1315,"title":{},"body":{"index.html":{}}}],["many",{"_index":1112,"title":{},"body":{"entities/User.html":{}}}],["manytomany",{"_index":379,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":373,"title":{},"body":{"entities/ChatRoom.html":{}}}],["manytoone",{"_index":901,"title":{},"body":{"entities/Message.html":{}}}],["manytoone(undefined",{"_index":893,"title":{},"body":{"entities/Message.html":{}}}],["map",{"_index":692,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((type",{"_index":255,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["match",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matching",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchpasswords",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matchpasswordsconstraint",{"_index":624,"title":{"classes/MatchPasswordsConstraint.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["math.ceil(totalitems",{"_index":1033,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(100",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(150",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(225",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["merging",{"_index":1329,"title":{},"body":{"index.html":{}}}],["message",{"_index":596,"title":{"entities/Message.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"interfaces/ServerToClientEvents.html":{},"entities/User.html":{},"coverage.html":{}}}],["message.entity",{"_index":936,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["message.interface.ts",{"_index":1069,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["message.sender",{"_index":1104,"title":{},"body":{"entities/User.html":{}}}],["message.text",{"_index":966,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagecontroller",{"_index":903,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"coverage.html":{}}}],["messageid",{"_index":911,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["messagemodule",{"_index":115,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messages",{"_index":925,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["messages.controller",{"_index":937,"title":{},"body":{"modules/MessageModule.html":{}}}],["messages/messages.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["messageservice",{"_index":918,"title":{"injectables/MessageService.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["messagesmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["messagesrepo",{"_index":944,"title":{},"body":{"injectables/MessageService.html":{}}}],["meta",{"_index":970,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":263,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["miscellaneous",{"_index":1256,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1352,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":1268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":101,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"index.html":{},"overview.html":{}}}],["module,forwardref",{"_index":988,"title":{},"body":{"modules/PaginationModule.html":{}}}],["modules",{"_index":103,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":850,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":666,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":478,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["multi",{"_index":1330,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["nest",{"_index":1275,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":691,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":708,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["nestjs/platform",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":1205,"title":{},"body":{"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["network",{"_index":672,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["new",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["newmessage",{"_index":1070,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["newtext",{"_index":949,"title":{},"body":{"injectables/MessageService.html":{}}}],["newurl",{"_index":1022,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&${totalpage",{"_index":1040,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${nextpage",{"_index":1042,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${paginationquerydto.page",{"_index":1041,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${prevpage",{"_index":1044,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=1",{"_index":1039,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":680,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["next",{"_index":688,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe(map((data",{"_index":696,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next:string",{"_index":982,"title":{},"body":{"classes/Paginated.html":{}}}],["nextpage",{"_index":1034,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1278,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1246,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":257,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["notfoundexception",{"_index":464,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["notfoundexception('chat",{"_index":956,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('message",{"_index":964,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('one",{"_index":477,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception('sender",{"_index":958,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception(`chat",{"_index":488,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`user",{"_index":508,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["npm",{"_index":1281,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":1096,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":474,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["number(userid",{"_index":507,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["numeric",{"_index":470,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["oauth2client",{"_index":790,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(client_id",{"_index":797,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":782,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["object.assign(chatroom",{"_index":500,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["object.password",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["objectliteral",{"_index":1000,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["ondelete",{"_index":375,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["one",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1110,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":783,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1325,"title":{},"body":{"index.html":{}}}],["option",{"_index":866,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["out",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1359,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1228,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1313,"title":{},"body":{"index.html":{}}}],["page",{"_index":1011,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["page?:number",{"_index":1053,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginated",{"_index":967,"title":{"classes/Paginated.html":{}},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":992,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(paginationquerydto",{"_index":995,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":998,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination/provider/pagination.provider",{"_index":989,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":116,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":986,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":996,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1012,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto.page",{"_index":1013,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto:paginationquerydto",{"_index":1004,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["param",{"_index":422,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":439,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["param('userid",{"_index":443,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["parseintpipe",{"_index":425,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/UserController.html":{}}}],["part",{"_index":711,"title":{},"body":{"classes/EditUserDto.html":{}}}],["partialtype",{"_index":707,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createchatroomdto",{"_index":1091,"title":{},"body":{"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":703,"title":{},"body":{"classes/EditUserDto.html":{}}}],["pass",{"_index":859,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":569,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["passwords",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":421,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":419,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["patch(':messageid",{"_index":916,"title":{},"body":{"controllers/MessageController.html":{}}}],["path",{"_index":846,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/ServerToClientEvents.html":{},"classes/WebsocketGateway.html":{}}}],["per",{"_index":1010,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pg",{"_index":1248,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":693,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["please",{"_index":667,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["point",{"_index":1303,"title":{},"body":{"index.html":{}}}],["poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["port",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{}}}],["post('/refreshtoken",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@auth(authtypes.none)@httpcode(httpstatus.ok)@useinterceptors(classserializerinterceptor",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/users/:userid",{"_index":402,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["postgres",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["prerequisites",{"_index":1277,"title":{},"body":{"index.html":{}}}],["present",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["previous",{"_index":1043,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["previous:string",{"_index":981,"title":{},"body":{"classes/Paginated.html":{}}}],["prevpage",{"_index":1035,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":361,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":665,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["project",{"_index":1273,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":754,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":266,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider/create",{"_index":1154,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/find",{"_index":1156,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/googleuserprovider",{"_index":1158,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/message.service",{"_index":919,"title":{},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{}}}],["provider/user.service",{"_index":1130,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/chatrooms/chatrooms.service",{"_index":349,"title":{},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{}}}],["providers/generate",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":774,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["providers/hashing",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.provider",{"_index":851,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/refresh",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pull",{"_index":1326,"title":{},"body":{"index.html":{}}}],["push",{"_index":1320,"title":{},"body":{"index.html":{}}}],["query",{"_index":1129,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":1135,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1137,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":999,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1046,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1049,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:14",{"_index":1050,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realtimechat",{"_index":882,"title":{},"body":{"injectables/MailProvider.html":{},"index.html":{}}}],["realtimechat.com",{"_index":879,"title":{},"body":{"injectables/MailProvider.html":{}}}],["record",{"_index":243,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["reflect",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":236,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["refresh",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtoken",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":198,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1062,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokenprovider",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1058,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1060,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":277,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["relations",{"_index":486,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["relationship",{"_index":388,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["reload",{"_index":1295,"title":{},"body":{"index.html":{}}}],["remove",{"_index":397,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["remove(@param('id",{"_index":441,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["remove(id",{"_index":411,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["removeuser",{"_index":398,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuser(id",{"_index":414,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuserfromchatroom",{"_index":448,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removeuserfromchatroom(chatroomid",{"_index":461,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["reply",{"_index":861,"title":{},"body":{"modules/MailModule.html":{}}}],["repo",{"_index":745,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["repository",{"_index":450,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1031,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1006,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository:repository",{"_index":1005,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request:request",{"_index":1003,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request[request_user_key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":654,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception('could",{"_index":722,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["requesttimeoutexception(error",{"_index":1088,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["requesturl",{"_index":1014,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["required",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["reset",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response.interceptor.ts",{"_index":685,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":690,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":684,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":501,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{}}}],["result.affected",{"_index":503,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["results",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["review",{"_index":1327,"title":{},"body":{"index.html":{}}}],["room",{"_index":480,"title":{},"body":{"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["room.dto",{"_index":427,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{}}}],["room.dto.ts",{"_index":516,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:11",{"_index":521,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:17",{"_index":525,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:7",{"_index":519,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["rooms",{"_index":392,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["root",{"_index":1305,"title":{},"body":{"index.html":{}}}],["rules",{"_index":1319,"title":{},"body":{"index.html":{}}}],["run",{"_index":1293,"title":{},"body":{"index.html":{}}}],["running",{"_index":1288,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["saltrounds",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["save",{"_index":952,"title":{},"body":{"injectables/MessageService.html":{}}}],["save/log",{"_index":663,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["secret",{"_index":747,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":856,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":816,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{}}}],["sender",{"_index":890,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{}}}],["senderid",{"_index":921,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["sent",{"_index":801,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["server",{"_index":1292,"title":{},"body":{"index.html":{}}}],["servertoclientevents",{"_index":1066,"title":{"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["service",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailProvider.html":{},"index.html":{}}}],["set",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["setmetadata(auth_type_key",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shift",{"_index":1340,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":1338,"title":{},"body":{"index.html":{}}}],["show",{"_index":1009,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sign",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":202,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":278,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":734,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":738,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signup",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["skip",{"_index":1007,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slash",{"_index":1335,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{}}}],["socket.io",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["socket.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["socket.module.ts",{"_index":1197,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["socket/interfaces/websockets",{"_index":1068,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["socket/web",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{}}}],["socket/websocketevents/websocket.gateway",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["socket/websocketevents/websocket.gateway.ts",{"_index":1198,"title":{},"body":{"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket/websocketevents/websocket.gateway.ts:6",{"_index":1202,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["special",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["src",{"_index":1298,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constant.ts",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtypes.enum.ts",{"_index":1258,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../chatroomtype.ts",{"_index":1259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../userrole.enum.ts",{"_index":1260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":188,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":189,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1159,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/authconfig/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constant",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1216,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refreshtokendto.ts",{"_index":1054,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refreshtokendto.ts:6",{"_index":1056,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dtos/userdto.ts",{"_index":1071,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/userdto.ts:10",{"_index":1074,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/userdto.ts:6",{"_index":1073,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtypes.enum",{"_index":240,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["src/auth/enums/authtypes.enum.ts",{"_index":1261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guard/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth",{"_index":230,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["src/auth/interface/activeinterface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:32",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.ts",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.ts:16",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.ts:8",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":731,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing",{"_index":657,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.ts",{"_index":829,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.ts:6",{"_index":831,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.ts:9",{"_index":830,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1057,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1075,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":826,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":765,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["src/auth/social/interfaces/user.interface",{"_index":1179,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/social/interfaces/user.interface.ts",{"_index":825,"title":{},"body":{"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":780,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts",{"_index":390,"title":{},"body":{"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts:24",{"_index":406,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:29",{"_index":407,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:34",{"_index":410,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:39",{"_index":420,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:47",{"_index":413,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:52",{"_index":403,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:60",{"_index":416,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.entity",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"modules/MessageModule.html":{}}}],["src/chatrooms/chatroom.entity.ts",{"_index":354,"title":{},"body":{"entities/ChatRoom.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.entity.ts:11",{"_index":366,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:18",{"_index":372,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:23",{"_index":377,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:26",{"_index":360,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:8",{"_index":362,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatrooms.module.ts",{"_index":344,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chatrooms/dtos/create",{"_index":515,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/dtos/update",{"_index":1090,"title":{},"body":{"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/enums/chatroomtype.ts",{"_index":1264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts",{"_index":446,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:108",{"_index":462,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:12",{"_index":452,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:20",{"_index":457,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:40",{"_index":458,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:46",{"_index":459,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:59",{"_index":463,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:82",{"_index":460,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:90",{"_index":455,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/common/interceptor/data",{"_index":683,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination.module.ts",{"_index":987,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts",{"_index":968,"title":{},"body":{"classes/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:11",{"_index":972,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:4",{"_index":971,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:5",{"_index":973,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/pagination",{"_index":1045,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts",{"_index":991,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:10",{"_index":994,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:18",{"_index":997,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module",{"_index":1157,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":839,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.provider.ts",{"_index":867,"title":{},"body":{"injectables/MailProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mail.provider.ts:15",{"_index":873,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/mail/providers/mail.provider.ts:8",{"_index":871,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/main.ts",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/message.entity",{"_index":1111,"title":{},"body":{"entities/User.html":{}}}],["src/messages/message.entity.ts",{"_index":889,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/messages/message.entity.ts:14",{"_index":896,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:17",{"_index":895,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:20",{"_index":898,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:23",{"_index":899,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:26",{"_index":900,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/messages.controller.ts",{"_index":904,"title":{},"body":{"controllers/MessageController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:10",{"_index":907,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:17",{"_index":914,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:23",{"_index":910,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:29",{"_index":917,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.module.ts",{"_index":935,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/messages/provider/message.service.ts",{"_index":939,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/messages/provider/message.service.ts:17",{"_index":946,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:36",{"_index":948,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:41",{"_index":947,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:49",{"_index":950,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:9",{"_index":943,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/users/dtos/create",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts",{"_index":760,"title":{},"body":{"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts:8",{"_index":762,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["src/users/dtos/patch",{"_index":701,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/provider/create",{"_index":648,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/find",{"_index":715,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts",{"_index":535,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts:17",{"_index":541,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/googleuserprovider.ts:8",{"_index":538,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/user.service",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/provider/user.service.ts",{"_index":1161,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/provider/user.service.ts:15",{"_index":1165,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:32",{"_index":1172,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:40",{"_index":1167,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:44",{"_index":1175,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:48",{"_index":1177,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:52",{"_index":1168,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:58",{"_index":1170,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:71",{"_index":1173,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:75",{"_index":1166,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.controller.ts",{"_index":1116,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:13",{"_index":1127,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:23",{"_index":1120,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:29",{"_index":1122,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:36",{"_index":1124,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.entitly",{"_index":382,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{}}}],["src/users/user.entitly.ts",{"_index":1092,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entitly.ts:12",{"_index":1101,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:15",{"_index":1098,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:18",{"_index":1102,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:21",{"_index":1097,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:25",{"_index":1107,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:28",{"_index":1108,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:31",{"_index":1100,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:37",{"_index":1095,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:42",{"_index":1105,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.module",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/user.module.ts",{"_index":1152,"title":{},"body":{"modules/UserModule.html":{}}}],["src/web",{"_index":1067,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["start",{"_index":1290,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1296,"title":{},"body":{"index.html":{}}}],["started",{"_index":1272,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":233,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["step",{"_index":814,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["strict",{"_index":847,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1297,"title":{},"body":{"index.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":880,"title":{},"body":{"injectables/MailProvider.html":{}}}],["subscribemessage",{"_index":1204,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage('message",{"_index":1201,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["support",{"_index":1354,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1355,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1332,"title":{},"body":{"index.html":{}}}],["t",{"_index":740,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1115,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1008,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["tap",{"_index":694,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":843,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{}}}],["terminal",{"_index":1029,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1347,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1348,"title":{},"body":{"index.html":{}}}],["text",{"_index":891,"title":{},"body":{"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["this.accesstokenguard",{"_index":244,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.appservice.gethello",{"_index":100,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":254,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.chatroomrepository.create",{"_index":481,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.delete(number(id",{"_index":502,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.find",{"_index":485,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.findone",{"_index":487,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.save(chatroom",{"_index":484,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomservice.addusertochatroom(id",{"_index":444,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.create(createchatroomdto",{"_index":435,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findall",{"_index":436,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findone(id",{"_index":438,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.remove(id",{"_index":442,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.removeuserfromchatroom(id",{"_index":445,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.update(id",{"_index":440,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomsrepo.findone",{"_index":955,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1196,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createusers(createuserdto",{"_index":1181,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extractrequestfromheader(request",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findone(chatroomid",{"_index":505,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findone(id",{"_index":489,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findonebyemail.findonebyemail(email",{"_index":1182,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1195,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1065,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":813,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":811,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googltokendto",{"_index":779,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords(signindto.password",{"_index":1086,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":678,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.audience",{"_index":750,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":752,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":748,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.ttl",{"_index":757,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfigurattion.googleclient_id",{"_index":793,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfigurattion.googleclient_secret",{"_index":795,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":746,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":877,"title":{},"body":{"injectables/MailProvider.html":{}}}],["this.messageservice.create(body.chatroomid",{"_index":922,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.delete(messageid",{"_index":929,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findall(chatroomid",{"_index":927,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.update(messageid",{"_index":931,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messagesrepo.create",{"_index":960,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.delete(messageid",{"_index":963,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.find",{"_index":962,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.findone",{"_index":965,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.save(message",{"_index":961,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.oauthclient",{"_index":796,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":803,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":246,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1021,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1020,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.requestprotocol",{"_index":1018,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":756,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository.create",{"_index":681,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":545,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.delete(id",{"_index":1183,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1180,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findbyids",{"_index":472,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findone",{"_index":506,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":721,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(edit",{"_index":1194,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":682,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":546,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userservice.creategoogleuser",{"_index":812,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createusers(createuserdto",{"_index":1142,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1145,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituser(edituserdto",{"_index":1147,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":1140,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":810,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1064,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.getonebyemail(signindto.email",{"_index":1081,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersrepo.findone",{"_index":957,"title":{},"body":{"injectables/MessageService.html":{}}}],["through",{"_index":260,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["throw",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["timestamp",{"_index":892,"title":{},"body":{"entities/Message.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto",{"_index":776,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["token.dto.ts",{"_index":827,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":828,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:24",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:47",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["tokens.provider",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":732,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:10",{"_index":735,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":741,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:34",{"_index":1061,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:45",{"_index":737,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":976,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":1032,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpage:number",{"_index":978,"title":{},"body":{"classes/Paginated.html":{}}}],["transform",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["transformation",{"_index":1318,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":532,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transport",{"_index":854,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":524,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":381,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessageModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([chatroom",{"_index":351,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":938,"title":{},"body":{"modules/MessageModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1160,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":251,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["types/bcrypt",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":1028,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["unable",{"_index":664,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorised",{"_index":817,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('email",{"_index":1082,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('failed",{"_index":820,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":724,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["unauthorizedexception(error",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["undefined",{"_index":371,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["under",{"_index":1351,"title":{},"body":{"index.html":{}}}],["unique",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["unknown",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1366,"title":{},"body":{"properties.html":{}}}],["update",{"_index":399,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["update(@param('messageid",{"_index":930,"title":{},"body":{"controllers/MessageController.html":{}}}],["update(id",{"_index":417,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["update(messageid",{"_index":915,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["updatechatroomdto",{"_index":418,"title":{"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["updatechatroomdto.userids",{"_index":490,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.length",{"_index":492,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.map(id",{"_index":491,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["uppercase",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["uppercase'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["uproper",{"_index":1336,"title":{},"body":{"index.html":{}}}],["url(this.request.url",{"_index":1023,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["useclass",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory:async(config:configservice",{"_index":853,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":1344,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":424,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useguards(jwtauthguard",{"_index":433,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useinterceptors",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":315,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.chatrooms",{"_index":374,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.controller",{"_index":1153,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":656,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["user.dto.ts:108",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:11",{"_index":705,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:121",{"_index":562,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":888,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:32",{"_index":887,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:46",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:56",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:82",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":570,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:98",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":758,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["user.entitly",{"_index":655,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.firstname",{"_index":883,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user.id",{"_index":513,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["user.messages",{"_index":897,"title":{},"body":{"entities/Message.html":{}}}],["user.password",{"_index":1087,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1155,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":649,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:15",{"_index":651,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:28",{"_index":653,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user:user):promise",{"_index":876,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user?.[field",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":124,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":401,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{}}}],["userids",{"_index":517,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["usermodule",{"_index":117,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":451,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["users",{"_index":357,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["users.length",{"_index":475,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users/user.controller",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["users/user.entitly",{"_index":350,"title":{},"body":{"modules/ChatModule.html":{},"entities/Message.html":{},"modules/MessageModule.html":{}}}],["users/user.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":307,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":1134,"title":{},"body":{"controllers/UserController.html":{}}}],["usersrepo",{"_index":942,"title":{},"body":{"injectables/MessageService.html":{}}}],["using",{"_index":709,"title":{},"body":{"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["utilities",{"_index":1317,"title":{},"body":{"index.html":{}}}],["validate",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/RefreshTokensProvider.html":{}}}],["validate(confirmpassword",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(matchpasswordsconstraint",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatenested",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validation",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["validationarguments",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validator",{"_index":531,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["value",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1368,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":800,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["version",{"_index":1364,"title":{},"body":{"properties.html":{}}}],["void",{"_index":789,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["web",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["websocketgateway",{"_index":158,"title":{"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["websocketmodule",{"_index":118,"title":{"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["welcome",{"_index":881,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail",{"_index":868,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail(user",{"_index":872,"title":{},"body":{"injectables/MailProvider.html":{}}}],["windows/linux",{"_index":1342,"title":{},"body":{"index.html":{}}}],["world",{"_index":1206,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["yes",{"_index":742,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["z0",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[0",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[a",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["za",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["zoom",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Inject,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { ConfigType } from '@nestjs/config';\n  import { JwtService } from '@nestjs/jwt';\n  import { Request } from 'express';\n  import { Observable } from 'rxjs';\n  import jwtConfig from 'src/auth/authConfig/jwt.config';\n  import { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AccessTokenGuard implements CanActivate {\n    constructor(\n      private readonly jwtService: JwtService,\n  \n      @Inject(jwtConfig.KEY)\n      private readonly jwtConfiguration: ConfigType,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      //Extract the request from the execution context\n      const request = context.switchToHttp().getRequest();\n      // Extract the token from the header\n      const token = this.extractRequestFromHeader(request);\n      // Validate the token\n      if (!token) {\n        throw new UnauthorizedException();\n      }\n      try {\n        const payload = await this.jwtService.verifyAsync(\n          token,\n          this.jwtConfiguration,\n        );\n  \n        request[REQUEST_USER_KEY] = payload;\n        console.log(payload);\n      } catch (error) {\n        throw new UnauthorizedException(error);\n      }\n      return true;\n    }\n  \n    private extractRequestFromHeader(request: Request) {\n      const [_, token] = request.headers.authorization?.split(' ') ?? [];\n      return token;\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/activeInterface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    sub: number,\n    email?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WebSocketModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './users/user.module';\n// import { MailerModule } from '@nestjs-modules/mailer';\nimport { PaginationModule } from './common/pagination.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './users/user.controller';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuardGuard } from './auth/guard/auth-guard/auth-guard.guard';\nimport { AccessTokenGuard } from './auth/guard/access-token/access-token.guard';\n// import { MessagesModule } from './messages/messages.module';\nimport { ChatModule } from './chatrooms/chatrooms.module';\nimport { MessageModule } from './messages/messages.module';\nimport { WebSocketModule } from './web-socket/web-socket.module';\nimport { WebsocketGateway } from './web-socket/websocketEvents/websocket.gateway';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        blog: configService.get('database.blog'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoload'),\n      }),\n    }),\n    AuthModule,\n    UserModule,\n    PaginationModule,\n    ChatModule,\n    MessageModule,\n    // MessagesModule,\n    ChatModule,\n    WebSocketModule\n  ],\n  controllers: [AppController, AuthController, UserController],\n  providers: [\n    AppService,\n    WebsocketGateway,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AuthGuardGuard,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: DataResponseInterceptor\n    // },\n    // AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                RefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        RefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    RefreshToken(refreshToken: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Auth(authTypes.None)@HttpCode(HttpStatus.OK)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, HttpCode, HttpStatus, Post, UseInterceptors } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/userDto';\nimport { authTypes } from './enums/authTypes.enum';\nimport { RefreshTokenDto } from './dtos/refreshTokenDto';\nimport { Auth } from './decorators/auth.decorator';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        // injecting auth service\n        private readonly authservice: AuthService,\n    ) {}\n    @Post('/signIn')\n    @Auth(authTypes.None)\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(ClassSerializerInterceptor)\n    public async SignIn(@Body() signInDto: SignInDto) {\n       return await this.authservice.SignIn(signInDto)\n    }\n    @Post('/refreshToken')\n    public RefreshToken(@Body() refreshToken: RefreshTokenDto) {\n        return this.authservice.refreshToken(refreshToken)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardGuard.html":{"url":"guards/AuthGuardGuard.html","title":"guard - AuthGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { Reflector } from '@nestjs/core';\n  import { Observable } from 'rxjs';\n  import { AccessTokenGuard } from '../access-token/access-token.guard';\n  import { authTypes } from 'src/auth/enums/authTypes.enum';\n  import { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AuthGuardGuard implements CanActivate {\n  \n    private static readonly defaultAuthType = authTypes.Bearer;\n  \n    private readonly authTypeGuardMap: Record = {\n      [authTypes.Bearer]: this.accessTokenGuard,\n      [authTypes.None]: { canActivate: () => true },\n    };\n  \n    constructor(\n      private readonly reflector: Reflector,\n      private readonly accessTokenGuard: AccessTokenGuard,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      // get authTypes from the reflector\n      const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ])  ?? [AuthGuardGuard.defaultAuthType];\n      // console.log('show all types', authTypes);\n  \n      // get array of guards\n      const guards = authTypes.map((type) => this.authTypeGuardMap[type])\n      // const guards = authTypes\n      //   .map((type) => {\n      //     const guard = this.authTypeGuardMap[type];\n      //     return Array.isArray(guard) ? guard : [guard]; // Normalize to an array\n      //   })\n      //   .flat();\n  \n      // loop through the guard and fire the can activate method\n      for (const instance of guards) {\n        // console.log(\"instance of\", instance)\n        const canActivate = await Promise.resolve(\n          instance.canActivate(context),\n        ).catch((err) => {\n          error: err;\n        });\n        // console.log(canActivate)\n  \n        if (canActivate) {\n          return true;\n        }\n      }\n      throw new UnauthorizedException();\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt';\nimport { HashingProvider } from './providers/hashing';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './guard/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { UserModule } from 'src/users/user.module';\nimport { AuthController } from './auth.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // Use the abstract class as a token\n      useClass: BcryptProvider, // Bind it to the concrete implementation\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { UserService } from 'src/users/provider/user.service';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        /* \n         * injecting user service\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n         * inject signInProvider\n         */\n        private readonly signInProvider: SignInProvider,\n\n        /* \n         *inject refreshTokenProvider\n         */\n         private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n    public async SignIn(signInDto: SignInDto) {\n        return await this.signInProvider.SignIn(signInDto)\n    }\n\n    public refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }    \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    // hash\n    public async hashPassword(inpPassword: string | Buffer): Promise {\n        const saltRounds = 10\n        const salt = await bcrypt.genSalt(saltRounds)\n        \n        return await bcrypt.hash(inpPassword, salt) \n    }\n\n    // compare\n    public async comparePasswords(password: string, encryPassword: string): Promise {\n        return await bcrypt.compare(password, encryPassword)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_exports\n\n\n\n\nChatRoomService \n\nChatRoomService \n\n\n\nChatModule\n\nChatModule\n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chatrooms/chatrooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatRoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatRoom } from './chatroom.entity'; \nimport { ChatRoomController } from './chatroom.controller';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { User } from '../users/user.entitly'; \n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatRoom, User]),\n  ],\n  controllers: [ChatRoomController],\n  providers: [ChatRoomService],\n  exports: [ChatRoomService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatRoom.html":{"url":"entities/ChatRoom.html","title":"entity - ChatRoom","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ChatRoomType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chatRooms, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, CreateDateColumn, JoinTable } from 'typeorm';\nimport { User } from 'src/users/user.entitly'; \nimport { ChatRoomType } from './enums/chatroomType';\n\n@Entity('chat_rooms')\nexport class ChatRoom {\n  @PrimaryGeneratedColumn() \n  id: number;\n\n  @Column('varchar', { length: 100 })\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: ChatRoomType,\n    default: ChatRoomType.GROUP\n  })\n  type: ChatRoomType;\n\n  @ManyToMany(() => User, (user) => user.chatRooms, {\n    onDelete: 'CASCADE' // Automatically handles the relationship cleanup\n  })\n  users: User[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatRoomController.html":{"url":"controllers/ChatRoomController.html","title":"controller - ChatRoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatRoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat-rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/chatrooms/chatroom.controller.ts\nimport { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto) {\n    return this.chatRoomService.create(createChatRoomDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.remove(id);\n  }\n\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatRoomService.html":{"url":"injectables/ChatRoomService.html","title":"injectable - ChatRoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatRoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/providers/chatrooms/chatrooms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserToChatRoom\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeUserFromChatRoom\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatRoomRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatRoomRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addUserToChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserToChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserFromChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserFromChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ChatRoom } from '../../chatroom.entity';\nimport { CreateChatRoomDto } from '../../DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from '../../DTOs/update-chat-room.dto';\nimport { User } from 'src/users/user.entitly';\nimport { ChatRoomType } from '../../enums/chatroomType';\n\n@Injectable()\nexport class ChatRoomService {\n  constructor(\n    @InjectRepository(ChatRoom)\n    private chatRoomRepository: Repository,\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  async create(createChatRoomDto: CreateChatRoomDto): Promise {\n    // Find users by their numeric IDs\n    const users = await this.userRepository.findByIds(\n      createChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== createChatRoomDto.userIds.length) {\n      throw new NotFoundException('One or more users not found');\n    }\n\n    // Create new chat room\n    const chatRoom = this.chatRoomRepository.create({\n      name: createChatRoomDto.name,\n      type: createChatRoomDto.type || ChatRoomType.GROUP,\n      users: users\n    });\n\n    return await this.chatRoomRepository.save(chatRoom);\n  }\n\n  async findAll(): Promise {\n    return this.chatRoomRepository.find({\n      relations: ['users'],\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const chatRoom = await this.chatRoomRepository.findOne({\n      where: { id: Number(id) },\n      relations: ['users'],\n    });\n\n    if (!chatRoom) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n\n    return chatRoom;\n  }\n\n  async update(id: number, updateChatRoomDto: UpdateChatRoomDto): Promise {\n    const chatRoom = await this.findOne(id);\n    \n    if (updateChatRoomDto.userIds) {\n      const users = await this.userRepository.findByIds(\n        updateChatRoomDto.userIds.map(id => Number(id))\n      );\n      \n      if (users.length !== updateChatRoomDto.userIds.length) {\n        throw new BadRequestException('One or more users not found');\n      }\n\n      if (chatRoom.type === ChatRoomType.PRIVATE && users.length !== 2) {\n        throw new BadRequestException('Private chat rooms must have exactly 2 users');\n      }\n\n      chatRoom.users = users;\n    }\n\n    Object.assign(chatRoom, updateChatRoomDto);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async remove(id: number): Promise {\n    const result = await this.chatRoomRepository.delete(Number(id));\n    \n    if (result.affected === 0) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n  }\n\n  async addUserToChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n    const user = await this.userRepository.findOne({ \n      where: { id: Number(userId) }\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found`);\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot add users to private chat rooms');\n    }\n\n    chatRoom.users.push(user);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async removeUserFromChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot remove users from private chat rooms');\n    }\n\n    chatRoom.users = chatRoom.users.filter(user => user.id !== Number(userId));\n    return this.chatRoomRepository.save(chatRoom);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatRoomDto.html":{"url":"classes/CreateChatRoomDto.html","title":"class - CreateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/create-chat-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChatRoomType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsArray, IsUUID, IsOptional, IsNumber } from 'class-validator';\nimport { ChatRoomType } from '../enums/chatroomType'; \nimport { Type } from 'class-transformer';\n\nexport class CreateChatRoomDto {\n  @IsString()\n  name: string;\n\n  @IsEnum(ChatRoomType)\n  @IsOptional()\n  type?: ChatRoomType;\n\n\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number)\n  userIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/googleUserProvider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/googleUserProvider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/googleUserProvider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { GoogleInterface } from '../../auth/social/interfaces/user.interface';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /*\n     * inject userRepository\n     */\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    try {\n      const user = this.userRepository.create(googleUser);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase and should be same as the password'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com', description: 'email field'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'first name field'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]', description: 'this is autogenerated from google when you signup with google'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'last name field'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'password should containg number, alphabets and uppercase',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'password should containg number, alphabets and uppercase and should be same as the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) // Set default if undefined\n  userRole?: userRole;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'this is autogenerated from google when you signup with google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/create-user.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/create-user.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /*\n     * Inject userRepository\n     */\n    @InjectRepository(User) private userRepository: Repository,\n\n    /*\n     * Inject hashingProvider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n  public async createUsers(createUserDto: CreateUserDto): Promise {\n    // check if user already exits\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // you might save/log your  error\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n    // Handle Error\n    if (existingUser) {\n      throw new BadRequestException('User already exist');\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      createUserDto.password,\n    );\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    // Create the user\n    try {\n      this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/data-response/data-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, \n  ExecutionContext, \n  Injectable, \n  NestInterceptor \n} from '@nestjs/common';\nimport { map, Observable, pipe, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('before')\n    return next.handle().pipe(map((data) => ({\n      apiversrion:'0.0.1',\n      result: data.length,\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/patch-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsInt, IsNotEmpty, IsString } from \"class-validator\";\nimport { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n \n// using the patch to edit part of the data, the partialtype makes everything optional\nexport class EditUserDto extends PartialType(CreateUserDto) {\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmail.html":{"url":"injectables/FindOneByEmail.html","title":"injectable - FindOneByEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-email.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-email.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-email.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n\n@Injectable()\nexport class FindOneByEmail {\n    constructor(@InjectRepository(User) private userRepository: Repository) {}\n\n    public async findOneByEmail(email: string): Promise {\n        let user: User | undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({ email });\n        } catch (error) {\n            throw new RequestTimeoutException('Could not fetch user', {\n                description: 'Error connecting to database',\n            });\n        }\n\n        if (!user) {\n            throw new UnauthorizedException('User does not exist');\n        }\n\n        return user; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-googleId.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-googleId.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-googleId.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /*\n     *inject userRepository\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userRepository.findOneBy({ googleId })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interface/activeInterface';\nimport { UserService } from 'src/users/provider/user.service';\nimport { User } from 'src/users/user.entitly';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     *injecting jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * injecting jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      } as ActiveUserData,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n    // generate access token\n    this.signToken(user.id, this.jwtConfiguration.ttl, {email: user.email}),\n\n    // generate refresh token\n    this.signToken(user.id, this.jwtConfiguration.ttl)\n    ])\n    \n    return {'accessToken': accessToken, 'refreshToken': refreshToken, user}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetuserParamDto.html":{"url":"classes/GetuserParamDto.html","title":"class - GetuserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetuserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/getUserparamdto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/getUserparamdto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional,IsInt } from \"class-validator\";\nimport { Type } from 'class-transformer';\n\nexport class GetuserParamDto {\n   \n    @IsInt()\n    @Type (() => Number )\n    id?:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googlTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googlTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { authTypes } from '../enums/authTypes.enum';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Auth(authTypes.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n    constructor(\n        /* \n         * inject googleAuthenticationService \n         */\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) {}\n\n    @Post()\n    public authenticate(@Body() googlTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googlTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtConfigurattion: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfigurattion\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oAuthClient: OAuth2Client;\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * inject jwtconfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigurattion: ConfigType,\n    /**\n     * inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const client_id = this.jwtConfigurattion.googleClient_id;\n    const client_secret = this.jwtConfigurattion.googleClient_secret;\n\n    this.oAuthClient = new OAuth2Client(client_id, client_secret);\n  }\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      console.log(\"Received Token:\", googleTokenDto.token);\n\n      // verify the google token sent by user\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      console.log(\"Google Token Payload:\", loginTicket.getPayload());\n\n      // extract the payload from google jwt token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the database using googleId\n      const user = await this.userService.findOneByGoogleId(googleId);\n\n      // if user exist, generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      // else generate the user and create the token\n      const newUser = await this.userService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      // if any of the step fails, send an unauthorised exception\n      console.error(\"Google Auth Error:\", error);\n      throw new UnauthorizedException('failed to authenticate with google');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthticationModule.html":{"url":"modules/GoogleAuthticationModule.html","title":"module - GoogleAuthticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_GoogleAuthticationModule_providers\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/social/google-authtication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Module({\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleInterface.html":{"url":"interfaces/GoogleInterface.html","title":"interface - GoogleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleInterface {\n    email: string\n    firstName: string\n    lastName: string\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    // hashing during signUp\n    abstract hashPassword(inpPassword: string | Buffer): Promise\n\n    // comparison during signIn\n    abstract comparePasswords(password: string, encryPassword: string): Promise\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { config } from 'process';\nimport { from } from 'form-data';\nimport { Template } from 'ejs';\nimport { join } from 'path';\nimport { strict } from 'assert';\nimport {EjsAdapter} from '@nestjs-modules/mailer/dist/adapters/ejs.adapter'\nimport { MailProvider } from './providers/mail.provider';\n\n\n@Global()\n@Module({\n    imports: [MailerModule.forRootAsync({\n        inject: [ConfigService],\n        useFactory:async(config:ConfigService) => ({\n            transport: {\n                host: config.get('MAIL_HOST'),\n                secure: false,\n                port: config.get('MAIL_PORT'),\n                auth: {\n                    user: config.get('SMTP_USERNAME'),\n                    pass: config.get('SMTP_PASSWORD'),\n                },\n                default: {\n                    from: `no-reply-`\n                },\n                template: {\n                    dir: join(__dirname, 'template'),\n                    adapter: new EjsAdapter({\n                    inlineCssEnabled: true,\n                    }),\n                    Option : {\n                        strict: false,\n                    }\n\n                }\n            }\n        })\n    })],\n    providers: [MailProvider],\n    exports: [MailProvider]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailProvider.html":{"url":"injectables/MailProvider.html","title":"injectable - MailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                WelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        WelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    WelcomeEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { name } from 'ejs';\nimport { User } from 'src/users/user.entitly';\n\n\n@Injectable()\nexport class MailProvider {\n    constructor (\n        //inject the mailer Service\n        private readonly mailerService:MailerService,\n    ) {}\n\n\n    public async WelcomeEmail (user:User):Promise {\n        await this.mailerService.sendMail({\n         to: user.email,\n         from: `helpdesk from realTimeChat.com`,\n         subject: `welcome to realTimeChat`,\n         template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000/',\n        }\n        })\n\n\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'password should containg number, alphabets and uppercase',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'password should containg number, alphabets and uppercase and should be same as the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) // Set default if undefined\n  userRole?: userRole;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'this is autogenerated from google when you signup with google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chatRoom\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                sender\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, chatRoom => chatRoom.id, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Entity,\n    PrimaryGeneratedColumn,\n    ManyToOne,\n    Column,\n    CreateDateColumn,\n  } from 'typeorm';\n  import { ChatRoom } from '../chatrooms/chatroom.entity'\n  import { User } from '../users/user.entitly';\n  \n  @Entity()\n  export class Message {\n    @PrimaryGeneratedColumn()\n    id: string;\n  \n    @ManyToOne(() => ChatRoom, (chatRoom) => chatRoom.id, { onDelete: 'CASCADE' })\n    chatRoom: ChatRoom;\n  \n    @ManyToOne(() => User, (user) => user.messages, { onDelete: 'CASCADE' })\n    sender: User;\n  \n    @Column({ type: 'text' })\n    text: string;\n  \n    @CreateDateColumn()\n    timestamp: Date;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':chatRoomId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Delete, Patch, Body, Param } from '@nestjs/common';\nimport { MessageService } from './provider/message.service';\n\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) {}\n\n  //  POST: Send a new message\n  @Post()\n  async create(@Body() body: { chatRoomId: string; senderId: string; text: string }) {\n    return await this.messageService.create(body.chatRoomId, body.senderId, body.text);\n    \n  }\n\n  //  GET: Get all messages in a chat room\n  @Get(':chatRoomId')\n  async findAll(@Param('chatRoomId') chatRoomId: string) {\n    return await this.messageService.findAll(chatRoomId);\n  }\n\n  //  DELETE: Delete a message by ID\n  @Delete(':messageId')\n  async delete(@Param('messageId') messageId: string) {\n    return await this.messageService.delete(messageId);\n  }\n\n  //  PATCH: Update a message text by ID\n  @Patch(':messageId')\n  async update(@Param('messageId') messageId: string, @Body() body: { text: string }) {\n    return await this.messageService.update(messageId, body.text);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Message } from './message.entity';\nimport { MessageService } from './provider/message.service';\nimport { MessageController } from './messages.controller';\nimport { User } from '../users/user.entitly';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message, User, ChatRoom])],\n  providers: [MessageService],\n  controllers: [MessageController],\n  exports: [MessageService],\n})\nexport class MessageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/provider/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepo: Repository, chatRoomsRepo: Repository, usersRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/messages/provider/message.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatRoomsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(chatRoomId: string, senderId: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                senderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, newText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Message } from '../message.entity';\nimport { ChatRoom } from '../../chatrooms/chatroom.entity';\nimport { User } from 'src/users/user.entitly';\n\n@Injectable()\nexport class MessageService {\n  constructor(\n    @InjectRepository(Message) private messagesRepo: Repository,\n    @InjectRepository(ChatRoom) private chatRoomsRepo: Repository,\n    @InjectRepository(User) private usersRepo: Repository,\n  ) {}\n\n  //  Create a new message and SAVE it in DB\n  async create(chatRoomId: string, senderId: string, text: string): Promise {\n    // 1️ Find the chat room\n    const chatRoom = await this.chatRoomsRepo.findOne({ where: { id: chatRoomId as any } });\n    if (!chatRoom) {\n      throw new NotFoundException('Chat room not found');\n    }\n\n    // 2️ Find the sender\n    const sender = await this.usersRepo.findOne({ where: { id: senderId as any } });\n    if (!sender) {\n      throw new NotFoundException('Sender not found');\n    }\n\n    // 3️ Create and save the message in the DB\n    const message = this.messagesRepo.create({ chatRoom, sender, text });\n    return await this.messagesRepo.save(message);\n  }\n\n  //  Find all messages in a chat room\n  async findAll(chatRoomId: string): Promise {\n    return await this.messagesRepo.find({ where: { chatRoom: { id: chatRoomId as any} }, relations: ['sender'] });\n  }\n\n  //  Delete a message\n  async delete(messageId: string): Promise {\n    const result = await this.messagesRepo.delete(messageId);\n    if (result.affected === 0) {\n      throw new NotFoundException('Message not found');\n    }\n  }\n\n  //  Update a message text\n  async update(messageId: string, newText: string): Promise {\n    const message = await this.messagesRepo.findOne({ where: { id: messageId } });\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    message.text = newText;\n    return await this.messagesRepo.save(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paginated.html":{"url":"classes/Paginated.html","title":"class - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Interfaces/paginatedInterface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                link\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Paginated   {\n    data:T[];\n    meta: {\n        itemsPerPage:number,\n        totalItems: number,\n        currentPage:number,\n        totalPage:number,\n    };\n    link: \n    {\n        first: string,\n        last:string,\n        current: string,\n        previous:string,\n        next:string,\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module,forwardRef } from '@nestjs/common';\nimport { PaginationProvider } from './pagination/Provider/pagination.provider';\n\n\n\n\n@Module({\n  imports:[],\n  providers: [PaginationProvider],\n  controllers: [],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Provider/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/Provider/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(paginationQueryDto: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/Provider/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { PaginationQueryDto } from \"../pagination-query.dto\";\nimport { ObjectLiteral, Repository } from \"typeorm\";\nimport { Request } from \"express\";\nimport { REQUEST } from \"@nestjs/core\"\nimport { Paginated } from \"../Interfaces/paginatedInterface\";\n\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor (\n        @Inject(REQUEST)\n        private readonly request:Request,\n    ) {}\n    \n\n    public async paginatedQuery (paginationQueryDto:PaginationQueryDto, repository:Repository,): Promise> {\n\n        const result = await repository.find({\n\n            //skip: number of post\n            //take: number of post to show per page\n            skip: paginationQueryDto.limit * (paginationQueryDto.page - 1),\n            take: paginationQueryDto.limit,\n        })\n\n\n        // create a requestUrl \n        // i.e http://localhost:3000/resource \n        // the http is this.requestprotocol\n        const baseUrl = this.request.protocol; + \"://\" + this.request.headers.host + \"/\"\n\n        const newUrl = new URL(this.request.url, baseUrl)\n\n        console.log(baseUrl);\n        // line 34 give u http://localhost:3000/resource  as result on your terminal\n        console.log(newUrl)\n\n       const totalItems = await repository.count()\n\n       const totalpage = Math.ceil(totalItems / paginationQueryDto.limit)\n\n       const nextpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page +1\n\n       const prevpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page -1\n\n\n        const finalResponse: Paginated = {\n            data: result,\n            meta: {\n                itemsPerPage: paginationQueryDto.limit,\n                totalItems: totalItems,\n                currentPage: paginationQueryDto.page,\n                totalPage : totalpage\n            }, \n            link: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=1`,\n\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&${totalpage}`,\n   \n               current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${paginationQueryDto.page}`,\n   \n               next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${nextpage}`,\n   \n               previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${prevpage}`\n   \n            }\n        }\n\n        return finalResponse\n\n\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\n\nexport class PaginationQueryDto {\n\n    @IsOptional()\n    @IsPositive()\n    limit?:number = 2;\n\n    @IsOptional()\n    @IsPositive()\n    page?:number = 1;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refreshTokenDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refreshTokenDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     * inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * inject jwtService\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /* \n     * inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider\n  ) {}\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // validate the refresh token using jwt\n   const { sub } = await this.jwtService.verifyAsync(\n        refreshTokenDto.refreshToken, \n        {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n    })\n\n    // grab the user from the database\n    const user = await this.userService.FindOneById(sub)\n\n    // generate the token\n    return await this.generateTokenProvider.generateTokens(user)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerToClientEvents.html":{"url":"interfaces/ServerToClientEvents.html","title":"interface - ServerToClientEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerToClientEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/interfaces/websockets-message.interface.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface ServerToClientEvents {\n    // newMessage: Payload: Message\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/userDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { HashingProvider } from './hashing';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class SignInProvider {\n    constructor(\n        /* \n         * injecting userService repo\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n         * injecting hashing dependency\n         */\n        private readonly hashingProvider: HashingProvider,\n        \n        /* \n         * injecting generateTokenProvider\n         */\n        private readonly generateTokenProvider: GenerateTokensProvider\n    ){}\n    public async SignIn(signInDto: SignInDto) {\n        // check if user exist in db\n        // throw error if user doesnt exist\n        let user = await this.userService.GetOneByEmail(signInDto.email)\n\n        if (!user) {\n            throw new UnauthorizedException('email or password is incorrect');\n        }\n        \n        // conpare password\n        let isCheckedPassword: boolean = false\n\n        try {\n            isCheckedPassword = await this.hashingProvider.comparePasswords(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'error  connecting to the database'\n            })\n        }\n\n        if (!isCheckedPassword) {\n            throw new UnauthorizedException('email or password is incorrect')\n        }\n        // login\n        return await this.generateTokenProvider.generateTokens(user)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatRoomDto.html":{"url":"classes/UpdateChatRoomDto.html","title":"class - UpdateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/update-chat-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateChatRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatRoomDto } from './create-chat-room.dto';\n\nexport class UpdateChatRoomDto extends PartialType(CreateChatRoomDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entitly.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ManyToMany(undefined, chatRoom => chatRoom.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 225, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@OneToMany(undefined, message => message.sender, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable, OneToMany } from 'typeorm';\nimport { userRole } from './Enums/userRole.enum';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { Message } from 'src/messages/message.entity';\nimport { IsOptional } from 'class-validator';\n// import { Message } from 'src/messages/message.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('varchar', { length: 100, nullable: false })\n  firstName: string;\n\n  @Column('varchar', { length: 100 })\n  lastName: string;\n\n  @Column('varchar', { unique: true, nullable: false })\n  email: string;\n\n  @Exclude()\n  @Column('varchar', { nullable: true })\n  password?: string;\n\n  @Column({ type: 'enum', enum: userRole, default: userRole.USER })\n  userRole?: userRole;\n\n  @Column('varchar', { length: 225, nullable: true })\n  googleId?: string;\n\n  // Many-to-Many relationship with ChatRoom\n  @IsOptional()\n  @ManyToMany(() => ChatRoom, (chatRoom) => chatRoom.users)\n  @JoinTable() // This creates a junction table to link users and chat rooms\n  chatRooms?: ChatRoom[];\n\n  // One-to-Many relationship with Message\n  @IsOptional()\n  @OneToMany(() => Message, (message) => message.sender, { cascade: true })\n  messages?: Message[]; //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    Public\n                                editedPost\n                            \n                            \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        editedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    editedPost(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getuserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getuserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from \"@nestjs/common\";\nimport { UserService } from \"./provider/user.service\";\nimport { CreateUserDto } from \"./DTOs/create-user.dto\";\nimport { EditUserDto } from \"./DTOs/patch-user.dto\";\nimport { GetuserParamDto } from \"./DTOs/getUserparamdto\";\n\n\n@Controller('users')\nexport class UserController {\n    constructor(private readonly userService:UserService) {}\n\n    @Get('/:id?')\n  public getUsers(\n    @Param() getuserParamDto: GetuserParamDto,\n    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    console.log(getuserParamDto);\n    return this.userService.findAll(getuserParamDto, limit, page);\n  }\n\n@Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUsers(createUserDto);\n  }\n  \n\n  @Delete()\n  public deleteUser(@Query('id', ParseIntPipe) id:number)  {\n      return this.userService.deleteUser(id)\n\n  }\n\n\n  @Patch()\n  public editedPost(@Body() edituserDto: EditUserDto) {\n    return this.userService.editUser(edituserDto);\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmail\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entitly';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { FindOneByEmail } from './provider/find-one-by-email';\nimport { MailModule } from 'src/mail/mail.module';\nimport { FindOneByGoogleIdProvider } from './provider/find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './provider/googleUserProvider';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]), MailModule],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    FindOneByEmail,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                editUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                FindOneById\n                            \n                            \n                                    Public\n                                    Async\n                                GetOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, createUserProvider: CreateUserProvider, findOneByemail: FindOneByEmail, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByemail\n                                                  \n                                                        \n                                                                        FindOneByEmail\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(edituserDto: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        GetOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entitly';\nimport { Repository } from 'typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { FindOneByEmail } from './find-one-by-email';\nimport { EditUserDto } from '../DTOs/patch-user.dto';\nimport { GetuserParamDto } from '../DTOs/getUserparamdto';\nimport { FindOneByGoogleIdProvider } from './find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './googleUserProvider';\nimport { GoogleInterface } from 'src/auth/social/interfaces/user.interface';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    /*\n     *inject User entity\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly findOneByemail: FindOneByEmail,\n\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  public findAll(\n    getUserParamDto: GetuserParamDto,\n    limit: number,\n    page: number,\n  ): Promise {\n    return this.userRepository.find();\n  }\n\n  public async createUsers(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUsers(createUserDto);\n  }\n\n  public FindOneById(id: number): Promise {\n    return this.userRepository.findOneBy({ id });\n  }\n\n  public async GetOneByEmail(email: string) {\n    return await this.findOneByemail.findOneByEmail(email);\n  }\n\n  public async deleteUser(id: number) {\n    await this.userRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  public async editUser(edituserDto: EditUserDto) {\n    let edit = await this.userRepository.findOneBy({\n      id: edituserDto.id,\n    });\n\n    edit.firstName = edituserDto.firstName ?? edit.firstName;\n    edit.lastName = edituserDto.lastName ?? edit.lastName;\n    edit.password = edituserDto.password ?? edit.password;\n    edit.email = edituserDto.email ?? edit.email;\n\n    return this.userRepository.save(edit);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    return this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebSocketModule.html":{"url":"modules/WebSocketModule.html","title":"module - WebSocketModule","body":"\n                   \n\n\n\n\n    Modules\n    WebSocketModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web-socket/web-socket.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class WebSocketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketGateway.html":{"url":"classes/WebsocketGateway.html","title":"class - WebsocketGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/websocketEvents/websocket.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\n\n@WebSocketGateway()\nexport class WebsocketGateway {\n  @SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refreshTokenDto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/userDto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n            guard\n            AuthGuardGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interface/activeInterface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/interfaces/user.interface.ts\n            \n            interface\n            GoogleInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/create-chat-room.dto.ts\n            \n            class\n            CreateChatRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/update-chat-room.dto.ts\n            \n            class\n            UpdateChatRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            controller\n            ChatRoomController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.entity.ts\n            \n            entity\n            ChatRoom\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/providers/chatrooms/chatrooms.service.ts\n            \n            injectable\n            ChatRoomService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/interceptor/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/Interfaces/paginatedInterface.ts\n            \n            class\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/Provider/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.provider.ts\n            \n            injectable\n            MailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessageController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/provider/message.service.ts\n            \n            injectable\n            MessageService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/getUserparamdto.ts\n            \n            class\n            GetuserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-email.ts\n            \n            injectable\n            FindOneByEmail\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-googleId.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/googleUserProvider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.entitly.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web-socket/interfaces/websockets-message.interface.ts\n            \n            interface\n            ServerToClientEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web-socket/websocketEvents/websocket.gateway.ts\n            \n            class\n            WebsocketGateway\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.1\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authTypes   (src/.../authTypes.enum.ts)\n                        \n                        \n                            ChatRoomType   (src/.../chatroomType.ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        authTypes\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/chatrooms/enums/chatroomType.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatRoomType\n                    \n                \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n\n    src/users/Enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nrealTimeChat (NestJS Project)\nThis is a NestJS project bootstrapped using the Nest CLI.\nGetting Started\nPrerequisites\n\nNode.js (LTS enforced)\nnpm\n\nInstallation\nClone the repository and install dependencies:\nExample :git clone https://github.com/phertyameen/realTimeChat.git\ncd realTimeChat\nnpm install\n\n# Running the Application\n\nStart the development server:\n```npm run start\n\nFor hot reload:\n```npm run start:dev\n\n# Project Structure\n\nsrc/ - Main application source code\nmain.ts - Entry point of the application\napp.module.ts - Root module with TypeORM connection\nconfig folder - contains appConfig and database configurations\napp.controller.ts - Default controller\napp.service.ts - Default service\n\n# Installed Packages\n\n@nestjs/config - Configuration management\n@nestjs/typeorm - TypeORM integration\nclass-validator - Validation utilities\nclass-transformer - Transformation utilities\n\n#Rules\n\nDo not push directly to any branch.\nAlways create a new branch for your changes.\nOpen a pull request for review before merging.\nAlways use multi-line comment i.e (/**...*/) comment system instead of the double slash (//) for uproper documentation\n\n#The keyboard shortcut for commenting\nMulti-line comment: Shift + Alt + A (Windows/Linux) or Shift + Option + A (Mac)\n\n#Useful Commands\nnpm run build - Build the project\nnpm run test - Run tests\n\n#License\nThis project is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebSocketModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatRoomService \n\nChatRoomService \n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const user: ActiveUserData = request[REQUEST_USER_KEY]\n    return field ? user?.[field] : user \n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: authTypes[]) => \n    SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
