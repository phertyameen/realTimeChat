var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.595,1,2.425]],["body/guards/AccessTokenGuard.html",[1,3.045,2,2.48,3,0.147,4,0.132,5,0.117,6,5.395,7,4.119,8,3.011,9,0.26,10,1.064,11,1.503,12,4.851,13,2.185,14,4.923,15,1.573,16,3.472,17,5.319,18,4.458,19,4.444,20,0.674,21,3.472,22,1.337,23,0.015,24,1.188,25,0.486,26,0.89,27,3.838,28,4.119,29,3.472,30,3.259,31,1.064,32,2.108,33,4.923,34,4.078,35,3.472,36,0.424,37,1.253,38,0.639,39,3.259,40,0.494,41,1.805,42,2.147,43,2.147,44,2.48,45,2.298,46,2.147,47,2.707,48,2.707,49,3.011,50,0.147,51,0.042,52,1.805,53,1.512,54,2.48,55,4.269,56,3.472,57,2.155,58,3.472,59,4.078,60,3.472,61,3.472,62,2.48,63,2.558,64,1.851,65,1.905,66,2.861,67,1.026,68,3.011,69,3.472,70,3.011,71,3.472,72,1.905,73,1.714,74,3.472,75,1.064,76,1.487,77,3.472,78,3.472,79,0.009,80,0.009]],["title/interfaces/ActiveUserData.html",[81,1.935,82,2.151]],["body/interfaces/ActiveUserData.html",[3,0.234,4,0.21,5,0.187,9,0.415,23,0.014,25,0.569,26,1.041,50,0.234,79,0.012,80,0.012,81,2.735,82,3.673,83,3.668,84,4.804,85,1.977,86,2.931,87,4.343,88,1.818,89,2.491]],["title/controllers/AppController.html",[90,1.538,91,2.8]],["body/controllers/AppController.html",[3,0.219,4,0.196,5,0.174,9,0.388,10,1.388,20,0.61,23,0.015,31,1.119,36,0.388,40,0.737,50,0.219,51,0.078,53,1.59,75,1.119,79,0.012,80,0.012,88,1.623,90,2.739,91,4.586,92,2.121,93,4.489,94,6.329,95,1.654,96,5.177,97,6.422,98,4.318,99,4.489,100,4.489,101,3.202,102,5.177]],["title/modules/AppModule.html",[103,1.158,104,2.8]],["body/modules/AppModule.html",[1,2.641,3,0.121,4,0.108,5,0.096,7,1.891,23,0.015,25,0.243,36,0.471,37,1.03,40,0.407,41,1.484,42,1.767,46,1.767,50,0.121,51,0.035,76,1.223,79,0.008,80,0.008,91,3.652,92,1.749,98,3.941,99,2.477,103,1.51,104,5.499,105,1.223,106,1.223,107,1.41,108,1.41,109,1.28,110,2.524,111,1.41,112,2.477,113,2.477,114,2.477,115,3.941,116,4.595,117,4.218,118,4.218,119,3.941,120,4.218,121,2.108,122,1.41,123,1.41,124,2.856,125,3.385,126,3.385,127,2.972,128,2.856,129,3.703,130,4.423,131,3.703,132,2.856,133,4.27,134,2.856,135,2.04,136,1.223,137,2.856,138,2.477,139,1.891,140,2.04,141,2.856,142,2.856,143,2.856,144,2.856,145,3.703,146,4.27,147,1.891,148,3.049,149,2.856,150,2.227,151,2.856,152,2.856,153,2.227,154,4.27,155,4.27,156,2.856,157,4.27,158,2.477,159,2.856,160,3.049,161,2.856,162,2.856,163,2.477,164,2.856,165,2.856,166,2.856,167,2.856,168,2.856,169,2.856,170,2.477,171,2.856,172,2.477,173,2.856,174,2.477,175,2.856,176,2.856,177,2.856,178,1.484,179,2.856,180,1.567,181,2.856,182,2.856,183,2.856,184,2.856,185,2.856,186,2.856,187,2.856,188,2.477,189,2.477,190,3.329,191,3.703,192,2.04]],["title/injectables/AppService.html",[38,0.509,98,2.425]],["body/injectables/AppService.html",[3,0.225,4,0.202,5,0.179,9,0.399,10,1.412,20,0.628,23,0.015,31,1.151,36,0.322,38,0.848,40,0.758,50,0.225,51,0.079,75,1.151,79,0.012,80,0.012,88,1.651,94,6.391,98,4.041,100,6.13,193,1.701,194,4.617,195,5.324,196,4.372,197,5.093,198,5.324]],["title/controllers/AuthController.html",[90,1.538,125,2.595]],["body/controllers/AuthController.html",[3,0.173,4,0.155,5,0.138,9,0.306,10,1.192,11,1.638,13,1.36,15,1.307,20,0.65,22,1.289,23,0.015,24,1.145,25,0.468,26,0.857,31,1.192,36,0.433,40,0.582,50,0.173,51,0.049,53,1.256,67,1.208,75,1.192,79,0.01,80,0.01,90,1.604,92,1.675,95,1.761,125,3.648,196,2.529,199,3.545,200,2.706,201,3.24,202,2.699,203,4.766,204,3.936,205,4.089,206,4.127,207,5.512,208,4.089,209,3.187,210,4.439,211,4.089,212,4.089,213,1.922,214,2.529,215,3.545,216,3.187,217,3.187,218,2.376,219,3.187,220,3.856,221,3.545,222,3.187,223,2.529,224,3.545,225,3.187,226,3.545,227,4.089,228,2.706,229,4.089,230,3.187,231,3.187,232,3.545,233,4.089,234,4.089,235,4.089,236,4.089]],["title/guards/AuthGuardGuard.html",[0,2.595,148,2.8]],["body/guards/AuthGuardGuard.html",[0,3.974,1,4.24,2,4.552,3,0.136,4,0.122,5,0.108,7,2.126,9,0.24,10,1.006,11,1.439,12,5.344,13,2.21,15,1.488,20,0.549,22,1.088,23,0.015,24,0.967,25,0.396,26,0.724,27,3.629,28,3.974,30,2.126,31,0.694,32,1.994,36,0.401,38,0.604,39,3.081,40,0.457,44,2.294,45,2.126,49,2.785,50,0.136,51,0.039,52,1.669,53,2.042,57,2.301,63,1.669,64,1.208,67,0.949,73,1.585,75,1.006,76,1.994,79,0.009,80,0.009,85,0.949,147,2.126,148,3.324,150,4.268,153,2.504,197,2.504,223,3.942,237,4.748,238,2.504,239,4.655,240,4.036,241,4.655,242,3.212,243,6.856,244,3.212,245,3.212,246,2.785,247,2.785,248,2.504,249,4.655,250,3.212,251,3.212,252,3.212,253,3.212,254,3.212,255,3.212,256,3.212,257,3.212,258,2.504,259,3.629,260,3.212,261,4.655,262,3.212,263,3.212,264,3.212,265,3.212,266,3.212,267,3.212,268,3.212,269,3.212,270,4.655,271,3.212,272,3.212,273,3.212,274,3.212,275,3.212,276,3.212]],["title/modules/AuthModule.html",[103,1.158,115,2.425]],["body/modules/AuthModule.html",[1,2.099,3,0.144,4,0.129,5,0.114,7,2.246,23,0.015,36,0.467,40,0.483,41,1.764,42,2.099,46,2.099,47,2.645,50,0.144,51,0.059,59,1.972,79,0.009,80,0.009,92,1.984,103,1.668,105,1.453,106,1.453,107,1.675,108,1.675,109,1.521,110,2.788,111,2.788,115,4.783,119,2.995,121,2.391,122,1.675,123,1.675,125,3.738,127,1.972,129,2.943,145,2.943,147,2.246,153,2.645,163,2.943,188,2.943,189,2.943,190,2.645,191,2.943,220,4.651,221,2.943,277,2.943,278,2.943,279,2.943,280,3.91,281,3.715,282,3.936,283,4.188,284,4.188,285,3.394,286,3.738,287,2.657,288,3.459,289,3.394,290,3.394,291,3.394,292,2.943,293,3.394,294,3.394,295,3.206,296,3.394,297,3.394,298,3.394,299,3.394,300,2.645,301,3.394,302,2.943,303,2.645,304,2.943,305,3.394,306,3.394,307,3.394]],["title/injectables/AuthService.html",[38,0.509,220,2.425]],["body/injectables/AuthService.html",[3,0.162,4,0.145,5,0.129,9,0.287,10,1.139,11,1.583,13,2.004,15,1.684,20,0.71,22,1.409,23,0.015,24,1.252,25,0.512,26,0.937,31,1.139,36,0.425,37,2.174,38,0.684,40,0.545,50,0.162,51,0.046,53,1.851,67,1.13,75,1.139,79,0.01,80,0.01,193,1.223,196,2.367,202,2.646,203,3.763,204,3.763,206,4.211,209,4.108,210,4.211,213,1.799,220,3.259,222,2.984,225,2.984,228,2.533,283,4.459,284,4.542,287,2.1,292,3.319,295,2.533,308,3.319,309,2.533,310,3.388,311,3.827,312,5.269,313,3.827,314,3.827,315,2.533,316,3.827,317,2.984,318,0.895,319,2.367,320,3.827,321,3.827,322,3.827]],["title/injectables/BcryptProvider.html",[38,0.509,288,2.8]],["body/injectables/BcryptProvider.html",[3,0.179,4,0.16,5,0.142,9,0.316,10,1.218,11,1.904,20,0.664,22,1.318,23,0.015,24,1.171,25,0.479,26,0.877,31,1.218,32,2.897,36,0.383,38,0.732,40,0.602,50,0.179,51,0.051,52,2.197,57,1.952,67,1.873,75,1.218,79,0.011,80,0.011,88,1.923,178,2.197,193,1.351,202,2.725,280,3.092,288,4.025,323,3.665,324,4.887,325,4.887,326,4.887,327,5.865,328,4.227,329,4.887,330,5.498,331,4.227,332,3.665,333,3.295,334,4.887,335,4.227,336,4.227,337,3.665,338,5.636,339,4.227,340,4.227,341,3.295,342,4.227]],["title/modules/ChatModule.html",[103,1.158,116,2.595]],["body/modules/ChatModule.html",[3,0.196,4,0.176,5,0.156,23,0.015,36,0.449,40,0.66,50,0.196,51,0.056,79,0.011,80,0.011,92,2.452,103,1.958,105,1.984,106,1.984,107,2.287,108,2.287,109,2.077,110,3.273,111,3.273,116,5.006,121,2.955,122,2.287,123,2.287,127,2.692,135,3.308,136,1.984,318,1.4,343,4.017,344,4.017,345,4.017,346,4.598,347,4.633,348,4.389,349,2.177,350,4.017,351,4.633,352,3.611,353,3.611,354,4.633]],["title/entities/ChatRoom.html",[349,1.843,355,2.151]],["body/entities/ChatRoom.html",[3,0.151,4,0.135,5,0.12,9,0.267,20,0.833,23,0.015,24,1.378,25,0.639,36,0.35,50,0.151,51,0.043,76,2.147,79,0.009,80,0.009,85,1.481,88,1.267,89,2.18,95,2.259,318,1.715,349,2.356,355,1.955,356,2.545,357,3.09,358,5.8,359,2.484,360,5.029,361,5.029,362,4.142,363,4.347,364,5.029,365,3.563,366,4.522,367,3.563,368,4.347,369,3.58,370,3.908,371,3.563,372,3.563,373,6.294,374,3.563,375,3.563,376,4.522,377,3.563,378,4.737,379,2.778,380,4.907,381,2.356,382,1.759,383,3.563,384,3.563,385,5.014,386,4.347,387,3.908,388,3.563,389,3.839,390,4.347,391,3.09,392,4.347,393,5.014,394,1.398,395,2.204,396,2.778,397,3.563,398,3.563,399,3.563,400,3.563,401,3.09,402,3.563,403,3.563,404,3.563]],["title/controllers/ChatRoomController.html",[90,1.538,348,2.595]],["body/controllers/ChatRoomController.html",[3,0.108,4,0.097,5,0.086,9,0.191,10,0.847,11,1.254,20,0.749,22,1.426,23,0.015,24,1.268,25,0.518,26,0.949,31,1.373,34,2.277,36,0.368,40,0.363,43,1.577,50,0.108,51,0.031,53,0.783,57,1.357,67,0.753,75,1.373,79,0.007,80,0.007,81,1.259,86,1,87,1.482,88,0.645,89,2.649,90,1,92,1.045,95,2.03,101,1.577,200,1.688,213,1.198,214,2.423,216,1.988,217,1.988,218,2.773,231,1.988,318,1.116,346,2.773,348,2.593,352,1.988,359,3.107,381,1.841,405,3.054,406,2.783,407,2.798,408,4.137,409,1.678,410,3.312,411,3.397,412,3.397,413,4.137,414,2.951,415,2.55,416,5.061,417,3.397,418,2.55,419,2.211,420,3.546,421,5.831,422,4.537,423,2.55,424,2.55,425,2.211,426,3.397,427,2.55,428,2.211,429,2.55,430,2.55,431,2.55,432,3.397,433,2.55,434,2.211,435,4.055,436,3.397,437,2.55,438,1.688,439,1.821,440,1.577,441,2.211,442,5.111,443,1.399,444,2.798,445,1.688,446,2.211,447,2.211,448,2.211,449,1.688,450,2.211,451,2.211,452,2.211,453,3.397,454,3.544,455,3.397,456,2.211,457,2.211,458,2.211,459,2.211,460,4.137,461,2.211,462,2.211,463,2.211,464,2.211,465,2.211,466,2.211,467,1.045,468,1.688,469,2.211,470,1.988,471,3.397,472,2.211,473,2.211]],["title/injectables/ChatRoomService.html",[38,0.509,346,2.279]],["body/injectables/ChatRoomService.html",[3,0.075,4,0.067,5,0.059,9,0.132,10,0.631,11,1.882,13,1.443,15,0.932,20,0.676,22,1.282,23,0.015,24,1.192,25,0.487,26,0.853,31,1.185,32,2.849,36,0.346,38,0.379,40,0.251,50,0.075,51,0.021,57,2.177,63,3.267,64,2.415,67,1.856,75,1.12,79,0.005,80,0.005,89,2.567,136,0.755,193,0.563,197,2.91,318,1.282,346,1.696,349,2.88,350,1.529,359,2.849,360,3.762,361,1.529,362,4.673,378,1.259,394,0.692,395,1.09,396,1.375,406,3.507,407,2.666,409,1.599,410,2.683,411,2.53,412,4.168,414,2.309,416,4.88,419,2.53,420,2.794,425,2.53,428,2.53,434,2.53,435,3.391,440,1.09,443,0.967,444,2.084,445,1.167,468,4.057,474,1.529,475,2.918,476,2.918,477,1.763,478,2.849,479,2.309,480,1.763,481,2.918,482,2.918,483,1.763,484,2.471,485,4.807,486,1.763,487,1.763,488,1.763,489,1.763,490,1.259,491,2.918,492,1.763,493,1.763,494,1.529,495,1.375,496,1.763,497,1.025,498,1.529,499,1.09,500,1.259,501,2.918,502,1.763,503,4.339,504,3.733,505,1.763,506,1.763,507,2.918,508,4.491,509,1.763,510,1.763,511,2.275,512,0.916,513,1.763,514,1.763,515,2.918,516,1.763,517,1.529,518,1.763,519,2.918,520,2.53,521,1.763,522,1.763,523,1.763,524,1.763,525,4.339,526,1.763,527,2.53,528,1.763,529,2.918,530,2.918,531,1.763,532,1.763,533,1.763,534,1.763,535,1.763,536,1.763,537,4.339,538,3.733,539,2.53,540,1.763,541,1.763,542,2.53,543,1.763,544,2.918,545,1.763,546,2.918,547,2.275,548,1.763,549,1.529,550,3.733,551,1.763,552,1.763,553,1.763,554,2.918,555,1.763,556,2.918,557,3.733,558,1.763,559,1.763,560,2.918,561,2.918,562,1.763,563,1.763]],["title/modules/CloudinaryModule.html",[103,1.158,564,2.8]],["body/modules/CloudinaryModule.html",[3,0.214,4,0.192,5,0.171,23,0.015,36,0.383,40,0.722,50,0.214,51,0.061,79,0.012,80,0.012,103,2.043,105,2.172,106,2.172,107,2.504,108,2.504,109,2.274,110,3.415,111,3.415,121,3.13,122,2.504,123,2.504,564,5.512,565,4.398,566,4.398,567,4.398,568,4.655,569,3.137,570,5.072,571,5.072]],["title/injectables/CloudinaryService.html",[38,0.509,568,2.279]],["body/injectables/CloudinaryService.html",[3,0.193,4,0.173,5,0.2,9,0.341,10,1.281,11,1.73,15,2.103,20,0.699,22,1.067,23,0.015,24,0.948,25,0.388,26,0.71,31,0.986,32,2.538,36,0.398,38,0.769,40,0.65,50,0.193,51,0.055,64,1.715,73,2.925,75,0.986,79,0.011,80,0.011,193,1.458,568,3.444,569,4.071,572,3.956,573,5.926,574,4.562,575,5.926,576,5.131,577,4.562,578,4.562,579,4.701,580,4.562,581,3.956,582,3.956,583,4.562,584,3.956,585,4.562,586,3.956,587,4.562,588,4.562,589,4.562,590,4.562,591,4.562,592,4.562,593,3.258,594,4.562,595,4.562,596,4.562]],["title/classes/CreateChatRoomDto.html",[51,0.047,420,2.279]],["body/classes/CreateChatRoomDto.html",[3,0.191,4,0.171,5,0.152,9,0.337,20,0.771,23,0.015,24,1.36,25,0.647,26,0.915,36,0.395,50,0.191,51,0.079,76,1.93,79,0.011,80,0.011,85,1.736,88,1.486,89,2.266,95,2.091,378,4.673,396,3.513,406,3.605,420,3.417,597,1.768,598,6.014,599,3.513,600,6.544,601,3.803,602,4.507,603,4.507,604,4.507,605,4.507,606,4.583,607,3.908,608,4.507,609,3.219,610,4.583,611,4.507,612,3.636,613,5.88,614,1.846,615,2.62,616,4.507]],["title/injectables/CreateGoogleUserProvider.html",[38,0.509,617,2.425]],["body/injectables/CreateGoogleUserProvider.html",[3,0.18,4,0.162,5,0.144,9,0.319,10,1.225,11,1.673,13,1.418,15,1.811,20,0.668,22,1.325,23,0.015,24,1.178,25,0.482,26,0.882,31,0.922,36,0.427,37,1.538,38,0.736,40,0.607,50,0.18,51,0.052,53,1.31,57,1.476,63,2.216,64,2.131,65,2.339,67,1.259,72,2.339,73,2.105,75,0.922,79,0.011,80,0.011,136,1.826,193,1.362,202,2.395,213,2.004,318,1.489,394,1.673,395,2.637,409,1.826,478,3.527,479,3.938,497,2.478,499,2.637,617,3.505,618,3.697,619,4.915,620,2.822,621,4.263,622,4.915,623,4.492,624,4.263,625,3.697,626,4.263,627,4.263,628,4.263,629,4.263,630,4.263,631,2.216]],["title/classes/CreateMessageDto.html",[51,0.047,632,2.425]],["body/classes/CreateMessageDto.html",[3,0.182,4,0.164,5,0.145,9,0.323,20,0.836,23,0.015,25,0.619,26,1.134,36,0.345,50,0.182,51,0.069,79,0.011,80,0.011,85,1.687,88,1.908,95,2.266,484,4.239,597,1.692,601,3.962,609,3.08,612,4.216,614,1.767,632,3.532,633,6.319,634,3.362,635,5.553,636,4.573,637,5.204,638,3.961,639,5.711,640,4.312,641,3.74,642,4.312,643,4.312,644,4.312,645,4.312,646,3.362,647,4.312,648,3.739,649,4.312]],["title/classes/CreateUserDto.html",[51,0.047,650,2.151]],["body/classes/CreateUserDto.html",[3,0.093,4,0.083,5,0.074,9,0.164,11,0.575,20,0.734,23,0.015,24,1.117,25,0.62,26,1.022,36,0.346,50,0.093,51,0.06,52,1.137,57,0.758,62,1.563,75,0.935,76,2.302,79,0.006,80,0.006,85,1.027,86,2.109,88,1.925,89,1.982,95,1.99,178,3.601,259,2.71,341,1.706,349,2.527,369,2.483,381,1.029,382,1.08,389,2.301,394,0.859,467,1.424,512,3.236,597,0.859,601,3.326,606,1.706,607,1.898,609,1.563,610,2.71,612,3.325,614,0.897,615,1.272,631,3.547,641,1.908,650,2.373,651,5,652,1.563,653,3.372,654,4.273,655,2.863,656,2.373,657,2.863,658,4.087,659,6,660,3.015,661,3.015,662,2.188,663,2.188,664,5.321,665,4.273,666,4.273,667,4.273,668,4.661,669,3.015,670,2.188,671,2.188,672,3.015,673,2.188,674,3.015,675,2.188,676,3.015,677,2.483,678,2.188,679,2.188,680,2.188,681,3.015,682,2.863,683,2.71,684,2.188,685,2.188,686,3.015,687,2.71,688,2.188,689,2.188,690,2.188,691,3.015,692,3.015,693,3.015,694,3.015,695,3.015,696,3.015,697,3.015,698,4.273,699,3.015,700,3.015,701,3.015,702,2.188,703,2.188,704,2.188,705,2.483,706,1.898,707,3.015,708,3.015,709,3.015,710,3.751,711,3.015,712,5.399,713,1.563,714,1.706,715,3.015,716,1.706,717,1.898,718,1.706,719,1.898,720,1.898,721,2.15,722,1.563,723,1.898,724,1.898,725,1.563,726,1.706,727,1.898,728,3.015,729,1.706,730,1.898,731,1.898,732,1.898,733,1.898,734,3.372,735,3.015,736,1.898,737,1.706,738,3.751,739,1.898,740,1.898,741,2.301,742,1.706,743,1.898,744,1.898]],["title/injectables/CreateUserProvider.html",[38,0.509,745,2.425]],["body/injectables/CreateUserProvider.html",[3,0.136,4,0.122,5,0.108,9,0.24,10,1.006,11,1.439,13,1.548,15,1.488,20,0.549,22,1.088,23,0.015,24,0.967,25,0.396,26,0.724,31,0.694,32,1.994,34,2.706,36,0.401,37,1.975,38,0.604,40,0.457,50,0.136,51,0.039,53,0.987,57,1.612,63,2.845,64,2.059,65,3.294,67,1.375,72,2.554,73,3.281,75,0.694,79,0.009,80,0.009,86,1.26,136,1.375,178,1.669,180,2.554,193,1.026,202,2.059,280,3.926,287,1.762,318,1.49,319,1.986,382,1.585,394,1.26,409,1.375,443,1.762,478,3.12,479,3.386,495,2.504,497,1.867,499,1.986,517,4.036,520,2.785,547,2.504,620,2.126,631,2.419,650,3.646,745,2.879,746,4.748,747,2.785,748,3.629,749,3.212,750,3.629,751,3.212,752,4.268,753,2.126,754,2.294,755,3.212,756,3.212,757,5.475,758,3.212,759,3.212,760,4.655,761,4.036,762,4.655,763,4.655,764,4.655,765,3.629,766,4.655,767,4.655,768,4.655,769,4.655,770,2.785,771,3.212,772,2.294,773,4.655,774,3.212,775,3.212,776,4.036,777,3.212,778,3.212]],["title/injectables/DataResponseInterceptor.html",[38,0.509,192,2.8]],["body/injectables/DataResponseInterceptor.html",[3,0.203,4,0.183,5,0.162,9,0.36,10,1.326,20,0.567,22,1.125,23,0.015,24,1,25,0.409,26,0.748,28,4.705,30,3.185,31,1.04,36,0.37,38,0.796,40,0.685,44,4.821,45,3.185,50,0.203,51,0.058,52,2.5,75,1.04,79,0.011,80,0.011,192,4.379,193,1.537,593,3.436,779,5.317,780,5.317,781,4.172,782,6.133,783,6.133,784,5.262,785,7.109,786,4.811,787,6.133,788,4.811,789,4.811,790,4.811,791,4.811,792,4.811,793,4.811,794,4.811,795,4.059]],["title/classes/EditUserDto.html",[51,0.047,796,2.595]],["body/classes/EditUserDto.html",[3,0.21,4,0.189,5,0.167,9,0.372,20,0.586,23,0.015,25,0.422,26,0.773,36,0.414,50,0.21,51,0.076,79,0.012,80,0.012,85,1.849,89,2.168,95,1.588,258,3.875,359,2.935,409,2.129,438,3.29,449,4.144,597,1.95,601,2.889,614,2.036,641,3.435,650,2.727,652,3.55,705,3.55,754,3.55,795,3.29,796,4.144,797,5.429,798,6.261,799,4.31,800,4.971,801,4.88,802,4.88,803,4.31,804,3.29,805,4.31,806,4.971,807,4.971,808,4.971]],["title/injectables/FindOneByEmail.html",[38,0.509,809,2.425]],["body/injectables/FindOneByEmail.html",[3,0.176,4,0.158,5,0.14,9,0.311,10,1.205,11,1.652,13,1.382,15,1.328,20,0.657,22,1.303,23,0.015,24,1.158,25,0.474,26,0.867,31,0.899,32,2.387,36,0.406,38,0.724,39,2.751,40,0.592,50,0.176,51,0.05,63,2.896,64,2.096,65,2.281,67,1.228,72,2.281,73,2.751,75,0.899,79,0.01,80,0.01,86,2.186,88,1.589,136,1.78,180,2.281,193,1.328,202,2.364,318,1.722,382,2.052,394,1.631,478,3.491,479,3.447,497,2.416,512,3.268,620,2.751,631,2.16,752,3.24,753,2.751,765,3.24,772,2.968,809,4.155,810,4.901,811,3.604,812,4.157,813,5.573,814,4.157,815,4.157,816,3.24,817,4.157,818,4.157,819,4.157]],["title/injectables/FindOneByGoogleIdProvider.html",[38,0.509,820,2.425]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.191,4,0.172,5,0.152,9,0.338,10,1.274,11,1.722,13,1.503,15,1.883,20,0.694,22,1.378,23,0.015,24,1.224,25,0.501,26,0.916,31,0.977,36,0.419,37,1.631,38,0.765,40,0.644,50,0.191,51,0.055,67,1.335,75,0.977,79,0.011,80,0.011,88,1.656,136,1.936,193,1.445,202,2.464,213,2.125,318,1.057,394,1.773,478,3.609,479,4.053,497,2.627,499,2.796,512,3.406,620,2.992,656,3.232,753,2.992,810,5.109,816,3.524,820,3.643,821,3.92,822,5.108,823,4.521,824,5.108,825,4.521]],["title/injectables/GenerateTokensProvider.html",[38,0.509,281,2.151]],["body/injectables/GenerateTokensProvider.html",[3,0.138,4,0.124,5,0.11,9,0.244,10,1.017,11,1.756,13,1.837,15,1.504,17,5.496,18,4.305,19,4.318,20,0.651,22,1.414,23,0.015,24,1.147,25,0.514,26,0.859,31,1.017,36,0.416,37,1.176,38,0.611,40,0.464,41,1.695,42,2.017,46,2.911,50,0.138,51,0.039,53,1.696,54,2.329,57,1.129,59,2.735,66,3.514,67,1.39,75,1.017,79,0.009,80,0.009,82,2.582,86,1.279,87,1.895,89,2.313,193,1.042,202,2.512,203,3.944,213,2.212,228,3.655,246,2.827,281,2.582,287,1.789,309,2.158,310,3.314,315,2.158,317,2.542,318,1.562,319,2.017,395,2.017,416,3.361,490,2.329,826,4.714,827,2.542,828,4.706,829,4.706,830,2.827,831,4.706,832,3.261,833,4.706,834,6.047,835,4.714,836,3.261,837,2.827,838,3.261,839,2.542,840,3.261,841,2.542,842,2.827,843,2.827,844,2.827,845,2.827,846,2.827,847,5.522,848,3.261,849,3.361,850,4.706,851,4.706,852,2.827]],["title/classes/GetuserParamDto.html",[51,0.047,853,2.595]],["body/classes/GetuserParamDto.html",[3,0.225,4,0.202,5,0.179,9,0.399,20,0.628,23,0.015,25,0.601,26,1.016,36,0.395,50,0.225,51,0.086,79,0.012,80,0.012,85,1.93,89,2.262,95,1.701,359,2.798,597,2.089,614,2.181,615,3.095,801,4.15,853,4.325,854,4.617,855,5.324,856,5.324,857,5.324,858,5.324]],["title/controllers/GoogleAuthenticationController.html",[90,1.538,286,2.595]],["body/controllers/GoogleAuthenticationController.html",[3,0.193,4,0.173,5,0.154,9,0.341,10,1.281,13,1.517,15,1.458,20,0.538,22,1.067,23,0.015,24,0.948,25,0.388,26,0.71,31,0.986,36,0.436,37,1.646,40,0.65,50,0.193,51,0.055,53,1.401,75,0.986,79,0.011,80,0.011,90,1.79,92,1.869,95,1.458,200,3.02,201,2.371,202,2.475,214,2.821,218,3.826,223,2.821,224,3.956,226,3.956,230,3.556,282,4.05,286,3.923,300,3.556,859,4.62,860,3.956,861,4.562,862,5.926,863,5.138,864,4.562,865,4.612,866,4.562,867,5.926,868,3.956,869,3.956,870,3.956,871,4.562,872,4.562,873,4.562]],["title/injectables/GoogleAuthenticationService.html",[38,0.509,282,2.279]],["body/injectables/GoogleAuthenticationService.html",[3,0.122,4,0.109,5,0.097,9,0.215,10,0.928,11,1.35,13,2.125,15,1.372,19,4.068,20,0.671,22,1.004,23,0.015,24,0.892,25,0.436,26,0.668,31,0.928,36,0.4,37,2.055,38,0.558,39,1.905,40,0.41,41,1.496,46,2.656,47,2.244,50,0.122,51,0.035,52,1.496,53,1.578,54,2.056,55,2.496,57,2.213,59,3.715,63,1.496,64,1.615,65,1.579,66,2.496,67,1.517,72,1.579,73,2.536,75,0.928,79,0.008,80,0.008,85,1.268,86,2.015,87,1.673,180,1.579,193,0.92,201,2.232,202,1.932,213,1.353,281,3.734,282,2.496,287,1.579,295,1.905,309,1.905,310,3.199,315,1.905,318,1.494,319,1.78,409,1.233,500,2.056,655,3.4,656,3.125,657,3.4,682,3.77,772,2.056,776,2.496,804,1.905,826,2.244,849,3.067,863,4.454,865,4.033,869,2.496,870,2.496,874,5.284,875,2.496,876,5.137,877,6.391,878,5.137,879,4.295,880,4.295,881,2.878,882,2.878,883,2.878,884,5.137,885,2.496,886,2.878,887,2.878,888,4.295,889,2.878,890,2.878,891,2.878,892,2.878,893,4.295,894,2.496,895,2.878,896,2.878,897,2.878,898,2.878,899,2.878,900,4.295,901,2.496,902,2.878,903,2.878,904,2.878,905,2.878,906,2.878,907,2.878,908,2.878,909,2.878,910,2.496,911,2.878,912,2.878,913,2.878,914,2.878]],["title/modules/GoogleAuthticationModule.html",[103,1.158,915,2.8]],["body/modules/GoogleAuthticationModule.html",[3,0.214,4,0.192,5,0.171,23,0.015,36,0.418,40,0.722,50,0.214,51,0.061,79,0.012,80,0.012,92,2.597,103,2.043,105,2.172,106,2.172,107,2.504,108,2.504,109,2.274,110,3.415,111,2.504,121,3.13,122,2.504,123,2.504,282,4.422,286,4.578,300,3.954,302,4.398,682,3.357,859,3.954,868,4.398,915,5.434,916,4.398,917,5.072,918,5.072]],["title/interfaces/GoogleInterface.html",[81,1.935,623,2.595]],["body/interfaces/GoogleInterface.html",[3,0.221,4,0.199,5,0.176,9,0.392,23,0.015,25,0.622,50,0.221,79,0.012,80,0.012,81,2.582,83,3.463,85,1.909,86,2.874,88,2.033,623,4.278,655,4.849,656,4.019,657,4.849,919,4.536]],["title/classes/GoogleTokenDto.html",[51,0.047,865,2.595]],["body/classes/GoogleTokenDto.html",[3,0.235,4,0.211,5,0.187,9,0.416,20,0.656,23,0.015,25,0.473,36,0.336,50,0.235,51,0.081,59,4.188,79,0.013,80,0.013,85,1.982,88,1.696,95,1.777,597,2.182,614,2.278,641,3.953,865,4.441,920,5.818,921,4.822,922,5.562]],["title/injectables/HashingProvider.html",[38,0.509,280,2.151]],["body/injectables/HashingProvider.html",[3,0.197,4,0.177,5,0.157,9,0.349,10,1.299,20,0.708,22,1.405,23,0.015,24,1.249,25,0.511,26,0.935,31,1.299,32,3.009,36,0.282,38,0.78,40,0.664,50,0.197,51,0.056,79,0.011,80,0.011,88,1.96,178,2.422,193,1.49,204,3.329,280,3.297,304,6.567,324,5.211,325,5.211,326,5.211,327,5.767,329,5.211,330,5.767,332,4.042,333,3.634,683,3.634,923,4.042,924,4.661,925,4.661,926,6.009,927,4.661]],["title/modules/MailModule.html",[103,1.158,928,2.595]],["body/modules/MailModule.html",[3,0.165,4,0.148,5,0.131,23,0.015,36,0.457,37,1.406,40,0.555,41,2.025,50,0.165,51,0.047,64,1.465,76,1.669,79,0.01,80,0.01,103,1.797,105,1.669,106,1.669,107,1.924,108,1.924,109,1.747,110,3.003,111,3.003,121,2.634,122,1.924,123,1.924,127,2.265,130,4.159,138,3.379,139,3.531,140,2.783,172,3.379,174,3.379,201,2.025,318,0.911,381,1.832,721,3.299,761,3.379,795,2.58,928,4.795,929,3.379,930,3.379,931,3.379,932,5.099,933,3.897,934,5.335,935,3.379,936,3.897,937,5.275,938,3.038,939,3.897,940,3.897,941,5.335,942,3.897,943,5.335,944,3.897,945,3.897,946,3.897,947,3.897,948,3.897,949,3.897,950,3.897,951,3.897,952,3.897,953,3.897,954,3.897,955,3.897,956,3.897,957,3.897,958,3.897,959,3.897,960,3.379]],["title/injectables/MailProvider.html",[38,0.509,932,2.595]],["body/injectables/MailProvider.html",[3,0.186,4,0.167,5,0.148,9,0.329,10,1.251,11,1.7,13,1.464,15,1.85,20,0.682,22,1.354,23,0.015,24,1.428,25,0.492,26,0.901,30,2.913,31,0.951,32,1.885,36,0.415,37,1.588,38,0.752,40,0.627,50,0.186,51,0.053,53,1.352,67,1.3,79,0.011,80,0.011,86,1.727,139,2.913,140,3.143,193,1.406,196,2.722,202,2.432,318,1.607,395,2.722,852,5.019,932,3.832,937,3.816,938,3.431,961,3.816,962,6.469,963,4.401,964,6.872,965,4.401,966,4.401,967,4.401,968,4.401,969,4.401,970,4.401,971,4.401,972,4.401,973,4.401,974,4.401,975,5.789,976,3.816,977,4.401,978,4.401,979,4.401]],["title/classes/MatchPasswordsConstraint.html",[51,0.047,722,2.8]],["body/classes/MatchPasswordsConstraint.html",[3,0.116,4,0.104,5,0.092,9,0.205,10,0.894,11,0.719,20,0.487,22,0.967,23,0.015,24,1.239,25,0.612,26,0.643,31,0.894,36,0.379,50,0.116,51,0.067,52,2.149,57,0.948,62,3.559,75,1.077,76,2.134,79,0.008,80,0.008,86,1.622,88,1.903,89,1.726,178,3.484,259,2.133,341,2.133,349,2.61,369,1.954,381,1.286,382,1.351,389,2.737,394,1.073,467,1.121,512,2.886,597,1.073,601,3.645,606,2.133,609,1.954,610,3.223,612,3.688,614,1.121,615,1.59,631,3.259,641,2.268,650,2.268,651,3.885,652,1.954,653,2.133,654,4.321,655,1.811,656,1.501,657,1.811,658,3.559,660,2.373,661,2.373,664,4.888,665,3.585,666,3.585,667,3.585,668,4.321,669,2.373,672,2.373,674,2.373,676,2.373,677,1.954,681,2.373,682,2.737,683,2.133,686,2.373,687,2.133,691,2.373,692,2.373,693,2.373,694,2.373,695,2.373,696,2.373,697,2.373,698,3.585,699,2.373,700,2.373,701,2.373,705,2.953,706,2.373,707,3.585,708,3.585,709,4.321,710,5.645,711,3.585,712,5.813,713,1.954,714,2.133,715,3.585,716,2.133,717,2.373,718,2.133,719,2.373,720,2.373,721,2.557,722,2.953,723,3.585,724,4.815,725,2.953,726,2.133,727,2.373,728,3.585,729,2.133,730,2.373,731,3.585,732,2.373,733,2.373,734,3.885,735,3.585,736,2.373,737,2.133,738,4.321,739,2.373,740,2.373,741,2.737,742,2.133,743,2.373,744,2.373,980,4.135,981,2.736,982,2.736]],["title/entities/Message.html",[355,2.151,467,1.606]],["body/entities/Message.html",[3,0.149,4,0.134,5,0.119,9,0.264,20,0.831,23,0.015,25,0.63,26,0.775,36,0.379,50,0.149,51,0.043,76,2.684,79,0.009,80,0.009,85,1.471,88,1.734,95,2.253,318,1.604,349,3.44,353,2.751,355,2.732,356,2.521,359,2.471,363,4.318,364,5.004,366,4.498,376,4.886,379,4.886,380,4.886,381,2.341,382,1.742,386,5.435,387,4.886,389,3.82,392,5.004,394,1.385,467,2.04,636,4.121,637,5.141,638,4.36,648,3.06,983,3.06,984,4.498,985,5.771,986,4.98,987,4.98,988,3.53,989,3.53,990,3.53,991,3.53,992,4.98,993,3.53,994,3.53,995,3.53,996,2.751,997,3.53]],["title/controllers/MessageController.html",[90,1.538,998,2.8]],["body/controllers/MessageController.html",[3,0.122,4,0.109,5,0.205,9,0.216,10,0.93,11,1.914,20,0.672,22,1.333,23,0.015,24,1.185,25,0.484,26,0.887,31,1.232,36,0.4,40,0.411,43,1.784,50,0.122,51,0.035,53,0.886,64,1.617,66,1.676,67,1.684,75,1.232,79,0.008,80,0.008,82,3.128,87,1.676,88,1.759,90,1.131,92,1.181,95,1.822,101,1.784,200,1.909,213,2.68,214,3.181,218,2.5,219,2.248,318,1.426,359,2.442,406,2.235,409,2.203,410,2.66,414,3.772,438,1.909,439,2.059,440,3.772,443,1.582,445,1.909,467,2.852,468,2.847,484,2.847,490,2.059,576,4.009,631,1.499,632,4.098,638,2.66,804,1.909,910,3.729,984,3.353,998,3.071,999,2.501,1000,4.301,1001,2.884,1002,2.884,1003,2.884,1004,4.459,1005,2.501,1006,4.301,1007,2.884,1008,4.944,1009,2.501,1010,4.301,1011,2.884,1012,3.353,1013,2.501,1014,4.508,1015,4.301,1016,2.884,1017,4.301,1018,2.989,1019,2.501,1020,2.248,1021,3.071,1022,2.501,1023,3.353,1024,2.884,1025,2.501,1026,2.884,1027,2.884,1028,2.884,1029,2.884,1030,2.884,1031,2.884,1032,2.884,1033,2.884,1034,2.884,1035,2.884,1036,2.884,1037,2.884,1038,2.884,1039,2.884]],["title/modules/MessageModule.html",[103,1.158,117,2.595]],["body/modules/MessageModule.html",[3,0.186,4,0.167,5,0.148,23,0.015,36,0.458,40,0.625,50,0.186,51,0.053,79,0.011,80,0.011,92,2.367,103,1.908,105,1.879,106,1.879,107,2.166,108,2.166,109,1.967,110,3.189,111,3.189,117,5.074,121,2.852,122,2.166,123,2.166,127,2.55,135,3.134,136,1.879,318,1.351,349,2.715,353,3.421,467,1.798,568,4.256,569,2.714,716,3.421,998,4.613,1018,4.562,1019,3.805,1040,3.805,1041,3.805,1042,3.805,1043,4.388,1044,3.805,1045,4.388,1046,3.805,1047,4.388]],["title/injectables/MessageService.html",[38,0.509,1018,2.279]],["body/injectables/MessageService.html",[3,0.08,4,0.071,5,0.198,9,0.141,10,0.665,11,1.751,13,1.5,15,0.983,20,0.587,22,1.163,23,0.015,24,1.034,25,0.423,26,0.774,31,0.975,32,2.608,36,0.395,37,1.628,38,0.4,40,0.268,50,0.08,51,0.023,53,0.578,57,2.222,63,2.93,64,2.29,65,1.032,67,1.85,72,1.032,73,1.928,75,0.975,79,0.006,80,0.006,82,2.73,88,1.583,136,0.805,193,0.601,196,1.163,303,1.466,318,1.318,349,2.862,359,2.131,382,0.928,394,1.207,395,1.163,406,2.029,409,2.288,410,1.903,414,3.304,440,2.79,443,1.032,445,1.245,467,2.809,468,3.294,478,3.256,484,3.536,490,1.343,494,1.631,495,1.466,497,1.093,498,1.631,499,1.163,500,3.815,508,4.314,527,1.631,549,2.668,568,3.42,569,1.163,576,3.044,579,1.343,593,2.197,632,3.874,636,2.789,638,3.077,726,1.466,729,1.466,770,1.631,984,4.396,996,1.466,1004,1.631,1005,2.668,1008,3.912,1009,2.668,1012,3.044,1013,1.631,1014,3.895,1018,1.788,1020,1.466,1021,2.197,1022,1.631,1023,2.398,1044,1.631,1046,1.631,1048,1.631,1049,1.881,1050,4.512,1051,4.512,1052,1.881,1053,3.077,1054,3.077,1055,1.881,1056,3.912,1057,2.668,1058,1.881,1059,1.881,1060,1.881,1061,3.077,1062,1.881,1063,1.881,1064,1.881,1065,3.077,1066,3.077,1067,1.631,1068,3.077,1069,3.905,1070,1.881,1071,1.881,1072,1.881,1073,1.881,1074,4.512,1075,1.881,1076,3.077,1077,1.881,1078,1.881,1079,1.881,1080,1.881,1081,1.881,1082,1.881,1083,1.881,1084,1.631,1085,1.881,1086,1.631,1087,1.881,1088,3.386,1089,1.881,1090,1.881,1091,1.881,1092,1.881,1093,1.881,1094,1.881,1095,1.631,1096,3.077,1097,1.881,1098,3.077,1099,1.881,1100,1.881,1101,1.881]],["title/classes/Paginated.html",[51,0.047,1102,2.8]],["body/classes/Paginated.html",[3,0.217,4,0.194,5,0.173,9,0.384,20,0.819,23,0.015,25,0.636,50,0.217,51,0.062,79,0.012,80,0.012,85,1.884,88,1.613,89,1.774,511,3.994,597,2.01,677,3.659,795,4.224,835,3.994,1102,4.557,1103,4.443,1104,5.417,1105,6.025,1106,5.124,1107,4.557,1108,5.124,1109,5.124,1110,5.124,1111,5.124,1112,4.443,1113,5.124,1114,5.124,1115,5.124,1116,5.124,1117,5.124]],["title/modules/PaginationModule.html",[103,1.158,118,2.595]],["body/modules/PaginationModule.html",[3,0.214,4,0.192,5,0.17,23,0.015,36,0.382,40,0.72,50,0.214,51,0.061,79,0.012,80,0.012,92,2.071,103,1.869,105,2.165,106,2.165,107,2.495,108,2.495,109,2.266,110,3.409,111,3.123,118,5.106,121,3.123,122,2.495,123,2.495,127,2.938,1118,4.383,1119,4.383,1120,4.383,1121,5.274,1122,5.055,1123,5.055,1124,5.055,1125,5.055]],["title/injectables/PaginationProvider.html",[38,0.509,1121,2.595]],["body/injectables/PaginationProvider.html",[3,0.137,4,0.123,5,0.109,9,0.242,10,1.011,11,1.444,13,1.075,15,1.495,20,0.551,22,1.285,23,0.015,24,0.972,25,0.467,26,0.728,31,0.699,32,2.003,34,3.714,36,0.402,37,1.166,38,0.607,40,0.46,43,1.999,50,0.137,51,0.039,53,0.993,57,2.436,64,1.216,67,1.381,75,0.699,79,0.009,80,0.009,89,1.619,147,2.14,193,1.033,202,2.066,218,2.718,394,1.268,409,1.384,454,4.23,478,3.321,511,2.52,593,3.924,677,2.308,687,2.52,784,2.52,795,2.14,835,2.52,1102,3.34,1104,2.52,1105,2.803,1112,4.765,1121,3.096,1126,2.803,1127,5.495,1128,3.233,1129,3.233,1130,3.233,1131,4.301,1132,3.233,1133,3.233,1134,3.233,1135,3.233,1136,3.233,1137,3.233,1138,3.233,1139,3.233,1140,3.233,1141,3.233,1142,4.677,1143,4.677,1144,3.233,1145,3.233,1146,2.308,1147,6.022,1148,7.034,1149,3.233,1150,2.803,1151,4.677,1152,3.233,1153,3.233,1154,4.677,1155,3.233,1156,3.233,1157,3.233,1158,3.233,1159,3.233,1160,2.803,1161,3.233,1162,3.233,1163,3.233,1164,3.233,1165,3.233,1166,3.233,1167,5.495,1168,3.233,1169,3.233,1170,3.233,1171,4.677,1172,3.233,1173,3.233,1174,3.233,1175,3.233,1176,3.233,1177,3.233,1178,3.233,1179,3.233]],["title/classes/PaginationQueryDto.html",[51,0.047,1131,2.8]],["body/classes/PaginationQueryDto.html",[3,0.21,4,0.188,5,0.167,9,0.371,20,0.736,23,0.015,25,0.531,26,1.118,36,0.299,50,0.21,51,0.076,79,0.012,80,0.012,85,1.845,89,2.163,95,1.996,381,2.936,454,4.135,539,5.417,597,1.944,612,4.232,614,2.03,741,4.135,1131,4.462,1146,4.462,1180,5.933,1181,4.296,1182,4.87,1183,6.248,1184,4.954,1185,4.954,1186,6.843,1187,4.954,1188,4.954]],["title/classes/RefreshTokenDto.html",[51,0.047,206,2.425]],["body/classes/RefreshTokenDto.html",[3,0.233,4,0.21,5,0.186,9,0.413,20,0.651,23,0.015,25,0.469,36,0.333,50,0.233,51,0.081,79,0.012,80,0.012,85,1.973,88,1.688,95,1.764,203,5.129,206,4.131,597,2.166,601,3.882,614,2.262,641,3.665,646,4.303,1189,4.787,1190,5.521]],["title/injectables/RefreshTokensProvider.html",[38,0.509,283,2.425]],["body/injectables/RefreshTokensProvider.html",[3,0.15,4,0.135,5,0.12,9,0.266,10,1.082,11,1.522,13,2.091,15,1.599,17,5.715,18,4.516,19,4.49,20,0.59,22,1.17,23,0.015,24,1.04,25,0.425,26,0.779,31,0.768,36,0.427,37,2.268,38,0.65,40,0.506,41,1.847,42,2.198,46,2.198,50,0.15,51,0.043,53,1.931,54,2.539,57,1.733,59,2.909,62,2.539,67,1.711,68,3.082,75,0.768,79,0.009,80,0.009,87,2.066,180,1.95,193,1.136,202,2.178,206,4.099,213,1.671,225,2.771,228,2.353,281,3.45,283,3.095,287,1.95,295,2.353,309,2.353,310,3.39,315,2.353,317,2.771,318,1.17,319,2.198,804,2.353,827,2.771,830,3.082,837,3.082,839,2.771,841,2.771,842,3.082,843,3.082,844,3.082,845,3.082,846,3.082,849,3.574,901,3.082,1191,5.023,1192,5.005,1193,5.452,1194,5.005,1195,3.555,1196,3.555,1197,3.555,1198,3.555,1199,3.082]],["title/interfaces/RequestWithUser.html",[81,1.935,422,2.8]],["body/interfaces/RequestWithUser.html",[3,0.139,4,0.125,5,0.111,9,0.246,11,0.864,23,0.015,25,0.472,26,0.737,34,3.226,36,0.405,40,0.468,43,2.034,50,0.139,51,0.04,53,1.01,57,1.64,67,0.971,75,1.493,79,0.009,80,0.009,81,1.624,83,2.177,85,1.399,86,1.29,87,1.912,88,0.831,89,2.447,90,1.29,101,2.034,214,2.929,216,2.564,217,2.564,218,2.753,231,2.564,318,1.567,346,3.226,348,2.177,352,2.564,359,3.083,381,2.226,405,2.564,406,2.884,407,2.349,408,2.852,410,2.034,413,2.852,414,2.034,416,5.047,417,2.852,420,3.226,421,5.579,422,4.336,426,2.852,432,2.852,435,3.755,436,2.852,438,2.177,439,2.349,440,2.034,441,2.852,442,5.509,443,1.805,444,3.382,445,2.177,446,2.852,447,2.852,448,2.852,449,3.135,450,2.852,451,2.852,452,2.852,453,4.107,454,4.019,455,4.107,456,2.852,457,2.852,458,2.852,459,2.852,460,4.812,461,2.852,462,2.852,463,2.852,464,2.852,465,2.852,466,2.852,467,1.348,468,2.177,469,2.852,470,2.564,471,4.107,472,2.852,473,2.852,1107,3.382]],["title/interfaces/ServerToClientEvents.html",[81,1.935,1200,3.056]],["body/interfaces/ServerToClientEvents.html",[3,0.25,4,0.224,5,0.199,23,0.015,50,0.25,66,3.437,79,0.013,80,0.013,81,2.919,83,3.914,467,2.422,1200,5.425,1201,4.223,1202,5.127,1203,5.127,1204,5.913]],["title/classes/SignInDto.html",[51,0.047,210,2.425]],["body/classes/SignInDto.html",[3,0.221,4,0.199,5,0.176,9,0.392,20,0.762,23,0.015,25,0.549,36,0.316,50,0.221,51,0.078,79,0.012,80,0.012,85,1.909,86,2.752,88,1.852,95,2.065,178,3.645,210,3.997,597,2.052,601,3.757,614,2.143,641,3.848,646,4.078,705,4.616,1205,4.536,1206,5.231,1207,5.231,1208,5.231]],["title/injectables/SignInProvider.html",[38,0.509,284,2.425]],["body/injectables/SignInProvider.html",[3,0.147,4,0.132,5,0.117,9,0.26,10,1.064,11,1.503,13,1.902,15,1.573,20,0.58,22,1.151,23,0.015,24,1.023,25,0.418,26,0.766,31,0.751,36,0.397,37,1.253,38,0.639,39,2.298,40,0.494,50,0.147,51,0.042,53,1.757,63,3.234,64,2.151,65,1.905,67,1.689,72,1.905,73,2.823,75,0.751,79,0.009,80,0.009,178,2.972,180,1.905,193,1.11,202,2.151,204,3.516,209,3.838,210,4.063,213,1.632,222,2.707,228,3.786,280,3.849,281,3.414,284,3.045,287,1.905,295,2.298,309,2.298,310,3.369,315,2.298,318,1.455,319,2.147,333,3.838,547,2.707,631,1.805,721,2.147,725,2.48,752,2.707,765,2.707,772,3.516,839,2.707,849,2.48,1057,3.011,1193,5.395,1199,3.011,1209,4.959,1210,3.011,1211,3.472,1212,3.472,1213,3.472,1214,3.472,1215,3.472,1216,4.923,1217,4.923,1218,3.472,1219,5.719,1220,3.472,1221,3.472,1222,3.472,1223,3.472,1224,3.472]],["title/classes/UpdateChatRoomDto.html",[51,0.047,435,2.425]],["body/classes/UpdateChatRoomDto.html",[3,0.239,4,0.214,5,0.19,23,0.015,36,0.409,50,0.239,51,0.068,79,0.013,80,0.013,258,4.401,406,3.518,409,2.418,420,3.281,435,4.187,444,4.032,449,4.481,597,2.215,599,4.401,802,4.401,803,4.895,1225,4.895,1226,6.77]],["title/classes/UpdateMessageDto.html",[51,0.047,1014,2.595]],["body/classes/UpdateMessageDto.html",[3,0.212,4,0.191,5,0.169,9,0.376,20,0.592,23,0.015,25,0.427,36,0.416,50,0.212,51,0.076,79,0.012,80,0.012,85,1.861,89,2.182,95,1.604,359,2.949,409,2.15,414,3.896,449,4.17,467,2.581,597,1.97,614,2.057,631,2.609,632,3.105,634,3.914,641,3.457,713,3.586,799,4.353,801,4.911,802,3.914,1014,4.17,1023,3.914,1227,5.463,1228,6.3,1229,6.3,1230,5.021]],["title/entities/User.html",[318,0.917,355,2.151]],["body/entities/User.html",[3,0.122,4,0.109,5,0.097,9,0.215,20,0.82,23,0.015,25,0.602,26,1.102,36,0.4,50,0.122,51,0.062,76,2.915,79,0.008,80,0.008,85,1.268,86,2.015,88,1.79,89,1.487,95,2.223,178,2.67,318,1.004,349,3.112,355,2.356,356,2.056,359,2.2,362,2.056,366,4.005,368,6.032,369,4.564,370,4.44,376,5.306,379,2.244,380,4.44,381,2.018,382,1.421,387,3.348,389,2.843,390,3.724,391,3.724,394,1.129,401,3.724,406,1.496,407,2.056,467,2.788,512,1.496,542,2.496,612,3.177,614,1.179,615,1.673,653,4.005,655,3.4,656,2.818,657,3.4,658,4.861,714,2.244,721,3.523,737,3.348,742,2.244,996,2.244,1012,4.005,1104,2.244,1231,2.496,1232,2.878,1233,2.878,1234,2.878,1235,2.878,1236,2.878,1237,4.295,1238,2.878,1239,2.878,1240,2.878,1241,2.878,1242,4.295,1243,2.878,1244,2.878,1245,2.878,1246,2.878,1247,4.295,1248,4.295,1249,4.295,1250,5.137,1251,2.878,1252,2.878,1253,2.496]],["title/controllers/UserController.html",[90,1.538,126,2.595]],["body/controllers/UserController.html",[3,0.141,4,0.127,5,0.112,9,0.25,10,1.034,20,0.72,22,1.428,23,0.015,24,1.269,25,0.519,26,0.95,31,1.32,36,0.419,40,0.475,50,0.141,51,0.04,53,1.024,64,1.798,75,1.32,79,0.009,80,0.009,89,2.501,90,1.308,92,1.366,95,1.952,101,2.061,126,3.165,200,2.206,201,1.732,202,2.818,214,2.061,215,2.89,218,2.779,219,2.598,223,2.061,230,2.598,232,2.89,247,2.89,310,2.628,359,2.048,362,2.38,438,3.701,439,3.415,440,3.458,442,4.762,443,1.829,650,3.693,748,3.727,750,2.598,754,3.415,796,4.455,853,4.455,1146,4.362,1182,4.762,1254,2.89,1255,4.146,1256,4.781,1257,5.591,1258,3.333,1259,3.333,1260,2.89,1261,3.333,1262,3.333,1263,3.333,1264,3.333,1265,4.781,1266,3.333,1267,3.333,1268,3.333,1269,2.89,1270,2.89,1271,2.89,1272,3.333,1273,3.333,1274,3.333,1275,3.333,1276,3.333,1277,3.333,1278,3.333,1279,3.333,1280,3.333,1281,3.333,1282,3.333,1283,3.333,1284,3.333,1285,3.333]],["title/modules/UserModule.html",[103,1.158,119,2.425]],["body/modules/UserModule.html",[3,0.159,4,0.143,5,0.127,23,0.015,36,0.459,40,0.535,50,0.159,51,0.046,79,0.01,80,0.01,86,1.475,92,2.132,103,1.763,105,1.61,106,1.61,107,1.856,108,1.856,109,1.686,110,2.947,111,2.947,115,3.219,119,4.871,121,2.57,122,1.856,123,1.856,126,3.952,127,3.025,135,2.685,136,1.61,287,2.856,310,3.599,318,0.879,512,2.705,617,4.328,656,2.063,745,4.328,753,2.489,809,4.328,820,4.328,928,4.632,1269,3.26,1286,3.26,1287,3.76,1288,3.26,1289,3.26,1290,3.76,1291,3.76,1292,3.76,1293,3.26,1294,5.205,1295,3.76,1296,3.76,1297,3.76,1298,3.76]],["title/injectables/UserService.html",[38,0.509,310,1.843]],["body/injectables/UserService.html",[3,0.098,4,0.088,5,0.078,9,0.174,10,0.788,11,1.938,13,1.841,15,1.165,20,0.771,22,1.529,23,0.015,24,1.359,25,0.556,26,1.017,31,1.375,32,2.182,36,0.419,37,0.838,38,0.473,40,0.331,50,0.098,51,0.028,53,1.565,67,1.329,75,1.375,76,0.995,79,0.007,80,0.007,86,1.43,88,1.484,89,2.4,136,0.995,193,0.743,202,2.865,213,2.76,310,1.714,318,0.853,355,1.275,359,2.37,394,0.912,409,0.995,410,2.783,443,1.275,470,1.812,478,2.648,479,2.255,497,1.351,499,1.437,500,2.604,512,1.895,617,3.798,619,3.162,620,1.539,622,3.162,623,3.373,625,2.015,650,3.037,656,2,745,3.798,748,2.842,750,2.842,753,1.539,754,2.604,796,3.664,805,2.015,809,3.798,816,2.842,820,3.798,822,3.162,824,3.162,853,3.887,1146,3.213,1182,3.507,1255,3.162,1260,3.162,1270,2.015,1271,2.015,1293,2.015,1299,2.015,1300,3.646,1301,3.646,1302,3.646,1303,2.324,1304,2.324,1305,2.324,1306,2.324,1307,3.646,1308,2.324,1309,2.324,1310,2.324,1311,2.324,1312,3.646,1313,2.324,1314,3.646,1315,2.324,1316,2.324,1317,2.324,1318,2.324,1319,2.324,1320,2.324,1321,2.324,1322,2.324,1323,3.646,1324,2.324,1325,3.646,1326,2.324,1327,3.646,1328,2.324,1329,3.646,1330,2.324,1331,2.324,1332,2.324,1333,2.324]],["title/guards/WebSocketGuardGuard.html",[0,2.595,1334,3.056]],["body/guards/WebSocketGuardGuard.html",[2,2.776,3,0.164,4,0.148,5,0.131,9,0.291,10,1.151,12,5.336,20,0.628,22,1.245,23,0.015,24,1.107,25,0.452,26,0.828,27,3.03,28,4.325,30,3.525,31,1.151,32,2.281,36,0.395,38,0.691,40,0.553,44,4.338,45,2.573,50,0.164,51,0.047,52,2.02,57,2.37,59,2.259,66,3.095,75,1.313,76,1.665,79,0.01,80,0.01,201,2.02,238,3.03,240,5.268,454,3.525,721,2.404,725,3.803,841,3.03,894,3.37,1334,4.151,1335,5.268,1336,5.954,1337,5.268,1338,5.326,1339,3.887,1340,5.326,1341,3.887,1342,4.151,1343,3.887,1344,3.03,1345,3.887,1346,3.887,1347,3.887,1348,3.887,1349,3.887,1350,5.326,1351,3.887,1352,3.887,1353,3.887,1354,3.887,1355,3.887,1356,3.887,1357,3.887]],["title/modules/WebSocketModule.html",[103,1.158,120,2.595]],["body/modules/WebSocketModule.html",[3,0.249,4,0.224,5,0.198,23,0.015,36,0.356,40,0.839,50,0.249,51,0.071,79,0.013,80,0.013,103,2.05,105,2.522,120,4.596,158,5.107,1201,4.206,1358,5.89]],["title/classes/WebsocketGateway.html",[51,0.047,160,2.8]],["body/classes/WebsocketGateway.html",[3,0.138,4,0.123,5,0.11,9,0.244,10,1.016,11,1.887,15,1.04,20,0.755,22,1.412,23,0.015,24,1.255,25,0.599,26,0.94,31,1.192,36,0.403,50,0.138,51,0.039,52,2.442,53,0.999,57,1.127,66,3.511,67,0.961,76,1.393,79,0.009,80,0.009,82,2.578,85,1.388,88,1.394,95,1.502,101,2.012,160,4.314,180,1.785,318,0.761,382,1.606,467,2.26,484,3.11,597,1.276,636,2.323,637,3.356,638,2.906,1018,4,1020,2.536,1056,2.821,1088,4.074,1107,3.356,1201,4.768,1336,5.682,1342,4.3,1344,2.536,1359,2.821,1360,5.516,1361,5.516,1362,5.789,1363,4.699,1364,4.699,1365,4.699,1366,3.254,1367,4.699,1368,5.516,1369,4.699,1370,3.254,1371,4.699,1372,3.254,1373,4.699,1374,4.699,1375,3.254,1376,3.254,1377,2.821,1378,3.254,1379,2.821,1380,3.254,1381,3.254,1382,4.699,1383,4.699,1384,4.699,1385,3.254,1386,3.254,1387,3.254,1388,3.254,1389,3.254,1390,3.254,1391,3.254,1392,3.254,1393,3.254,1394,3.254,1395,3.254]],["title/coverage.html",[1396,4.645]],["body/coverage.html",[0,3.03,1,1.476,5,0.08,6,2.07,7,1.58,8,2.07,23,0.015,25,0.316,38,0.968,48,1.861,51,0.087,64,0.898,79,0.007,80,0.007,81,2.552,82,1.31,84,2.07,90,2.33,91,1.705,93,2.07,98,1.476,109,1.07,125,1.58,126,1.58,148,1.705,150,1.861,160,1.705,192,1.705,194,2.07,199,2.07,201,1.241,206,1.476,210,1.476,220,1.476,237,2.07,238,2.902,248,1.861,280,1.31,281,1.31,282,1.388,283,1.476,284,1.476,286,1.58,288,1.705,308,2.07,310,1.122,318,0.558,323,2.07,346,1.388,348,1.58,349,1.122,355,2.511,357,2.07,370,1.861,405,2.902,406,1.935,420,1.388,422,1.705,435,1.476,467,0.978,474,2.07,512,1.935,568,1.388,569,2.303,572,2.07,598,2.07,599,2.902,617,1.476,618,2.07,623,1.58,632,1.476,633,2.07,634,2.902,650,1.31,651,2.902,652,3.269,722,1.705,745,1.476,746,2.07,747,2.07,779,2.07,780,2.07,781,2.07,796,1.58,797,2.07,809,1.476,810,2.902,811,2.07,820,1.476,821,2.07,826,1.861,827,2.902,853,1.58,854,2.07,859,1.861,860,2.07,865,1.58,874,2.07,875,2.07,919,2.07,920,2.07,921,2.07,923,2.07,932,1.58,961,2.07,983,2.07,998,1.705,999,2.07,1014,1.58,1018,1.388,1021,1.705,1048,2.07,1095,6.989,1102,1.705,1103,2.07,1121,1.58,1126,2.07,1131,1.705,1180,2.07,1181,2.07,1189,2.07,1191,2.07,1200,1.861,1201,2.659,1202,2.07,1203,2.07,1205,2.07,1209,2.07,1210,2.07,1225,2.07,1227,2.07,1231,2.07,1253,2.07,1254,2.07,1299,2.07,1334,1.861,1335,2.07,1336,2.902,1337,2.07,1359,2.07,1396,2.07,1397,2.07,1398,2.387,1399,2.387,1400,4.577,1401,4.577,1402,7.355,1403,3.228,1404,5.939,1405,7.072,1406,2.07,1407,2.07,1408,6.203,1409,5.605,1410,5.17,1411,2.902,1412,2.902,1413,2.07,1414,2.387,1415,1.861,1416,2.387,1417,3.723,1418,2.07,1419,2.07,1420,2.07,1421,2.07,1422,2.387,1423,3.723,1424,2.387,1425,2.387,1426,2.387,1427,2.387,1428,2.387]],["title/dependencies.html",[106,2.02,1429,2.836]],["body/dependencies.html",[23,0.015,40,0.664,41,2.422,42,2.883,43,2.883,45,3.085,51,0.073,79,0.011,80,0.011,106,1.996,136,1.996,139,3.085,140,3.329,147,3.085,201,2.422,334,4.042,394,1.829,579,3.329,614,1.91,615,2.709,682,3.085,713,3.329,885,4.042,938,3.634,1025,5.211,1344,4.685,1377,4.042,1430,4.661,1431,4.661,1432,4.661,1433,6.009,1434,4.661,1435,6.009,1436,6.651,1437,4.661,1438,4.661,1439,4.661,1440,4.661,1441,4.661,1442,4.661,1443,4.661,1444,4.661,1445,4.661,1446,4.661,1447,4.661,1448,4.661,1449,4.661,1450,4.661,1451,4.661,1452,4.661,1453,4.661,1454,4.661,1455,4.661,1456,4.661,1457,4.661,1458,4.661]],["title/miscellaneous/enumerations.html",[1459,1.795,1460,4.09]],["body/miscellaneous/enumerations.html",[5,0.213,9,0.377,13,2.1,23,0.015,25,0.536,79,0.012,80,0.012,223,3.905,318,1.476,378,4.509,635,5.474,637,4.509,638,3.905,658,4.509,741,5.204,1379,4.368,1459,2.764,1460,4.368,1461,5.038,1462,5.038,1463,5.038,1464,6.314,1465,5.038,1466,5.038,1467,5.038,1468,5.038,1469,5.038,1470,6.314,1471,6.314,1472,5.038,1473,6.314,1474,6.314]],["title/miscellaneous/functions.html",[1459,1.795,1475,4.09]],["body/miscellaneous/functions.html",[9,0.459,23,0.013,79,0.013,80,0.013,109,3.365,1421,5.316,1459,3.364,1475,5.316,1476,6.131]],["title/index.html",[9,0.245,1477,2.836,1478,2.836]],["body/index.html",[4,0.146,23,0.014,34,2.236,41,1.999,51,0.064,64,1.447,79,0.01,80,0.01,90,1.509,103,1.136,106,1.648,131,3.336,136,1.648,139,3.5,180,2.111,196,2.379,303,2.999,381,2.485,394,2.075,409,1.648,478,1.999,614,1.576,615,2.236,664,2.999,718,2.999,804,2.546,935,3.336,960,3.336,976,4.585,1067,3.336,1084,3.336,1086,3.336,1150,3.336,1160,4.585,1362,3.336,1397,3.336,1477,3.336,1478,3.336,1479,6.821,1480,3.847,1481,3.847,1482,3.847,1483,3.847,1484,3.847,1485,3.847,1486,3.847,1487,7.048,1488,3.847,1489,5.288,1490,5.288,1491,3.847,1492,3.847,1493,3.847,1494,3.847,1495,6.042,1496,5.288,1497,3.847,1498,6.821,1499,3.847,1500,3.847,1501,3.847,1502,3.847,1503,3.847,1504,3.847,1505,3.847,1506,3.847,1507,3.847,1508,3.847,1509,3.847,1510,3.847,1511,3.847,1512,3.847,1513,3.847,1514,3.847,1515,3.847,1516,3.847,1517,3.847,1518,3.847,1519,3.847,1520,3.847,1521,5.288,1522,3.847,1523,3.847,1524,3.847,1525,5.288,1526,5.288,1527,3.847,1528,3.847,1529,3.847,1530,3.847,1531,3.847,1532,5.288,1533,6.042,1534,3.847,1535,3.847,1536,3.847,1537,3.847,1538,3.847,1539,3.847,1540,3.847,1541,3.847,1542,5.288,1543,3.847,1544,3.847,1545,3.847,1546,3.847,1547,3.847,1548,5.288,1549,3.847,1550,3.847,1551,4.585,1552,3.847,1553,3.847,1554,3.847]],["title/modules.html",[105,2.294]],["body/modules.html",[23,0.012,79,0.012,80,0.012,104,3.736,105,2.24,115,3.235,116,3.463,117,3.463,118,3.463,119,3.235,120,3.463,564,3.736,915,3.736,928,3.463,1555,7.913,1556,7.913,1557,7.913,1558,7.964,1559,5.231,1560,5.231]],["title/overview.html",[1561,4.645]],["body/overview.html",[2,2.177,23,0.015,79,0.008,80,0.008,83,2.018,92,1.249,98,3.286,103,0.9,104,5.496,105,1.305,106,1.305,107,1.505,108,1.505,109,1.366,110,1.505,111,1.505,112,2.643,113,2.643,114,2.643,115,4.676,116,4.465,117,4.581,118,4.319,119,4.707,120,3.517,121,2.212,122,1.505,123,1.505,193,0.974,220,4.172,277,2.643,278,2.643,279,2.643,280,3.214,281,2.915,282,3.404,283,3.286,284,3.286,310,3.17,337,2.643,343,2.643,344,2.643,345,2.643,346,3.921,356,2.177,564,4.457,565,2.643,566,2.643,567,2.643,568,4.022,597,1.196,617,3.286,745,3.286,809,3.286,820,3.286,915,4.183,916,2.643,928,4.319,929,2.643,930,2.643,931,2.643,932,4.465,1018,3.921,1040,2.643,1041,2.643,1042,2.643,1118,2.643,1119,2.643,1120,2.643,1121,4.465,1286,2.643,1288,2.643,1289,2.643,1561,2.643,1562,3.048,1563,4.481,1564,3.048,1565,3.048,1566,3.048]],["title/properties.html",[85,1.393,1429,2.836]],["body/properties.html",[23,0.015,79,0.013,80,0.013,85,1.789,631,3.147,1551,5.251,1567,6.056,1568,6.056,1569,6.056,1570,6.056]],["title/miscellaneous/typealiases.html",[1459,1.795,1571,4.717]],["body/miscellaneous/typealiases.html",[9,0.452,23,0.013,25,0.598,79,0.013,80,0.013,1107,4.308,1411,4.702,1412,5.488,1415,5.488,1459,3.309,1572,6.032,1573,5.23]],["title/miscellaneous/variables.html",[1459,1.795,1574,4.09]],["body/miscellaneous/variables.html",[9,0.304,23,0.015,25,0.528,28,2.692,34,2.363,37,1.467,48,4.281,57,1.902,65,2.231,70,3.526,72,2.231,73,2.007,75,1.344,79,0.01,80,0.01,82,3.013,88,1.388,130,4.847,170,3.526,190,3.17,201,3.231,223,3.845,248,4.281,318,1.454,381,3.368,382,2.007,569,2.515,579,2.904,581,3.526,582,3.526,584,3.526,586,3.526,734,4.281,741,4.743,784,3.17,1021,3.922,1342,3.17,1403,3.526,1406,3.526,1407,3.526,1411,3.17,1412,4.281,1413,4.762,1415,3.17,1418,3.526,1419,4.762,1420,4.762,1459,2.231,1573,3.526,1574,3.526,1575,4.066,1576,4.066,1577,5.492,1578,4.066,1579,4.066,1580,4.066,1581,4.066,1582,4.066,1583,4.066,1584,4.066,1585,4.066,1586,4.066,1587,4.066,1588,4.066,1589,4.066,1590,4.066]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1095,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1568,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1405,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1402,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":454,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"guards/WebSocketGuardGuard.html":{}}}],["1.1.23",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["1/2",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{},"overview.html":{}}}],["10.0.0",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":370,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{},"coverage.html":{}}}],["11.0.0",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1565,"title":{},"body":{"overview.html":{}}}],["150",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["19",{"_index":1564,"title":{},"body":{"overview.html":{}}}],["2",{"_index":539,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/PaginationQueryDto.html":{}}}],["2.0.2",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["2.5.1",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["225",{"_index":1237,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1563,"title":{},"body":{"overview.html":{}}}],["3.1.10",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["34",{"_index":1161,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["4",{"_index":1566,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["5.0.2",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1562,"title":{},"body":{"overview.html":{}}}],["6.9.13",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["8.13.1",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["9!@#$%^&*]{8,16",{"_index":696,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["9.15.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["9])[a",{"_index":693,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["_",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["access",{"_index":246,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstoken",{"_index":847,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["activate",{"_index":269,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["active",{"_index":1004,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["activeuser",{"_index":1021,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":82,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":958,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":515,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["adduser",{"_index":408,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["adduser(id",{"_index":415,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["addusertochatroom",{"_index":475,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["addusertochatroom(chatroomid",{"_index":482,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["admin",{"_index":1473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alias",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1572,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphabets",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["already",{"_index":517,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["alt",{"_index":1543,"title":{},"body":{"index.html":{}}}],["always",{"_index":1526,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":686,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["api_key",{"_index":584,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["api_secret",{"_index":586,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":712,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apiproperty({type",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiversrion:'0.0.1",{"_index":793,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["app.controller",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1514,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1508,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1515,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["app_interceptor",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appcontroller",{"_index":91,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1495,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":104,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":98,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":724,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["args.object",{"_index":727,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":259,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array.isarray(authorisation",{"_index":1354,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["array.isarray(guard",{"_index":263,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["assert",{"_index":942,"title":{},"body":{"modules/MailModule.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["audience",{"_index":843,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["audio",{"_index":635,"title":{},"body":{"classes/CreateMessageDto.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UserController.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtypes.none",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["auth(authtypes.none)@useinterceptors(classserializerinterceptor)@post",{"_index":1258,"title":{},"body":{"controllers/UserController.html":{}}}],["auth.controller",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":448,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.controller",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/authconfig/jwt.config",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":861,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guard/access",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/auth",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":447,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/social/interfaces/user.interface",{"_index":627,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["auth_type_key",{"_index":248,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig/jwt.config",{"_index":837,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["authcontroller",{"_index":125,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":863,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":872,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(googltokendto",{"_index":864,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication",{"_index":862,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.controller.ts",{"_index":860,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":866,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.service.ts",{"_index":875,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:11",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:30",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:36",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authguardguard",{"_index":148,"title":{"guards/AuthGuardGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["authguardguard.defaultauthtype",{"_index":256,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authmodule",{"_index":115,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1570,"title":{},"body":{"properties.html":{}}}],["authorisation",{"_index":1352,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authorisation.split",{"_index":1356,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authorisation[0].split",{"_index":1355,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authservice",{"_index":220,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtication.module.ts",{"_index":918,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["authtypeguardmap",{"_index":239,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtypes.bearer",{"_index":249,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.map((type",{"_index":260,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.none",{"_index":252,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authurisation",{"_index":1349,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["auto",{"_index":592,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["autogenerated",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["autoloadentities",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":399,"title":{},"body":{"entities/ChatRoom.html":{}}}],["available",{"_index":1560,"title":{},"body":{"modules.html":{}}}],["await",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["badrequestexception",{"_index":495,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"injectables/MessageService.html":{}}}],["badrequestexception('cannot",{"_index":557,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('file",{"_index":1081,"title":{},"body":{"injectables/MessageService.html":{}}}],["badrequestexception('no",{"_index":1099,"title":{},"body":{"injectables/MessageService.html":{}}}],["badrequestexception('one",{"_index":536,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('private",{"_index":540,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('user",{"_index":771,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["baseurl",{"_index":1154,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(inppassword",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":288,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["before",{"_index":1086,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["bind",{"_index":305,"title":{},"body":{"modules/AuthModule.html":{}}}],["blog",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":725,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["bootstrap",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1480,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1525,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1558,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1555,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1548,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":785,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["cascade",{"_index":387,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["catch((err",{"_index":274,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["cause",{"_index":766,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["cd",{"_index":1493,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1527,"title":{},"body":{"index.html":{}}}],["character",{"_index":701,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["chat",{"_index":406,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatmodule",{"_index":116,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatroom",{"_index":349,"title":{"entities/ChatRoom.html":{}},"body":{"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatroom.controller",{"_index":351,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.entity",{"_index":350,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{}}}],["chatroom.id",{"_index":987,"title":{},"body":{"entities/Message.html":{}}}],["chatroom.name",{"_index":545,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.ownerid",{"_index":550,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.type",{"_index":537,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users",{"_index":542,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatroom.users)@jointable",{"_index":1233,"title":{},"body":{"entities/User.html":{}}}],["chatroom.users.filter(user",{"_index":562,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.length",{"_index":561,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.push(user",{"_index":558,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomcontroller",{"_index":348,"title":{"controllers/ChatRoomController.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["chatroomid",{"_index":484,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["chatroomrepository",{"_index":481,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["chatrooms/chatroom.entity",{"_index":996,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["chatrooms/chatrooms.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["chatroomservice",{"_index":346,"title":{"injectables/ChatRoomService.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["chatroomsrepo",{"_index":1050,"title":{},"body":{"injectables/MessageService.html":{}}}],["chatroomtype",{"_index":378,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatroomtype.group",{"_index":398,"title":{},"body":{"entities/ChatRoom.html":{}}}],["chatroomtype.private",{"_index":538,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["check",{"_index":547,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["class",{"_index":51,"title":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"classes/WebsocketGateway.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":597,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"classes/WebsocketGateway.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["cleanup",{"_index":402,"title":{},"body":{"entities/ChatRoom.html":{}}}],["cli",{"_index":1482,"title":{},"body":{"index.html":{}}}],["client",{"_index":1342,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["client.handshake.headers",{"_index":1350,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["client.id",{"_index":1384,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["client_id",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_secret",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clients",{"_index":1394,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["clone",{"_index":1489,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":582,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["cloudinary",{"_index":579,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MessageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cloudinary.config",{"_index":581,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["cloudinary.service",{"_index":571,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":590,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinarymodule",{"_index":564,"title":{"modules/CloudinaryModule.html":{}},"body":{"modules/CloudinaryModule.html":{},"modules.html":{},"overview.html":{}}}],["cloudinaryprovider",{"_index":1420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cloudinaryservice",{"_index":568,"title":{"injectables/CloudinaryService.html":{}},"body":{"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":343,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":345,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":344,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule",{"_index":565,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule_exports",{"_index":567,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule_providers",{"_index":566,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule",{"_index":916,"title":{},"body":{"modules/GoogleAuthticationModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule_providers",{"_index":917,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["cluster_mailmodule",{"_index":929,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":931,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":930,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":1040,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":1041,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":1042,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1118,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1119,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1120,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1286,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1289,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1287,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1288,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1504,"title":{},"body":{"index.html":{}}}],["column",{"_index":389,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["column('varchar",{"_index":368,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["column({name",{"_index":375,"title":{},"body":{"entities/ChatRoom.html":{}}}],["column({type",{"_index":379,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["commands",{"_index":1547,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1533,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":1541,"title":{},"body":{"index.html":{}}}],["common/pagination.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["comparepasswords",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(password",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":927,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{}}}],["config",{"_index":935,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["config.get('mail_host",{"_index":949,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_port",{"_index":951,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_password",{"_index":954,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_username",{"_index":952,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_api_key",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_api_secret",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_cloud_name",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database.autoload",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.blog",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":1518,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1513,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["confirmpassword",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["conflictexception",{"_index":626,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":630,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["connected",{"_index":1383,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["connecting",{"_index":765,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["connection",{"_index":1510,"title":{},"body":{"index.html":{}}}],["conpare",{"_index":1218,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["console.error(\"google",{"_index":913,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.error('file",{"_index":1080,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log(\"google",{"_index":899,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"instance",{"_index":271,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(\"received",{"_index":892,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log('before",{"_index":791,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('cloudinary",{"_index":1078,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('incoming",{"_index":1075,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('message",{"_index":1085,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('received",{"_index":1386,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["console.log('saved",{"_index":1089,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('show",{"_index":257,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(`client",{"_index":1382,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["console.log(baseurl",{"_index":1159,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(canactivate",{"_index":276,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(getuserparamdto",{"_index":1278,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(newurl",{"_index":1165,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(payload",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log(sender",{"_index":1072,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log(user",{"_index":1032,"title":{},"body":{"controllers/MessageController.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["constructor(@injectrepository(user",{"_index":815,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["constructor(chatroomrepository",{"_index":477,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(mailerservice",{"_index":963,"title":{},"body":{"injectables/MailProvider.html":{}}}],["constructor(messageservice",{"_index":1366,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["constructor(messagesrepo",{"_index":1049,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(private",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["constructor(reflector",{"_index":242,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["constructor(request",{"_index":1128,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":620,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["containg",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["contains",{"_index":1512,"title":{},"body":{"index.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["context.getclass",{"_index":255,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gethandler",{"_index":254,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gettype",{"_index":1346,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["context.switchtows().getclient",{"_index":1348,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["controller",{"_index":90,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":871,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('chat",{"_index":450,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('message",{"_index":1026,"title":{},"body":{"controllers/MessageController.html":{}}}],["controller('users",{"_index":1273,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["correct",{"_index":1083,"title":{},"body":{"injectables/MessageService.html":{}}}],["correctly",{"_index":1087,"title":{},"body":{"injectables/MessageService.html":{}}}],["cors",{"_index":1381,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["coverage",{"_index":1396,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":409,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":452,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["create(createchatroomdto",{"_index":419,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["create(createmessagedto",{"_index":1054,"title":{},"body":{"injectables/MessageService.html":{}}}],["create(user",{"_index":1001,"title":{},"body":{"controllers/MessageController.html":{}}}],["createchatroomdto",{"_index":420,"title":{"classes/CreateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["createchatroomdto.name",{"_index":523,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.type",{"_index":524,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.includes(currentuserid",{"_index":514,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.length",{"_index":505,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.map(id",{"_index":502,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createdat",{"_index":358,"title":{},"body":{"entities/ChatRoom.html":{}}}],["createdatecolumn",{"_index":364,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["creategoogleuser",{"_index":619,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":622,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":617,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createmessagedto",{"_index":632,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":1251,"title":{},"body":{"entities/User.html":{}}}],["createuserdto",{"_index":650,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":758,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":775,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":745,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":748,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createusers(@body",{"_index":1280,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":750,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":511,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1173,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["currentpage:number",{"_index":1113,"title":{},"body":{"classes/Paginated.html":{}}}],["currentuser",{"_index":519,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["currentuserid",{"_index":485,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["custum",{"_index":717,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["data",{"_index":795,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"modules/MailModule.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data.length",{"_index":794,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["data:t",{"_index":1110,"title":{},"body":{"classes/Paginated.html":{}}}],["database",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["databaseconfig",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":192,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":363,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["db",{"_index":1057,"title":{},"body":{"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["declarations",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["decorators/auth.decorator",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeppartial",{"_index":1061,"title":{},"body":{"injectables/MessageService.html":{}}}],["default",{"_index":381,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":241,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["defaultmessage",{"_index":980,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["defaultmessage(args",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["defaultvaluepipe",{"_index":1267,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1277,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(20",{"_index":1275,"title":{},"body":{"controllers/UserController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["delete",{"_index":440,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":462,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["delete(':id')@httpcode(httpstatus.ok",{"_index":429,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':id/users/:userid",{"_index":432,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["delete(':messageid",{"_index":1006,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(@param('messageid",{"_index":1036,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(messageid",{"_index":1005,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["deleted",{"_index":470,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{}}}],["deleteuser",{"_index":1255,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":1282,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1260,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":106,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1213,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["description",{"_index":631,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"properties.html":{}}}],["development",{"_index":1497,"title":{},"body":{"index.html":{}}}],["dir",{"_index":956,"title":{},"body":{"modules/MailModule.html":{}}}],["directly",{"_index":1067,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["disconnected",{"_index":1385,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["documentation",{"_index":1397,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesnt",{"_index":1214,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["double",{"_index":1536,"title":{},"body":{"index.html":{}}}],["dto",{"_index":1228,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["dtos/create",{"_index":443,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/getuserparamdto",{"_index":1271,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":869,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1270,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/refreshtokendto",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/update",{"_index":445,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{}}}],["dtos/userdto",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["during",{"_index":926,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["each",{"_index":606,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["edit",{"_index":805,"title":{},"body":{"classes/EditUserDto.html":{},"injectables/UserService.html":{}}}],["edit.email",{"_index":1329,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.firstname",{"_index":1323,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.lastname",{"_index":1325,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.password",{"_index":1327,"title":{},"body":{"injectables/UserService.html":{}}}],["editedpost",{"_index":1256,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(@body",{"_index":1284,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(edituserdto",{"_index":1262,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":1300,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser(edituserdto",{"_index":1307,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto",{"_index":796,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto.email",{"_index":1330,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.firstname",{"_index":1324,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.id",{"_index":1322,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.lastname",{"_index":1326,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.password",{"_index":1328,"title":{},"body":{"injectables/UserService.html":{}}}],["ejs",{"_index":938,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":943,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.ts",{"_index":811,"title":{},"body":{"injectables/FindOneByEmail.html":{},"coverage.html":{}}}],["email.ts:11",{"_index":814,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["email.ts:8",{"_index":812,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["emit",{"_index":1392,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["encrypassword",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end(file.buffer",{"_index":596,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["enforced",{"_index":1486,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":729,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{}}}],["entities",{"_index":356,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":355,"title":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity('chat_rooms",{"_index":397,"title":{},"body":{"entities/ChatRoom.html":{}}}],["entry",{"_index":1506,"title":{},"body":{"index.html":{}}}],["enum",{"_index":380,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["enum/message",{"_index":648,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{}}}],["enumerations",{"_index":1460,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtypes.enum",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/chatroomtype",{"_index":396,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{}}}],["enums/userrole.enum",{"_index":714,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["env.development",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":275,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["error",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["everything",{"_index":808,"title":{},"body":{"classes/EditUserDto.html":{}}}],["exactly",{"_index":541,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["example",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["exception",{"_index":912,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["exclude",{"_index":1247,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column('varchar",{"_index":1244,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":772,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["existinguser",{"_index":757,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exits",{"_index":756,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expiresin",{"_index":834,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["exports",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":1125,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":576,"title":{},"body":{"injectables/CloudinaryService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["extends",{"_index":449,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{}}}],["extract",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1082,"title":{},"body":{"injectables/MessageService.html":{}}}],["fails",{"_index":909,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["false",{"_index":721,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"guards/WebSocketGuardGuard.html":{}}}],["family_name",{"_index":903,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fatima",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatimaaminu@mail.com",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fetch",{"_index":818,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["field",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"miscellaneous/variables.html":{}}}],["field'})@isemail()@maxlength(150)@column({unique",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isnotempty()@maxlength(100",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isoptional()@maxlength(100",{"_index":688,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fields",{"_index":543,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileinterceptor",{"_index":1024,"title":{},"body":{"controllers/MessageController.html":{}}}],["fileurl",{"_index":636,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["finalresponse",{"_index":1171,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":500,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":410,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{}}}],["findall(@param('chatroomid",{"_index":1034,"title":{},"body":{"controllers/MessageController.html":{}}}],["findall(chatroomid",{"_index":1009,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["findall(getuserparamdto",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{}}}],["finding",{"_index":528,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["findone",{"_index":411,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findone(@param('id",{"_index":458,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["findone(id",{"_index":425,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findonebyemail",{"_index":809,"title":{"injectables/FindOneByEmail.html":{}},"body":{"injectables/FindOneByEmail.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemail(email",{"_index":813,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["findonebygoogleid",{"_index":822,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":824,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":820,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1301,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["fire",{"_index":268,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["first",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["flat",{"_index":265,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["folder",{"_index":1511,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":496,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["forbiddenexception('you",{"_index":551,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["form",{"_index":936,"title":{},"body":{"modules/MailModule.html":{}}}],["forwardref",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UserModule.html":{}}}],["found",{"_index":508,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["function",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1475,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":849,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1193,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":828,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":831,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":281,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1265,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':chatroomid",{"_index":1010,"title":{},"body":{"controllers/MessageController.html":{}}}],["get(':id",{"_index":426,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":1302,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":1314,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1477,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserparamdto",{"_index":853,"title":{"classes/GetuserParamDto.html":{}},"body":{"classes/GetuserParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getusers",{"_index":1257,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1264,"title":{},"body":{"controllers/UserController.html":{}}}],["git",{"_index":1491,"title":{},"body":{"index.html":{}}}],["give",{"_index":1162,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["given_name",{"_index":902,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":934,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":682,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/MatchPasswordsConstraint.html":{},"dependencies.html":{}}}],["google'})@isstring()@isoptional()@maxlength(225",{"_index":684,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["googleauthenticationcontroller",{"_index":286,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":282,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthticationmodule",{"_index":915,"title":{"modules/GoogleAuthticationModule.html":{}},"body":{"modules/GoogleAuthticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleid",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["googleid.ts",{"_index":821,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["googleid.ts:15",{"_index":825,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleid.ts:7",{"_index":823,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleinterface",{"_index":623,"title":{"interfaces/GoogleInterface.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["googletokendto",{"_index":865,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":893,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":625,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["googleuserprovider",{"_index":1316,"title":{},"body":{"injectables/UserService.html":{}}}],["googltokendto",{"_index":867,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["grab",{"_index":1197,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["graph",{"_index":1559,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["guard.guard.ts",{"_index":238,"title":{},"body":{"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:22",{"_index":1341,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["guard.guard.ts:24",{"_index":244,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:31",{"_index":245,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:8",{"_index":1339,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["guard/access",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard/auth",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard/web",{"_index":1337,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{},"overview.html":{}}}],["handle",{"_index":770,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MessageService.html":{}}}],["handleconnection",{"_index":1363,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handleconnection(client",{"_index":1369,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect",{"_index":1364,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect(client",{"_index":1371,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage",{"_index":1365,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage(client",{"_index":1373,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handles",{"_index":400,"title":{},"body":{"entities/ChatRoom.html":{}}}],["hash",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":773,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashing",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":280,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(inppassword",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["having",{"_index":767,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["header",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":198,"title":{},"body":{"injectables/AppService.html":{}}}],["helpdesk",{"_index":972,"title":{},"body":{"injectables/MailProvider.html":{}}}],["host",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hot",{"_index":1499,"title":{},"body":{"index.html":{}}}],["http",{"_index":1152,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["http://localhost:3000",{"_index":979,"title":{},"body":{"injectables/MailProvider.html":{}}}],["http://localhost:3000/resource",{"_index":1151,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpcode",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["httpcode(httpstatus.ok",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["https://github.com/phertyameen/realtimechat.git",{"_index":1492,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["httpstatus.ok",{"_index":466,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["i.e",{"_index":1150,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["id",{"_index":359,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id?:number",{"_index":858,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["identifier",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["idtoken",{"_index":898,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":1471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["implementation",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{}}}],["in.provider",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1210,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":1211,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:32",{"_index":1212,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":697,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["included",{"_index":518,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["incorrect",{"_index":1217,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["initialusercount",{"_index":560,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["inject",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["inject(forwardref",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":1137,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["injectrepository",{"_index":497,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["injectrepository(chatroom",{"_index":498,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["injectrepository(message",{"_index":1064,"title":{},"body":{"injectables/MessageService.html":{}}}],["injectrepository(user",{"_index":499,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":959,"title":{},"body":{"modules/MailModule.html":{}}}],["inppassword",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["install",{"_index":1490,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1488,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1516,"title":{},"body":{"index.html":{}}}],["instance",{"_index":270,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instance.canactivate(context",{"_index":273,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instead",{"_index":1535,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1520,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":782,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":783,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":81,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["interface/activeinterface",{"_index":838,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces",{"_index":83,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"overview.html":{}}}],["interfaces/paginatedinterface",{"_index":1136,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["isarray",{"_index":610,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isarray()@isnumber",{"_index":605,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["ischeckedpassword",{"_index":1219,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isemail",{"_index":705,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1206,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":609,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(chatroomtype",{"_index":616,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(chatroomtype)@isoptional",{"_index":603,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(messagetype",{"_index":649,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isenum(userrole",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(userrole)@isoptional()@transform",{"_index":703,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":801,"title":{},"body":{"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isint()@isnotempty",{"_index":799,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isint()@type(undefined",{"_index":855,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["isnotempty",{"_index":641,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isnumber",{"_index":613,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isoptional",{"_index":612,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{}}}],["isoptional()@isenum(messagetype",{"_index":644,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isoptional()@ispositive",{"_index":1183,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@manytomany(undefined",{"_index":1232,"title":{},"body":{"entities/User.html":{}}}],["isoptional()@onetomany(undefined",{"_index":1241,"title":{},"body":{"entities/User.html":{}}}],["isoptional,isint",{"_index":857,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["ispositive",{"_index":1186,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":601,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":646,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isoptional",{"_index":639,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["issuer",{"_index":845,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["issues",{"_index":769,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["isuuid",{"_index":611,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["items",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["itemsperpage",{"_index":1172,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["itemsperpage:number",{"_index":1111,"title":{},"body":{"classes/Paginated.html":{}}}],["join",{"_index":939,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":957,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":393,"title":{},"body":{"entities/ChatRoom.html":{}}}],["jointable",{"_index":391,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["jsonwebtoken",{"_index":1345,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["junction",{"_index":1252,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":901,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtauthguard",{"_index":446,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfigurattion",{"_index":878,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtmodule",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["keyboard",{"_index":1539,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":687,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/PaginationProvider.html":{}}}],["last:string",{"_index":1115,"title":{},"body":{"classes/Paginated.html":{}}}],["lastname",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["later",{"_index":764,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["legend",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":369,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["letter",{"_index":698,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["library",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1551,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1552,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1182,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["limit?:number",{"_index":1187,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["line",{"_index":1160,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["link",{"_index":1104,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["literal",{"_index":1107,"title":{},"body":{"classes/Paginated.html":{},"interfaces/RequestWithUser.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":1343,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["logger.log({authorisation",{"_index":1353,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["logger.log({authurisation",{"_index":1351,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["login",{"_index":1224,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":896,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":900,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":978,"title":{},"body":{"injectables/MailProvider.html":{}}}],["loop",{"_index":266,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["lowercase",{"_index":699,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["lts",{"_index":1485,"title":{},"body":{"index.html":{}}}],["lts.1",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["mac",{"_index":1545,"title":{},"body":{"index.html":{}}}],["made",{"_index":403,"title":{},"body":{"entities/ChatRoom.html":{}}}],["mailer",{"_index":968,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailermodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":946,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":964,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailerservice:mailerservice",{"_index":969,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailmodule",{"_index":928,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprovider",{"_index":932,"title":{"injectables/MailProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1503,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":1505,"title":{},"body":{"index.html":{}}}],["make",{"_index":509,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["makes",{"_index":807,"title":{},"body":{"classes/EditUserDto.html":{}}}],["management",{"_index":1519,"title":{},"body":{"index.html":{}}}],["many",{"_index":1250,"title":{},"body":{"entities/User.html":{}}}],["manytomany",{"_index":390,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":384,"title":{},"body":{"entities/ChatRoom.html":{}}}],["manytoone",{"_index":392,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["manytoone(undefined",{"_index":986,"title":{},"body":{"entities/Message.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":372,"title":{},"body":{"entities/ChatRoom.html":{}}}],["map",{"_index":788,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((type",{"_index":262,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["match",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches",{"_index":707,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matching",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchpasswords",{"_index":720,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matchpasswordsconstraint",{"_index":722,"title":{"classes/MatchPasswordsConstraint.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["math.ceil(totalitems",{"_index":1168,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":706,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(100",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(150",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(225",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["members",{"_index":516,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["merging",{"_index":1531,"title":{},"body":{"index.html":{}}}],["message",{"_index":467,"title":{"entities/Message.html":{}},"body":{"controllers/ChatRoomController.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["message.dto",{"_index":1023,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":634,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:10",{"_index":647,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:11",{"_index":1230,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:14",{"_index":640,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:18",{"_index":643,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:22",{"_index":645,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":642,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.entity",{"_index":1044,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["message.interface.ts",{"_index":1203,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["message.sender",{"_index":1242,"title":{},"body":{"entities/User.html":{}}}],["message.service",{"_index":1378,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["message.text",{"_index":1101,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagecontroller",{"_index":998,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"coverage.html":{}}}],["messageid",{"_index":1008,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["messagemodule",{"_index":117,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messagerepo",{"_index":1063,"title":{},"body":{"injectables/MessageService.html":{}}}],["messages",{"_index":1012,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["messages.controller",{"_index":1045,"title":{},"body":{"modules/MessageModule.html":{}}}],["messages/messages.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["messageservice",{"_index":1018,"title":{"injectables/MessageService.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"overview.html":{}}}],["messagesmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["messagesrepo",{"_index":1053,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagetype",{"_index":637,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["messagetype.file",{"_index":1390,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["messagetype.text",{"_index":997,"title":{},"body":{"entities/Message.html":{}}}],["met",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["meta",{"_index":1105,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["miscellaneous",{"_index":1459,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1554,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":1474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":103,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"index.html":{},"overview.html":{}}}],["module,forwardref",{"_index":1123,"title":{},"body":{"modules/PaginationModule.html":{}}}],["modules",{"_index":105,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":944,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":762,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":507,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["multer",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["multi",{"_index":1532,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["nest",{"_index":1481,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":787,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":803,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["nestjs/platform",{"_index":1025,"title":{},"body":{"controllers/MessageController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":713,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":1377,"title":{},"body":{"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["network",{"_index":768,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["new",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["newmessage",{"_index":1204,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["newurl",{"_index":1157,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&${totalpage",{"_index":1175,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${nextpage",{"_index":1177,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${paginationquerydto.page",{"_index":1176,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${prevpage",{"_index":1179,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=1",{"_index":1174,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":776,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["next",{"_index":784,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["next(error",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next.handle().pipe(map((data",{"_index":792,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next:string",{"_index":1117,"title":{},"body":{"classes/Paginated.html":{}}}],["nextpage",{"_index":1169,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1484,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":264,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["notfoundexception",{"_index":494,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["notfoundexception('chat",{"_index":1066,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('message",{"_index":1096,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('one",{"_index":506,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception('sender",{"_index":1073,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception(`chat",{"_index":530,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`user",{"_index":556,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["now",{"_index":455,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["npm",{"_index":1487,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":376,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["number",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":503,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["number(userid",{"_index":555,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["oauth2client",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(client_id",{"_index":891,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":876,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":726,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{}}}],["object.password",{"_index":728,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["objectliteral",{"_index":1135,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{}}}],["ondelete",{"_index":386,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["one",{"_index":512,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1248,"title":{},"body":{"entities/User.html":{}}}],["ongatewayconnection",{"_index":1360,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["ongatewaydisconnect",{"_index":1361,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["onmoduleinit",{"_index":877,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1528,"title":{},"body":{"index.html":{}}}],["option",{"_index":960,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["out",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":1028,"title":{},"body":{"controllers/MessageController.html":{}}}],["overview",{"_index":1561,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":360,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["owner_id",{"_index":373,"title":{},"body":{"entities/ChatRoom.html":{}}}],["ownerid",{"_index":361,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["package",{"_index":1429,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1517,"title":{},"body":{"index.html":{}}}],["page",{"_index":1146,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["page?:number",{"_index":1188,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginated",{"_index":1102,"title":{"classes/Paginated.html":{}},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":1127,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(paginationquerydto",{"_index":1130,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1133,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination/provider/pagination.provider",{"_index":1124,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":118,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1121,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":1131,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1147,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto.page",{"_index":1148,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto:paginationquerydto",{"_index":1139,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["param",{"_index":439,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":460,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["param('messageid",{"_index":1038,"title":{},"body":{"controllers/MessageController.html":{}}}],["param('userid",{"_index":471,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["parseintpipe",{"_index":442,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["part",{"_index":806,"title":{},"body":{"classes/EditUserDto.html":{}}}],["partialtype",{"_index":802,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{}}}],["partialtype(createchatroomdto",{"_index":1226,"title":{},"body":{"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createmessagedto",{"_index":1229,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["partialtype(createuserdto",{"_index":798,"title":{},"body":{"classes/EditUserDto.html":{}}}],["participants",{"_index":513,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["pass",{"_index":953,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["passwords",{"_index":719,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":438,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":436,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["patch(':messageid",{"_index":1015,"title":{},"body":{"controllers/MessageController.html":{}}}],["path",{"_index":940,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"interfaces/ServerToClientEvents.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["payload.chatroomid",{"_index":1389,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["payload.text",{"_index":1388,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["payload.user",{"_index":1391,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["per",{"_index":1145,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["permission",{"_index":552,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["permissions",{"_index":548,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["pg",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":789,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["please",{"_index":763,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["point",{"_index":1507,"title":{},"body":{"index.html":{}}}],["poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["port",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["post('/refreshtoken",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@auth(authtypes.none)@httpcode(httpstatus.ok)@useinterceptors(classserializerinterceptor",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/users/:userid",{"_index":417,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@useinterceptors(undefined",{"_index":1002,"title":{},"body":{"controllers/MessageController.html":{}}}],["postgres",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["prerequisites",{"_index":1483,"title":{},"body":{"index.html":{}}}],["present",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["previous",{"_index":1178,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["previous:string",{"_index":1116,"title":{},"body":{"classes/Paginated.html":{}}}],["prevpage",{"_index":1170,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":366,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":761,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["process.env.cloudinary_api_key",{"_index":585,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":587,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":583,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["project",{"_index":1479,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{}}}],["promise((resolve",{"_index":588,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":848,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":272,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"properties.html":{}}}],["property",{"_index":1031,"title":{},"body":{"controllers/MessageController.html":{}}}],["provide",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":549,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["provider",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider.ts",{"_index":1419,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provider/cloudinary",{"_index":1418,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provider/cloudinary.module.ts",{"_index":570,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["provider/cloudinary.service",{"_index":1046,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["provider/cloudinary.service.ts",{"_index":572,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["provider/cloudinary.service.ts:15",{"_index":577,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["provider/cloudinary.service.ts:6",{"_index":574,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["provider/create",{"_index":1292,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/find",{"_index":1294,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/googleuserprovider",{"_index":1296,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/message.service",{"_index":1019,"title":{},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{}}}],["provider/user.service",{"_index":1269,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/chatrooms/chatrooms.service",{"_index":352,"title":{},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["providers/generate",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":868,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["providers/hashing",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.provider",{"_index":945,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/refresh",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pull",{"_index":1529,"title":{},"body":{"index.html":{}}}],["push",{"_index":1524,"title":{},"body":{"index.html":{}}}],["query",{"_index":1268,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":1274,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1276,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":1134,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1181,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1184,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:14",{"_index":1185,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["realtimechat",{"_index":976,"title":{},"body":{"injectables/MailProvider.html":{},"index.html":{}}}],["realtimechat.com",{"_index":973,"title":{},"body":{"injectables/MailProvider.html":{}}}],["record",{"_index":250,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["reflect",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":243,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["refresh",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtoken",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":206,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1196,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokenprovider",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1192,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1194,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":283,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["reject",{"_index":589,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":594,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["relations",{"_index":527,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["relationship",{"_index":401,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["reload",{"_index":1500,"title":{},"body":{"index.html":{}}}],["remove",{"_index":412,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["remove(@param('id",{"_index":463,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["remove(id",{"_index":428,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["removeuser",{"_index":413,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["removeuser(id",{"_index":431,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuserfromchatroom",{"_index":476,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removeuserfromchatroom(chatroomid",{"_index":491,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removing",{"_index":559,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["reply",{"_index":955,"title":{},"body":{"modules/MailModule.html":{}}}],["repo",{"_index":839,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["repository",{"_index":478,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1166,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1141,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository:repository",{"_index":1140,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":421,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user?.sub",{"_index":453,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request:request",{"_index":1138,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request[request_user_key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":752,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception('could",{"_index":817,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["requesttimeoutexception(error",{"_index":1223,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["requesturl",{"_index":1149,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requestwithuser",{"_index":422,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["reset",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve(result",{"_index":595,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resource_type",{"_index":591,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response.interceptor.ts",{"_index":781,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":786,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":780,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":593,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{}}}],["result.affected",{"_index":1094,"title":{},"body":{"injectables/MessageService.html":{}}}],["results",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":1090,"title":{},"body":{"injectables/MessageService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["review",{"_index":1530,"title":{},"body":{"index.html":{}}}],["room",{"_index":468,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{}}}],["room.dto",{"_index":444,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{}}}],["room.dto.ts",{"_index":599,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:11",{"_index":604,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:17",{"_index":608,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:7",{"_index":602,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["rooms",{"_index":407,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["root",{"_index":1509,"title":{},"body":{"index.html":{}}}],["routes",{"_index":1000,"title":{},"body":{"controllers/MessageController.html":{}}}],["rules",{"_index":1523,"title":{},"body":{"index.html":{}}}],["run",{"_index":1498,"title":{},"body":{"index.html":{}}}],["running",{"_index":1494,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["saltrounds",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["save",{"_index":1056,"title":{},"body":{"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["save/log",{"_index":759,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["saved",{"_index":1393,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["savedmessage",{"_index":1088,"title":{},"body":{"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["secret",{"_index":841,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["secure",{"_index":950,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":910,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{}}}],["sender",{"_index":984,"title":{},"body":{"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["senderid",{"_index":1029,"title":{},"body":{"controllers/MessageController.html":{}}}],["sent",{"_index":895,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["server",{"_index":1362,"title":{},"body":{"classes/WebsocketGateway.html":{},"index.html":{}}}],["servertoclientevents",{"_index":1200,"title":{"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["service",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"index.html":{}}}],["set",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["setmetadata(auth_type_key",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shift",{"_index":1542,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":1540,"title":{},"body":{"index.html":{}}}],["show",{"_index":1144,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sign",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":210,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1221,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":284,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":829,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":833,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signup",{"_index":683,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["single",{"_index":1091,"title":{},"body":{"injectables/MessageService.html":{}}}],["skip",{"_index":1142,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slash",{"_index":1537,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["socket",{"_index":1336,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket.io",{"_index":1344,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["socket.middleware.ts",{"_index":1412,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["socket.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["socket.module.ts",{"_index":1358,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["socket/interfaces/websockets",{"_index":1202,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["socket/web",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{}}}],["socket/websocketevents/websocket.gateway",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["socket/websocketevents/websocket.gateway.ts",{"_index":1359,"title":{},"body":{"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket/websocketevents/websocket.gateway.ts:12",{"_index":1367,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:16",{"_index":1370,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:20",{"_index":1372,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:25",{"_index":1375,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socketauthmiddleware",{"_index":1413,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["socketiomiddleware",{"_index":1415,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["special",{"_index":700,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["src",{"_index":1502,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constant.ts",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtypes.enum.ts",{"_index":1461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../chatroomtype.ts",{"_index":1462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cloudinary",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../message",{"_index":1463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../userrole.enum.ts",{"_index":1465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../web",{"_index":1573,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:8",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1297,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/authconfig/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constant",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1403,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator",{"_index":1022,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1406,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1272,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refreshtokendto.ts",{"_index":1189,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refreshtokendto.ts:6",{"_index":1190,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dtos/userdto.ts",{"_index":1205,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/userdto.ts:10",{"_index":1208,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/userdto.ts:6",{"_index":1207,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtypes.enum",{"_index":247,"title":{},"body":{"guards/AuthGuardGuard.html":{},"controllers/UserController.html":{}}}],["src/auth/enums/authtypes.enum.ts",{"_index":1466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guard/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth",{"_index":237,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["src/auth/guard/web",{"_index":1335,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["src/auth/interface/activeinterface",{"_index":1020,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["src/auth/interface/activeinterface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/middlewares/web",{"_index":1411,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:32",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.ts",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.ts:16",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.ts:8",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":826,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing",{"_index":755,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.ts",{"_index":923,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.ts:6",{"_index":925,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.ts:9",{"_index":924,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1191,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1209,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":920,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":859,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["src/auth/social/interfaces/user.interface",{"_index":1317,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/social/interfaces/user.interface.ts",{"_index":919,"title":{},"body":{"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":874,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts",{"_index":405,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts:35",{"_index":423,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:41",{"_index":424,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:46",{"_index":427,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:51",{"_index":437,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:60",{"_index":430,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:71",{"_index":418,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:79",{"_index":433,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.entity",{"_index":716,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"modules/MessageModule.html":{}}}],["src/chatrooms/chatroom.entity.ts",{"_index":357,"title":{},"body":{"entities/ChatRoom.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.entity.ts:11",{"_index":371,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:18",{"_index":383,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:23",{"_index":388,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:27",{"_index":374,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:30",{"_index":377,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:33",{"_index":365,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:8",{"_index":367,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatrooms.module.ts",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chatrooms/dtos/create",{"_index":598,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/dtos/update",{"_index":1225,"title":{},"body":{"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/enums/chatroomtype.ts",{"_index":1469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts",{"_index":474,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:115",{"_index":483,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:12",{"_index":480,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:134",{"_index":492,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:20",{"_index":486,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:50",{"_index":487,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:57",{"_index":488,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:71",{"_index":493,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:97",{"_index":489,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/cloudinary",{"_index":569,"title":{},"body":{"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/cloudinary/cloudinary.service",{"_index":1062,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/common/interceptor/data",{"_index":779,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination.module.ts",{"_index":1122,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts",{"_index":1103,"title":{},"body":{"classes/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:11",{"_index":1108,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:4",{"_index":1106,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:5",{"_index":1109,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/pagination",{"_index":1180,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts",{"_index":1126,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:10",{"_index":1129,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:18",{"_index":1132,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module",{"_index":1295,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":933,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.provider.ts",{"_index":961,"title":{},"body":{"injectables/MailProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mail.provider.ts:15",{"_index":967,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/mail/providers/mail.provider.ts:8",{"_index":965,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/main.ts",{"_index":1421,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/dtos/create",{"_index":633,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/messages/dtos/update",{"_index":1227,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/messages/enum/message",{"_index":1379,"title":{},"body":{"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["src/messages/message.entity",{"_index":1249,"title":{},"body":{"entities/User.html":{}}}],["src/messages/message.entity.ts",{"_index":983,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/messages/message.entity.ts:15",{"_index":990,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:18",{"_index":988,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:21",{"_index":993,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:24",{"_index":991,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:27",{"_index":994,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:30",{"_index":989,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:33",{"_index":995,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/messages.controller.ts",{"_index":999,"title":{},"body":{"controllers/MessageController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:30",{"_index":1003,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:45",{"_index":1011,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:53",{"_index":1007,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:61",{"_index":1016,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.module.ts",{"_index":1043,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/messages/provider/message.service",{"_index":1380,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["src/messages/provider/message.service.ts",{"_index":1048,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/messages/provider/message.service.ts:114",{"_index":1059,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:124",{"_index":1058,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:134",{"_index":1060,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:19",{"_index":1052,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:62",{"_index":1055,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/users/dtos/create",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts",{"_index":854,"title":{},"body":{"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts:8",{"_index":856,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["src/users/dtos/patch",{"_index":797,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/provider/create",{"_index":746,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/find",{"_index":810,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts",{"_index":618,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts:17",{"_index":624,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/googleuserprovider.ts:8",{"_index":621,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/user.service",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/provider/user.service.ts",{"_index":1299,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/provider/user.service.ts:15",{"_index":1303,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:32",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:40",{"_index":1305,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:44",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:48",{"_index":1315,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:52",{"_index":1306,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:58",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:71",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:75",{"_index":1304,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.controller.ts",{"_index":1254,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:27",{"_index":1266,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:39",{"_index":1259,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:44",{"_index":1261,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:49",{"_index":1263,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.entitly",{"_index":395,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{}}}],["src/users/user.entitly.ts",{"_index":1231,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entitly.ts:12",{"_index":1239,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:15",{"_index":1236,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:18",{"_index":1240,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:21",{"_index":1235,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:25",{"_index":1245,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:28",{"_index":1246,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:31",{"_index":1238,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:37",{"_index":1234,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:42",{"_index":1243,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.module",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/user.module.ts",{"_index":1290,"title":{},"body":{"modules/UserModule.html":{}}}],["src/web",{"_index":1201,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["start",{"_index":1496,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1501,"title":{},"body":{"index.html":{}}}],["started",{"_index":1478,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":240,"title":{},"body":{"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["statuscode",{"_index":465,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["step",{"_index":908,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["strict",{"_index":941,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1084,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{}}}],["subject",{"_index":974,"title":{},"body":{"injectables/MailProvider.html":{}}}],["subscribemessage",{"_index":1376,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage('sendmessage",{"_index":1374,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["successfully",{"_index":469,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["support",{"_index":1556,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":510,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["svg",{"_index":1557,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":1534,"title":{},"body":{"index.html":{}}}],["t",{"_index":835,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1253,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1143,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["tap",{"_index":790,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":937,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{}}}],["temporarily",{"_index":404,"title":{},"body":{"entities/ChatRoom.html":{}}}],["terminal",{"_index":1164,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1549,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1550,"title":{},"body":{"index.html":{}}}],["text",{"_index":638,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["this.accesstokenguard",{"_index":251,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.appservice.gethello",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":261,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.chatroomrepository.create",{"_index":522,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.find",{"_index":526,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.findone",{"_index":529,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.remove(chatroom",{"_index":553,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.save(chatroom",{"_index":525,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomservice.addusertochatroom(id",{"_index":472,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.create(createchatroomdto",{"_index":456,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.findall",{"_index":457,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.findone(id",{"_index":459,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.remove(id",{"_index":464,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.removeuserfromchatroom(id",{"_index":473,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.update(id",{"_index":461,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomsrepo.findone",{"_index":1065,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.cloudinaryservice.uploadfile(file",{"_index":1077,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1333,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createusers(createuserdto",{"_index":1319,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extractrequestfromheader(request",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findone(chatroomid",{"_index":554,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findone(id",{"_index":532,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findonebyemail.findonebyemail(email",{"_index":1320,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1332,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1199,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":907,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":905,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googltokendto",{"_index":873,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":1220,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":774,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.audience",{"_index":844,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":846,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":842,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.ttl",{"_index":851,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfigurattion.googleclient_id",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfigurattion.googleclient_secret",{"_index":889,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":840,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":971,"title":{},"body":{"injectables/MailProvider.html":{}}}],["this.messageservice.create",{"_index":1387,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.messageservice.create(createmessagedto",{"_index":1033,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.delete(messageid",{"_index":1037,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findall(chatroomid",{"_index":1035,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.update(messageid",{"_index":1039,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messagesrepo.create",{"_index":1068,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.delete(messageid",{"_index":1093,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.find",{"_index":1092,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.findone",{"_index":1097,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.save(message",{"_index":1069,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.oauthclient",{"_index":890,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":897,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":253,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1156,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1155,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.requestprotocol",{"_index":1153,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.server.emit('receivemessage",{"_index":1395,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.signinprovider.signin(signindto",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":850,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository.create",{"_index":777,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":628,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.delete(id",{"_index":1321,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1318,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findbyids",{"_index":501,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findone",{"_index":520,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":816,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(edit",{"_index":1331,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":778,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":629,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userservice.creategoogleuser",{"_index":906,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createusers(createuserdto",{"_index":1281,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1283,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituser(edituserdto",{"_index":1285,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":1279,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":904,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1198,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.getonebyemail(signindto.email",{"_index":1215,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersrepo.findone",{"_index":1070,"title":{},"body":{"injectables/MessageService.html":{}}}],["through",{"_index":267,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["throw",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["timestamp",{"_index":985,"title":{},"body":{"entities/Message.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["token.dto",{"_index":870,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["token.dto.ts",{"_index":921,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":922,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:24",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:47",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["tokens.provider",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":827,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:10",{"_index":830,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":836,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:34",{"_index":1195,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:45",{"_index":832,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":1112,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":1167,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpage:number",{"_index":1114,"title":{},"body":{"classes/Paginated.html":{}}}],["transform",{"_index":715,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["transformation",{"_index":1522,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":615,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transport",{"_index":948,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["true})@type(undefined",{"_index":607,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1571,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":394,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessageModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([chatroom",{"_index":354,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":1047,"title":{},"body":{"modules/MessageModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1298,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":258,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["types/bcrypt",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":1163,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["unable",{"_index":760,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorised",{"_index":911,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('email",{"_index":1216,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('failed",{"_index":914,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":819,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["unauthorizedexception(error",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["undefined",{"_index":382,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["under",{"_index":1553,"title":{},"body":{"index.html":{}}}],["unique",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["unknown",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1569,"title":{},"body":{"properties.html":{}}}],["update",{"_index":414,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{}}}],["update(id",{"_index":434,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["update(messageid",{"_index":1013,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["updatechatroomdto",{"_index":435,"title":{"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["updatechatroomdto.name",{"_index":544,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.type",{"_index":546,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids",{"_index":533,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.length",{"_index":535,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.map(id",{"_index":534,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatemessagedto",{"_index":1014,"title":{"classes/UpdateMessageDto.html":{}},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto.text",{"_index":1098,"title":{},"body":{"injectables/MessageService.html":{}}}],["updating",{"_index":531,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["upload",{"_index":1074,"title":{},"body":{"injectables/MessageService.html":{}}}],["uploadapiresponse",{"_index":580,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadedfile",{"_index":1017,"title":{},"body":{"controllers/MessageController.html":{}}}],["uploadfile",{"_index":573,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadfile(file",{"_index":575,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadresult",{"_index":1076,"title":{},"body":{"injectables/MessageService.html":{}}}],["uploadresult.secure_url",{"_index":1079,"title":{},"body":{"injectables/MessageService.html":{}}}],["uppercase",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["uppercase'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":690,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["uproper",{"_index":1538,"title":{},"body":{"index.html":{}}}],["url(this.request.url",{"_index":1158,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{},"injectables/MessageService.html":{},"index.html":{}}}],["useclass",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory:async(config:configservice",{"_index":947,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":1546,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":441,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["useguards(jwtauthguard",{"_index":451,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["useinterceptors",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1027,"title":{},"body":{"controllers/MessageController.html":{}}}],["user",{"_index":318,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1030,"title":{},"body":{"controllers/MessageController.html":{}}}],["user.chatrooms",{"_index":385,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.controller",{"_index":1291,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":754,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["user.dto.ts:108",{"_index":685,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:11",{"_index":800,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:121",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":982,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:32",{"_index":981,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:46",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:56",{"_index":689,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:66",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:82",{"_index":702,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:93",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:98",{"_index":704,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":852,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["user.entitly",{"_index":753,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.firstname",{"_index":977,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user.id",{"_index":563,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["user.messages",{"_index":992,"title":{},"body":{"entities/Message.html":{}}}],["user.password",{"_index":1222,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1293,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":747,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:15",{"_index":749,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:28",{"_index":751,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.sub",{"_index":1071,"title":{},"body":{"injectables/MessageService.html":{}}}],["user:user):promise",{"_index":970,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user?.[field",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":126,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":416,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/RequestWithUser.html":{}}}],["userids",{"_index":600,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["usermodule",{"_index":119,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":479,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["users",{"_index":362,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["users.length",{"_index":504,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users.push(currentuser",{"_index":521,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users/user.controller",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["users/user.entitly",{"_index":353,"title":{},"body":{"modules/ChatModule.html":{},"entities/Message.html":{},"modules/MessageModule.html":{}}}],["users/user.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":310,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepo",{"_index":1051,"title":{},"body":{"injectables/MessageService.html":{}}}],["using",{"_index":804,"title":{},"body":{"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["utilities",{"_index":1521,"title":{},"body":{"index.html":{}}}],["v2",{"_index":578,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["validate",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/RefreshTokensProvider.html":{}}}],["validate(confirmpassword",{"_index":723,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(matchpasswordsconstraint",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatenested",{"_index":711,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatetoken",{"_index":1338,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["validatetoken(client",{"_index":1340,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["validation",{"_index":718,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["validationarguments",{"_index":710,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validator",{"_index":614,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":708,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":709,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["value",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1100,"title":{},"body":{"injectables/MessageService.html":{}}}],["variable",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1574,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":894,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"guards/WebSocketGuardGuard.html":{}}}],["verify(token",{"_index":1357,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["version",{"_index":1567,"title":{},"body":{"properties.html":{}}}],["void",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["web",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["websocketgateway",{"_index":160,"title":{"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["websocketguardguard",{"_index":1334,"title":{"guards/WebSocketGuardGuard.html":{}},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["websocketguardguard.validatetoken(client",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["websocketmodule",{"_index":120,"title":{"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["websocketserver",{"_index":1368,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["welcome",{"_index":975,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail",{"_index":962,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail(user",{"_index":966,"title":{},"body":{"injectables/MailProvider.html":{}}}],["windows/linux",{"_index":1544,"title":{},"body":{"index.html":{}}}],["ws",{"_index":1347,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["yes",{"_index":490,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["z0",{"_index":695,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[0",{"_index":692,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[a",{"_index":691,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["za",{"_index":694,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["zoom",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Inject,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { ConfigType } from '@nestjs/config';\n  import { JwtService } from '@nestjs/jwt';\n  import { Request } from 'express';\n  import { Observable } from 'rxjs';\n  import jwtConfig from 'src/auth/authConfig/jwt.config';\n  import { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AccessTokenGuard implements CanActivate {\n    constructor(\n      private readonly jwtService: JwtService,\n  \n      @Inject(jwtConfig.KEY)\n      private readonly jwtConfiguration: ConfigType,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      //Extract the request from the execution context\n      const request = context.switchToHttp().getRequest();\n      // Extract the token from the header\n      const token = this.extractRequestFromHeader(request);\n      // Validate the token\n      if (!token) {\n        throw new UnauthorizedException();\n      }\n      try {\n        const payload = await this.jwtService.verifyAsync(\n          token,\n          this.jwtConfiguration,\n        );\n  \n        request[REQUEST_USER_KEY] = payload;\n        console.log(payload);\n      } catch (error) {\n        throw new UnauthorizedException(error);\n      }\n      return true;\n    }\n  \n    private extractRequestFromHeader(request: Request) {\n      const [_, token] = request.headers.authorization?.split(' ') ?? [];\n      return token;\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/activeInterface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    sub: number,\n    email?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:11\n                        \n                    \n\n\n            \n                \n                        get met\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\n/**app controller class */\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**get met */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WebSocketModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './users/user.module';\n// import { MailerModule } from '@nestjs-modules/mailer';\nimport { PaginationModule } from './common/pagination.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './users/user.controller';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuardGuard } from './auth/guard/auth-guard/auth-guard.guard';\nimport { AccessTokenGuard } from './auth/guard/access-token/access-token.guard';\n// import { MessagesModule } from './messages/messages.module';\nimport { ChatModule } from './chatrooms/chatrooms.module';\nimport { MessageModule } from './messages/messages.module';\nimport { WebSocketModule } from './web-socket/web-socket.module';\nimport { WebsocketGateway } from './web-socket/websocketEvents/websocket.gateway';\nimport jwtConfig from './auth/authConfig/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        blog: configService.get('database.blog'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoload'),\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    AuthModule,\n    UserModule,\n    PaginationModule,\n    ChatModule,\n    MessageModule,\n    // MessagesModule,\n    ChatModule,\n    WebSocketModule\n  ],\n  controllers: [AppController, AuthController, UserController],\n  providers: [\n    AppService,\n    WebsocketGateway,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuardGuard,\n    },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: DataResponseInterceptor\n    // },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:8\n                        \n                    \n\n\n            \n                \n                        App service method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\n/**App service class */\nexport class AppService {\n\n  /**App service method */\n  getHello(): string {\n    return 'Hello';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                RefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        RefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    RefreshToken(refreshToken: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Auth(authTypes.None)@HttpCode(HttpStatus.OK)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, HttpCode, HttpStatus, Post, UseInterceptors } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/userDto';\nimport { authTypes } from './enums/authTypes.enum';\nimport { RefreshTokenDto } from './dtos/refreshTokenDto';\nimport { Auth } from './decorators/auth.decorator';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        // injecting auth service\n        private readonly authservice: AuthService,\n    ) {}\n    @Post('/signIn')\n    @Auth(authTypes.None)\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(ClassSerializerInterceptor)\n    public async SignIn(@Body() signInDto: SignInDto) {\n       return await this.authservice.SignIn(signInDto)\n    }\n    @Post('/refreshToken')\n    public RefreshToken(@Body() refreshToken: RefreshTokenDto) {\n        return this.authservice.refreshToken(refreshToken)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardGuard.html":{"url":"guards/AuthGuardGuard.html","title":"guard - AuthGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { Reflector } from '@nestjs/core';\n  import { Observable } from 'rxjs';\n  import { AccessTokenGuard } from '../access-token/access-token.guard';\n  import { authTypes } from 'src/auth/enums/authTypes.enum';\n  import { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AuthGuardGuard implements CanActivate {\n  \n    private static readonly defaultAuthType = authTypes.Bearer;\n  \n    private readonly authTypeGuardMap: Record = {\n      [authTypes.Bearer]: this.accessTokenGuard,\n      [authTypes.None]: { canActivate: () => true },\n    };\n  \n    constructor(\n      private readonly reflector: Reflector,\n      private readonly accessTokenGuard: AccessTokenGuard,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      // get authTypes from the reflector\n      const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ])  ?? [AuthGuardGuard.defaultAuthType];\n      // console.log('show all types', authTypes);\n  \n      // get array of guards\n      const guards = authTypes.map((type) => this.authTypeGuardMap[type])\n      // const guards = authTypes\n      //   .map((type) => {\n      //     const guard = this.authTypeGuardMap[type];\n      //     return Array.isArray(guard) ? guard : [guard]; // Normalize to an array\n      //   })\n      //   .flat();\n  \n      // loop through the guard and fire the can activate method\n      for (const instance of guards) {\n        // console.log(\"instance of\", instance)\n        const canActivate = await Promise.resolve(\n          instance.canActivate(context),\n        ).catch((err) => {\n          error: err;\n        });\n        // console.log(canActivate)\n  \n        if (canActivate) {\n          return true;\n        }\n      }\n      throw new UnauthorizedException();\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt';\nimport { HashingProvider } from './providers/hashing';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './guard/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { UserModule } from 'src/users/user.module';\nimport { AuthController } from './auth.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // Use the abstract class as a token\n      useClass: BcryptProvider, // Bind it to the concrete implementation\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { UserService } from 'src/users/provider/user.service';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        /* \n         * injecting user service\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n         * inject signInProvider\n         */\n        private readonly signInProvider: SignInProvider,\n\n        /* \n         *inject refreshTokenProvider\n         */\n         private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n    public async SignIn(signInDto: SignInDto) {\n        return await this.signInProvider.SignIn(signInDto)\n    }\n\n    public refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }    \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    // hash\n    public async hashPassword(inpPassword: string | Buffer): Promise {\n        const saltRounds = 10\n        const salt = await bcrypt.genSalt(saltRounds)\n        \n        return await bcrypt.hash(inpPassword, salt) \n    }\n\n    // compare\n    public async comparePasswords(password: string, encryPassword: string): Promise {\n        return await bcrypt.compare(password, encryPassword)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_exports\n\n\n\n\nChatRoomService \n\nChatRoomService \n\n\n\nChatModule\n\nChatModule\n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chatrooms/chatrooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatRoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatRoom } from './chatroom.entity'; \nimport { ChatRoomController } from './chatroom.controller';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { User } from '../users/user.entitly'; \n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatRoom, User]),\n  ],\n  controllers: [ChatRoomController],\n  providers: [ChatRoomService],\n  exports: [ChatRoomService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatRoom.html":{"url":"entities/ChatRoom.html","title":"entity - ChatRoom","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                owner\n                            \n                            \n                                    \n                                ownerId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'owner_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'owner_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ChatRoomType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chatRooms, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, CreateDateColumn, JoinTable, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from 'src/users/user.entitly'; \nimport { ChatRoomType } from './enums/chatroomType';\n\n@Entity('chat_rooms')\nexport class ChatRoom {\n  @PrimaryGeneratedColumn() \n  id: number;\n\n  @Column('varchar', { length: 100 })\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: ChatRoomType,\n    default: ChatRoomType.GROUP\n  })\n  type: ChatRoomType;\n\n  @ManyToMany(() => User, (user) => user.chatRooms, {\n    onDelete: 'CASCADE' // Automatically handles the relationship cleanup\n  })\n  users: User[];\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'owner_id' })\n  owner: User;\n\n  @Column({ name: 'owner_id', nullable: true }) // Made nullable temporarily\n  ownerId: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatRoomController.html":{"url":"controllers/ChatRoomController.html","title":"controller - ChatRoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatRoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat-rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/chatrooms/chatroom.controller.ts\nimport { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe,\n  HttpCode,\n  HttpStatus,\n  Req\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\nimport { Request } from 'express';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user?: {\n    sub: number;\n    email: string;\n  };\n}\n\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    return this.chatRoomService.create(createChatRoomDto, userId);\n  }\n\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    await this.chatRoomService.remove(id, userId);\n    return {\n      statusCode: HttpStatus.OK,\n      message: `Chat room with ID ${id} has been successfully deleted`\n    };\n  }\n\n\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatRoomService.html":{"url":"injectables/ChatRoomService.html","title":"injectable - ChatRoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatRoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/providers/chatrooms/chatrooms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserToChatRoom\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeUserFromChatRoom\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatRoomRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatRoomRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addUserToChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserToChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto, currentUserId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                currentUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, userId?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserFromChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserFromChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ChatRoom } from '../../chatroom.entity';\nimport { CreateChatRoomDto } from '../../DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from '../../DTOs/update-chat-room.dto';\nimport { User } from 'src/users/user.entitly';\nimport { ChatRoomType } from '../../enums/chatroomType';\n\n@Injectable()\nexport class ChatRoomService {\n  constructor(\n    @InjectRepository(ChatRoom)\n    private chatRoomRepository: Repository,\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  async create(createChatRoomDto: CreateChatRoomDto, currentUserId: number): Promise {\n    // Find users\n    const users = await this.userRepository.findByIds(\n      createChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== createChatRoomDto.userIds.length) {\n      throw new NotFoundException('One or more users not found');\n    }\n\n    // Make sure the current user is one of the chat participants\n    if (!createChatRoomDto.userIds.includes(currentUserId)) {\n      // Add the current user to the chat members if not already included\n      const currentUser = await this.userRepository.findOne({ where: { id: currentUserId } });\n      if (currentUser) {\n        users.push(currentUser);\n      }\n    }\n\n    // Create new chat room\n    const chatRoom = this.chatRoomRepository.create({\n      name: createChatRoomDto.name,\n      type: createChatRoomDto.type,\n      users: users,\n      ownerId: currentUserId\n    });\n\n    return await this.chatRoomRepository.save(chatRoom);\n  }\n\n  async findAll(): Promise {\n    return this.chatRoomRepository.find({\n      relations: ['users'],\n    });\n  }\n\n// Method for finding a chat room by ID\nasync findOne(id: number): Promise {\n  const chatRoom = await this.chatRoomRepository.findOne({\n    where: { id: Number(id) },\n    relations: ['users', 'owner']\n  });\n\n  if (!chatRoom) {\n    throw new NotFoundException(`Chat room with ID ${id} not found`);\n  }\n\n  return chatRoom;\n}\n\n// Method for updating a chat room\nasync update(id: number, updateChatRoomDto: UpdateChatRoomDto): Promise {\n  const chatRoom = await this.findOne(id);\n  \n  if (updateChatRoomDto.userIds) {\n    const users = await this.userRepository.findByIds(\n      updateChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== updateChatRoomDto.userIds.length) {\n      throw new BadRequestException('One or more users not found');\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE && users.length !== 2) {\n      throw new BadRequestException('Private chat rooms must have exactly 2 users');\n    }\n\n    chatRoom.users = users;\n  }\n\n  // Update other fields\n  if (updateChatRoomDto.name) chatRoom.name = updateChatRoomDto.name;\n  if (updateChatRoomDto.type) chatRoom.type = updateChatRoomDto.type;\n\n  return this.chatRoomRepository.save(chatRoom);\n}\n\nasync remove(id: number, userId?: number): Promise {\n  const chatRoom = await this.chatRoomRepository.findOne({\n    where: { id: Number(id) }\n  });\n  \n  if (!chatRoom) {\n    throw new NotFoundException(`Chat room with ID ${id} not found`);\n  }\n\n  // Check owner permissions if userId is provided\n  if (userId && chatRoom.ownerId && chatRoom.ownerId !== userId) {\n    throw new ForbiddenException('You do not have permission to delete this chat room');\n  }\n  \n  // Remove the chat room\n  await this.chatRoomRepository.remove(chatRoom);\n}\n\n  async addUserToChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n    const user = await this.userRepository.findOne({ \n      where: { id: Number(userId) }\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found`);\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot add users to private chat rooms');\n    }\n\n    chatRoom.users.push(user);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n// Method for removing a user from a chat room\nasync removeUserFromChatRoom(chatRoomId: number, userId: number): Promise {\n  const chatRoom = await this.findOne(chatRoomId);\n\n  if (chatRoom.type === ChatRoomType.PRIVATE) {\n    throw new BadRequestException('Cannot remove users from private chat rooms');\n  }\n\n  // Check if user is the owner\n  if (chatRoom.ownerId === userId) {\n    throw new BadRequestException('Cannot remove the owner from the chat room');\n  }\n\n  const initialUserCount = chatRoom.users.length;\n  chatRoom.users = chatRoom.users.filter(user => user.id !== userId);\n\n  if (chatRoom.users.length === initialUserCount) {\n    throw new NotFoundException(`User with ID ${userId} not found in chat room ${chatRoomId}`);\n  }\n\n  return this.chatRoomRepository.save(chatRoom);\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CloudinaryModule.html":{"url":"modules/CloudinaryModule.html","title":"module - CloudinaryModule","body":"\n                   \n\n\n\n\n    Modules\n    CloudinaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\ncluster_CloudinaryModule_exports\n\n\n\n\nCloudinaryService \n\nCloudinaryService \n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nCloudinaryService  -->\n\nCloudinaryModule->CloudinaryService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cloudinary-provider/cloudinary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary.service';\n\n@Module({\n  providers: [CloudinaryService],\n  exports: [CloudinaryService], \n})\nexport class CloudinaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary-provider/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/cloudinary-provider/cloudinary.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cloudinary-provider/cloudinary.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport { UploadApiResponse } from 'cloudinary';\n\n@Injectable()\nexport class CloudinaryService {\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadFile(file: Express.Multer.File): Promise {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader.upload_stream({ resource_type: 'auto' }, (error, result) => {\n        if (error) reject(error);\n        else resolve(result);\n      }).end(file.buffer);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatRoomDto.html":{"url":"classes/CreateChatRoomDto.html","title":"class - CreateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/create-chat-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChatRoomType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsArray, IsUUID, IsOptional, IsNumber } from 'class-validator';\nimport { ChatRoomType } from '../enums/chatroomType'; \nimport { Type } from 'class-transformer';\n\nexport class CreateChatRoomDto {\n  @IsString()\n  name: string;\n\n  @IsEnum(ChatRoomType)\n  @IsOptional()\n  type?: ChatRoomType;\n\n\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number)\n  userIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/googleUserProvider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/googleUserProvider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/googleUserProvider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { GoogleInterface } from '../../auth/social/interfaces/user.interface';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /*\n     * inject userRepository\n     */\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    try {\n      const user = this.userRepository.create(googleUser);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dtos/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                audio\n                            \n                            \n                                    \n                                chatRoomId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                fileUrl\n                            \n                            \n                                    \n                                    \n                                messageType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        audio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        messageType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessageType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(MessageType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { MessageType } from '../enum/message-type ';\n\nexport class CreateMessageDto {\n  @IsNotEmpty()\n  chatRoomId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text?: string;\n  \n  @IsString()\n  @IsOptional()\n  audio?: string;\n\n  @IsString()\n  @IsOptional()\n  fileUrl?: string;\n\n  @IsOptional()\n  @IsEnum(MessageType)\n  messageType: MessageType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase and should be same as the password'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com', description: 'email field'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'first name field'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]', description: 'this is autogenerated from google when you signup with google'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'last name field'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'password should containg number, alphabets and uppercase'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'password should containg number, alphabets and uppercase',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'password should containg number, alphabets and uppercase and should be same as the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) // Set default if undefined\n  userRole?: userRole;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'this is autogenerated from google when you signup with google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/create-user.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/create-user.provider.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /*\n     * Inject userRepository\n     */\n    @InjectRepository(User) private userRepository: Repository,\n\n    /*\n     * Inject hashingProvider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n  public async createUsers(createUserDto: CreateUserDto): Promise {\n    // check if user already exits\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // you might save/log your  error\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n    // Handle Error\n    if (existingUser) {\n      throw new BadRequestException('User already exist');\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      createUserDto.password,\n    );\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    // Create the user\n    try {\n      this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/data-response/data-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, \n  ExecutionContext, \n  Injectable, \n  NestInterceptor \n} from '@nestjs/common';\nimport { map, Observable, pipe, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('before')\n    return next.handle().pipe(map((data) => ({\n      apiversrion:'0.0.1',\n      result: data.length,\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/patch-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsInt, IsNotEmpty, IsString } from \"class-validator\";\nimport { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n \n// using the patch to edit part of the data, the partialtype makes everything optional\nexport class EditUserDto extends PartialType(CreateUserDto) {\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmail.html":{"url":"injectables/FindOneByEmail.html","title":"injectable - FindOneByEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-email.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-email.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-email.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n\n@Injectable()\nexport class FindOneByEmail {\n    constructor(@InjectRepository(User) private userRepository: Repository) {}\n\n    public async findOneByEmail(email: string): Promise {\n        let user: User | undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({ email });\n        } catch (error) {\n            throw new RequestTimeoutException('Could not fetch user', {\n                description: 'Error connecting to database',\n            });\n        }\n\n        if (!user) {\n            throw new UnauthorizedException('User does not exist');\n        }\n\n        return user; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-googleId.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-googleId.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-googleId.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /*\n     *inject userRepository\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userRepository.findOneBy({ googleId })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interface/activeInterface';\nimport { UserService } from 'src/users/provider/user.service';\nimport { User } from 'src/users/user.entitly';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     *injecting jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * injecting jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      } as ActiveUserData,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n    // generate access token\n    this.signToken(user.id, this.jwtConfiguration.ttl, {email: user.email}),\n\n    // generate refresh token\n    this.signToken(user.id, this.jwtConfiguration.ttl)\n    ])\n    \n    return {'accessToken': accessToken, 'refreshToken': refreshToken, user}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetuserParamDto.html":{"url":"classes/GetuserParamDto.html","title":"class - GetuserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetuserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/getUserparamdto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/getUserparamdto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional,IsInt } from \"class-validator\";\nimport { Type } from 'class-transformer';\n\nexport class GetuserParamDto {\n   \n    @IsInt()\n    @Type (() => Number )\n    id?:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googlTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googlTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { authTypes } from '../enums/authTypes.enum';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Auth(authTypes.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n    constructor(\n        /* \n         * inject googleAuthenticationService \n         */\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) {}\n\n    @Post()\n    public authenticate(@Body() googlTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googlTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtConfigurattion: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfigurattion\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oAuthClient: OAuth2Client;\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * inject jwtconfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigurattion: ConfigType,\n    /**\n     * inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const client_id = this.jwtConfigurattion.googleClient_id;\n    const client_secret = this.jwtConfigurattion.googleClient_secret;\n\n    this.oAuthClient = new OAuth2Client(client_id, client_secret);\n  }\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      console.log(\"Received Token:\", googleTokenDto.token);\n\n      // verify the google token sent by user\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      console.log(\"Google Token Payload:\", loginTicket.getPayload());\n\n      // extract the payload from google jwt token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the database using googleId\n      const user = await this.userService.findOneByGoogleId(googleId);\n\n      // if user exist, generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      // else generate the user and create the token\n      const newUser = await this.userService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      // if any of the step fails, send an unauthorised exception\n      console.error(\"Google Auth Error:\", error);\n      throw new UnauthorizedException('failed to authenticate with google');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthticationModule.html":{"url":"modules/GoogleAuthticationModule.html","title":"module - GoogleAuthticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_GoogleAuthticationModule_providers\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/social/google-authtication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Module({\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleInterface.html":{"url":"interfaces/GoogleInterface.html","title":"interface - GoogleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleInterface {\n    email: string\n    firstName: string\n    lastName: string\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    // hashing during signUp\n    abstract hashPassword(inpPassword: string | Buffer): Promise\n\n    // comparison during signIn\n    abstract comparePasswords(password: string, encryPassword: string): Promise\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { config } from 'process';\nimport { from } from 'form-data';\nimport { Template } from 'ejs';\nimport { join } from 'path';\nimport { strict } from 'assert';\nimport {EjsAdapter} from '@nestjs-modules/mailer/dist/adapters/ejs.adapter'\nimport { MailProvider } from './providers/mail.provider';\n\n\n@Global()\n@Module({\n    imports: [MailerModule.forRootAsync({\n        inject: [ConfigService],\n        useFactory:async(config:ConfigService) => ({\n            transport: {\n                host: config.get('MAIL_HOST'),\n                secure: false,\n                port: config.get('MAIL_PORT'),\n                auth: {\n                    user: config.get('SMTP_USERNAME'),\n                    pass: config.get('SMTP_PASSWORD'),\n                },\n                default: {\n                    from: `no-reply-`\n                },\n                template: {\n                    dir: join(__dirname, 'template'),\n                    adapter: new EjsAdapter({\n                    inlineCssEnabled: true,\n                    }),\n                    Option : {\n                        strict: false,\n                    }\n\n                }\n            }\n        })\n    })],\n    providers: [MailProvider],\n    exports: [MailProvider]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailProvider.html":{"url":"injectables/MailProvider.html","title":"injectable - MailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                WelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        WelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    WelcomeEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { name } from 'ejs';\nimport { User } from 'src/users/user.entitly';\n\n\n@Injectable()\nexport class MailProvider {\n    constructor (\n        //inject the mailer Service\n        private readonly mailerService:MailerService,\n    ) {}\n\n\n    public async WelcomeEmail (user:User):Promise {\n        await this.mailerService.sendMail({\n         to: user.email,\n         from: `helpdesk from realTimeChat.com`,\n         subject: `welcome to realTimeChat`,\n         template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000/',\n        }\n        })\n\n\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\nexport class CreateUserDto {\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'first name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'password should containg number, alphabets and uppercase',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'password should containg number, alphabets and uppercase and should be same as the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) // Set default if undefined\n  userRole?: userRole;\n\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'this is autogenerated from google when you signup with google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chatRoom\n                            \n                            \n                                    \n                                    Optional\n                                fileUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                messageType\n                            \n                            \n                                    \n                                sender\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, chatRoom => chatRoom.id, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messageType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessageType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: MessageType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { User } from '../users/user.entitly';\nimport { MessageType } from './enum/message-type ';\n\n@Entity()\nexport class Message {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @ManyToOne(() => ChatRoom, (chatRoom) => chatRoom.id, { onDelete: 'CASCADE' })\n  chatRoom: ChatRoom;\n\n  @ManyToOne(() => User, (user) => user.messages, { onDelete: 'CASCADE' })\n  sender: User;\n\n  @Column({ type: 'enum', enum: MessageType, default: MessageType.TEXT })\n  messageType: MessageType;\n\n  @Column({type: 'text', nullable: true})\n  text: string\n  \n  @Column({ type: 'text', nullable: true }) \n  fileUrl?: string;\n\n  @CreateDateColumn()\n  timestamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n            \n                Description\n            \n            \n                message routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: ActiveUserData, createMessageDto: CreateMessageDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Send a new message with the active user as the sender\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Delete a message by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':chatRoomId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Get all messages in a chat room\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Update a message text by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Delete,\n  Patch,\n  Body,\n  Param,\n  UploadedFile, UseInterceptors \n} from '@nestjs/common';\nimport { MessageService } from './provider/message.service';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { ActiveUser } from 'src/auth/decorators/activeUser.decorator';\nimport { CreateMessageDto } from './dtos/create-message.dto';\nimport { UpdateMessageDto } from './dtos/update-message.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n/**\n * message routes\n */\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) {}\n\n  /**\n   * Send a new message with the active user as the sender\n   */\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async create(\n    @ActiveUser() user: ActiveUserData,\n    @Body() createMessageDto: CreateMessageDto,\n    @UploadedFile() file?: Express.Multer.File,\n    \n  ) {\n    // Override senderId from payload using the active user's sub property.\n    console.log(user);\n    return await this.messageService.create(createMessageDto, user, file);\n  }\n\n  /**\n   * Get all messages in a chat room\n   */\n  @Get(':chatRoomId')\n  async findAll(@Param('chatRoomId') chatRoomId: string) {\n    return await this.messageService.findAll(chatRoomId);\n  }\n\n  /**\n   * Delete a message by ID\n   */\n  @Delete(':messageId')\n  async delete(@Param('messageId') messageId: string) {\n    return await this.messageService.delete(messageId);\n  }\n\n  /**\n   * Update a message text by ID\n   */\n  @Patch(':messageId')\n  async update(\n    @Param('messageId') messageId: string,\n    @Body() updateMessageDto: UpdateMessageDto,\n  ) {\n    return await this.messageService.update(messageId, updateMessageDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nMessageModule -->\n\nCloudinaryService->MessageModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Message } from './message.entity';\nimport { MessageService } from './provider/message.service';\nimport { MessageController } from './messages.controller';\nimport { User } from '../users/user.entitly';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\nimport { CloudinaryService } from 'src/cloudinary-provider/cloudinary.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message, User, ChatRoom])],\n  providers: [MessageService, CloudinaryService],\n  controllers: [MessageController],\n  exports: [MessageService],\n})\nexport class MessageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/provider/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepo: Repository, chatRoomsRepo: Repository, usersRepo: Repository, cloudinaryService: CloudinaryService)\n                    \n                \n                        \n                            \n                                Defined in src/messages/provider/message.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatRoomsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudinaryService\n                                                  \n                                                        \n                                                                        CloudinaryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMessageDto: CreateMessageDto, user: ActiveUserData, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Create a new message and save it in the DB\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Delete a message\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:114\n                        \n                    \n\n\n            \n                \n                        find all messages in a chatroom\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Update a message text\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, Repository } from 'typeorm';\nimport { Message } from '../message.entity';\nimport { ChatRoom } from '../../chatrooms/chatroom.entity';\nimport { User } from 'src/users/user.entitly';\nimport { UpdateMessageDto } from '../dtos/update-message.dto';\nimport { CreateMessageDto } from '../dtos/create-message.dto';\nimport { ActiveUser } from 'src/auth/decorators/activeUser.decorator';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { CloudinaryService } from 'src/cloudinary-provider/cloudinary.service';\n// import { CloudinaryService } from 'src/cloudinary/cloudinary.service';\n\n@Injectable()\nexport class MessageService {\n  constructor(\n    /**\n     * inject messageRepo\n     */\n    @InjectRepository(Message)\n    private messagesRepo: Repository,\n\n    /**\n     * inject chatRoomsRepo\n     */\n    @InjectRepository(ChatRoom)\n    private chatRoomsRepo: Repository,\n\n    /**\n     * inject usersRepo\n     */\n    @InjectRepository(User)\n    private usersRepo: Repository,\n\n    /**inject cloudinary service */\n    private readonly cloudinaryService: CloudinaryService,\n  ) {}\n\n  // async create(createMessageDto: CreateMessageDto, @ActiveUser() user: ActiveUserData): Promise {\n  //   const { chatRoomId, text } = createMessageDto;\n\n  //   // Find the chat room\n  //   const chatRoom = await this.chatRoomsRepo.findOne({ where: { id: chatRoomId as any } });\n  //   if (!chatRoom) {\n  //     throw new NotFoundException('Chat room not found');\n  //   }\n\n  //   // Directly use the active user as the sender\n  //   const message = this.messagesRepo.create({ ...createMessageDto, sender: user });\n  //   return await this.messagesRepo.save(message);\n  // }\n\n  // Find all messages in a chat room\n\n  /**\n   * Create a new message and save it in the DB\n   */\n  async create(\n    createMessageDto: CreateMessageDto,\n    user: ActiveUserData,\n    file?: Express.Multer.File\n  ): Promise {\n    const { chatRoomId, text } = createMessageDto;\n  \n    //  Find the chat room\n    const chatRoom = await this.chatRoomsRepo.findOne({\n      where: { id: chatRoomId as any },\n    });\n    if (!chatRoom) throw new NotFoundException('Chat room not found');\n  \n    //  Find the sender\n    const sender = await this.usersRepo.findOne({ where: { id: user.sub } });\n    console.log(sender)\n    if (!sender) throw new NotFoundException('Sender not found');\n  \n    //  Handle file upload if provided\n    let fileUrl: string | undefined;\n    if (file) {\n      console.log('Incoming File:', file);\n      try {\n        const uploadResult = await this.cloudinaryService.uploadFile(file);\n        console.log('Cloudinary Upload Result:', uploadResult);\n        fileUrl = uploadResult.secure_url;\n      } catch (error) {\n        console.error('File upload error:', error);\n        throw new BadRequestException('File upload failed');\n      }\n    }\n  \n    //  Create message with correct TypeORM structure\n    const message = this.messagesRepo.create({\n      chatRoom,\n      sender,\n      text,\n      fileUrl,\n      \n    } as DeepPartial);\n    console.log('Message Before Save:', message);\n  \n    //Save message correctly\n    const savedMessage = await this.messagesRepo.save(message);\n    console.log('Saved Message:', savedMessage);\n    return savedMessage; // Ensure returning a single object\n  }\n  \n\n  /**\n   * find all messages in a chatroom\n   */\n  async findAll(chatRoomId: string): Promise {\n    return await this.messagesRepo.find({\n      where: { chatRoom: { id: chatRoomId as any } },\n      relations: ['sender'],\n    });\n  }\n\n  /**\n   * Delete a message\n   */\n  async delete(messageId: string): Promise {\n    const result = await this.messagesRepo.delete(messageId);\n    if (result.affected === 0) {\n      throw new NotFoundException('Message not found');\n    }\n  }\n\n  /**\n   * Update a message text\n   */\n  async update(\n    messageId: string,\n    updateMessageDto: UpdateMessageDto,\n  ): Promise {\n    const message = await this.messagesRepo.findOne({\n      where: { id: messageId },\n    });\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    if (!updateMessageDto || !updateMessageDto.text) {\n      throw new BadRequestException('No update values provided');\n    }\n\n    message.text = updateMessageDto.text;\n    return await this.messagesRepo.save(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paginated.html":{"url":"classes/Paginated.html","title":"class - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Interfaces/paginatedInterface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                link\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Paginated   {\n    data:T[];\n    meta: {\n        itemsPerPage:number,\n        totalItems: number,\n        currentPage:number,\n        totalPage:number,\n    };\n    link: \n    {\n        first: string,\n        last:string,\n        current: string,\n        previous:string,\n        next:string,\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module,forwardRef } from '@nestjs/common';\nimport { PaginationProvider } from './pagination/Provider/pagination.provider';\n\n\n@Module({\n  imports:[],\n  providers: [PaginationProvider],\n  controllers: [],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Provider/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/Provider/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(paginationQueryDto: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/Provider/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { PaginationQueryDto } from \"../pagination-query.dto\";\nimport { ObjectLiteral, Repository } from \"typeorm\";\nimport { Request } from \"express\";\nimport { REQUEST } from \"@nestjs/core\"\nimport { Paginated } from \"../Interfaces/paginatedInterface\";\n\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor (\n        @Inject(REQUEST)\n        private readonly request:Request,\n    ) {}\n    \n\n    public async paginatedQuery (paginationQueryDto:PaginationQueryDto, repository:Repository,): Promise> {\n\n        const result = await repository.find({\n\n            //skip: number of post\n            //take: number of post to show per page\n            skip: paginationQueryDto.limit * (paginationQueryDto.page - 1),\n            take: paginationQueryDto.limit,\n        })\n\n\n        // create a requestUrl \n        // i.e http://localhost:3000/resource \n        // the http is this.requestprotocol\n        const baseUrl = this.request.protocol; + \"://\" + this.request.headers.host + \"/\"\n\n        const newUrl = new URL(this.request.url, baseUrl)\n\n        console.log(baseUrl);\n        // line 34 give u http://localhost:3000/resource  as result on your terminal\n        console.log(newUrl)\n\n       const totalItems = await repository.count()\n\n       const totalpage = Math.ceil(totalItems / paginationQueryDto.limit)\n\n       const nextpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page +1\n\n       const prevpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page -1\n\n\n        const finalResponse: Paginated = {\n            data: result,\n            meta: {\n                itemsPerPage: paginationQueryDto.limit,\n                totalItems: totalItems,\n                currentPage: paginationQueryDto.page,\n                totalPage : totalpage\n            }, \n            link: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=1`,\n\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&${totalpage}`,\n   \n               current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${paginationQueryDto.page}`,\n   \n               next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${nextpage}`,\n   \n               previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${prevpage}`\n   \n            }\n        }\n\n        return finalResponse\n\n\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\n\nexport class PaginationQueryDto {\n\n    @IsOptional()\n    @IsPositive()\n    limit?:number = 2;\n\n    @IsOptional()\n    @IsPositive()\n    page?:number = 1;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refreshTokenDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refreshTokenDto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     * inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * inject jwtService\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /* \n     * inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider\n  ) {}\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // validate the refresh token using jwt\n   const { sub } = await this.jwtService.verifyAsync(\n        refreshTokenDto.refreshToken, \n        {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n    })\n\n    // grab the user from the database\n    const user = await this.userService.FindOneById(sub)\n\n    // generate the token\n    return await this.generateTokenProvider.generateTokens(user)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe,\n  HttpCode,\n  HttpStatus,\n  Req\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\nimport { Request } from 'express';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user?: {\n    sub: number;\n    email: string;\n  };\n}\n\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    return this.chatRoomService.create(createChatRoomDto, userId);\n  }\n\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    await this.chatRoomService.remove(id, userId);\n    return {\n      statusCode: HttpStatus.OK,\n      message: `Chat room with ID ${id} has been successfully deleted`\n    };\n  }\n\n\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerToClientEvents.html":{"url":"interfaces/ServerToClientEvents.html","title":"interface - ServerToClientEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerToClientEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/interfaces/websockets-message.interface.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface ServerToClientEvents {\n    // newMessage: Payload: Message\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/userDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { HashingProvider } from './hashing';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     * injecting hashing dependency\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /*\n     * injecting generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n  public async SignIn(signInDto: SignInDto) {\n    // check if user exist in db\n    // throw error if user doesnt exist\n    let user = await this.userService.GetOneByEmail(signInDto.email);\n\n    if (!user) {\n      throw new UnauthorizedException('email or password is incorrect');\n    }\n\n    // conpare password\n    let isCheckedPassword: boolean = false;\n\n    try {\n      isCheckedPassword = await this.hashingProvider.comparePasswords(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'error  connecting to the database',\n      });\n    }\n\n    if (!isCheckedPassword) {\n      throw new UnauthorizedException('email or password is incorrect');\n    }\n    // login\n    return await this.generateTokenProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatRoomDto.html":{"url":"classes/UpdateChatRoomDto.html","title":"class - UpdateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/update-chat-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateChatRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatRoomDto } from './create-chat-room.dto';\n\nexport class UpdateChatRoomDto extends PartialType(CreateChatRoomDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dtos/update-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                update message dto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateMessageDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/update-message.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreateMessageDto } from \"./create-message.dto\";\n\n/**\n   * update message dto\n   */\nexport class UpdateMessageDto extends PartialType(CreateMessageDto) {\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entitly.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ManyToMany(undefined, chatRoom => chatRoom.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 225, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@OneToMany(undefined, message => message.sender, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable, OneToMany } from 'typeorm';\nimport { userRole } from './Enums/userRole.enum';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { Message } from 'src/messages/message.entity';\nimport { IsOptional } from 'class-validator';\n// import { Message } from 'src/messages/message.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('varchar', { length: 100, nullable: false })\n  firstName: string;\n\n  @Column('varchar', { length: 100 })\n  lastName: string;\n\n  @Column('varchar', { unique: true, nullable: false })\n  email: string;\n\n  @Exclude()\n  @Column('varchar', { nullable: true })\n  password?: string;\n\n  @Column({ type: 'enum', enum: userRole, default: userRole.USER })\n  userRole?: userRole;\n\n  @Column('varchar', { length: 225, nullable: true })\n  googleId?: string;\n\n  // Many-to-Many relationship with ChatRoom\n  @IsOptional()\n  @ManyToMany(() => ChatRoom, (chatRoom) => chatRoom.users)\n  @JoinTable() // This creates a junction table to link users and chat rooms\n  chatRooms?: ChatRoom[];\n\n  // One-to-Many relationship with Message\n  @IsOptional()\n  @OneToMany(() => Message, (message) => message.sender, { cascade: true })\n  messages?: Message[]; //\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    Public\n                                editedPost\n                            \n                            \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(authTypes.None)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        editedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    editedPost(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getuserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getuserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  DefaultValuePipe,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { CreateUserDto } from './DTOs/create-user.dto';\nimport { EditUserDto } from './DTOs/patch-user.dto';\nimport { GetuserParamDto } from './DTOs/getUserparamdto';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { authTypes } from 'src/auth/enums/authTypes.enum';\n\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?')\n  public getUsers(\n    @Param() getuserParamDto: GetuserParamDto,\n    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    console.log(getuserParamDto);\n    return this.userService.findAll(getuserParamDto, limit, page);\n  }\n\n  @Auth(authTypes.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUsers(createUserDto);\n  }\n\n  @Delete()\n  public deleteUser(@Query('id', ParseIntPipe) id: number) {\n    return this.userService.deleteUser(id);\n  }\n\n  @Patch()\n  public editedPost(@Body() edituserDto: EditUserDto) {\n    return this.userService.editUser(edituserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmail\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entitly';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { FindOneByEmail } from './provider/find-one-by-email';\nimport { MailModule } from 'src/mail/mail.module';\nimport { FindOneByGoogleIdProvider } from './provider/find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './provider/googleUserProvider';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]), MailModule],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    FindOneByEmail,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                editUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                FindOneById\n                            \n                            \n                                    Public\n                                    Async\n                                GetOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, createUserProvider: CreateUserProvider, findOneByemail: FindOneByEmail, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByemail\n                                                  \n                                                        \n                                                                        FindOneByEmail\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(edituserDto: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        GetOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entitly';\nimport { Repository } from 'typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { FindOneByEmail } from './find-one-by-email';\nimport { EditUserDto } from '../DTOs/patch-user.dto';\nimport { GetuserParamDto } from '../DTOs/getUserparamdto';\nimport { FindOneByGoogleIdProvider } from './find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './googleUserProvider';\nimport { GoogleInterface } from 'src/auth/social/interfaces/user.interface';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    /**\n     *inject User entity\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly findOneByemail: FindOneByEmail,\n\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  public findAll(\n    getUserParamDto: GetuserParamDto,\n    limit: number,\n    page: number,\n  ): Promise {\n    return this.userRepository.find();\n  }\n\n  public async createUsers(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUsers(createUserDto);\n  }\n\n  public FindOneById(id: number): Promise {\n    return this.userRepository.findOneBy({ id });\n  }\n\n  public async GetOneByEmail(email: string) {\n    return await this.findOneByemail.findOneByEmail(email);\n  }\n\n  public async deleteUser(id: number) {\n    await this.userRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  public async editUser(edituserDto: EditUserDto) {\n    let edit = await this.userRepository.findOneBy({\n      id: edituserDto.id,\n    });\n\n    edit.firstName = edituserDto.firstName ?? edit.firstName;\n    edit.lastName = edituserDto.lastName ?? edit.lastName;\n    edit.password = edituserDto.password ?? edit.password;\n    edit.email = edituserDto.email ?? edit.email;\n\n    return this.userRepository.save(edit);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    return this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WebSocketGuardGuard.html":{"url":"guards/WebSocketGuardGuard.html","title":"guard - WebSocketGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    WebSocketGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/web-socket-guard/web-socket-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Static\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/web-socket-guard/web-socket-guard.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/web-socket-guard/web-socket-guard.guard.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class WebSocketGuardGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    if (context.getType() !== 'ws') {\n      return true;\n    }\n\n    const client: Socket = context.switchToWs().getClient();\n    const { authurisation } = client.handshake.headers;\n\n    Logger.log({authurisation}, 'i have the auth')\n    return false;\n  }\n\n  static validateToken(client: Socket) {\n    const {authorisation} = client.handshake.headers\n    Logger.log({authorisation})\n\n    const token = Array.isArray(authorisation) ? authorisation[0].split(' ')[1] : authorisation.split(' ')[1];\n\n    const payload = verify(token, 'secret')\n\n    return payload\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebSocketModule.html":{"url":"modules/WebSocketModule.html","title":"module - WebSocketModule","body":"\n                   \n\n\n\n\n    Modules\n    WebSocketModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web-socket/web-socket.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class WebSocketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketGateway.html":{"url":"classes/WebsocketGateway.html","title":"class - WebsocketGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/websocketEvents/websocket.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService)\n                    \n                \n                        \n                            \n                                Defined in src/web-socket/websocketEvents/websocket.gateway.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/web-socket/websocketEvents/websocket.gateway.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('sendMessage')\n                \n            \n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { WebSocketGateway, WebSocketServer, SubscribeMessage, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\n// import { MessageService } from './message.service';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { MessageType } from 'src/messages/enum/message-type ';\nimport { MessageService } from 'src/messages/provider/message.service';\n\n@WebSocketGateway({ cors: true })\nexport class WebsocketGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: Server;\n\n  constructor(private readonly messageService: MessageService) {}\n\n  async handleConnection(client: Socket) {\n    console.log(`Client connected: ${client.id}`);\n  }\n\n  async handleDisconnect(client: Socket) {\n    console.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('sendMessage')\n  async handleMessage(client: Socket, payload: { text?: string; fileUrl?: string; chatRoomId: string; user: ActiveUserData }) {\n    console.log('Received message:', payload);\n\n    // Save the message to the database\n    const savedMessage = await this.messageService.create(\n      { text: payload.text, chatRoomId: payload.chatRoomId, messageType: MessageType.FILE },\n      payload.user,\n      undefined,\n    );\n\n    // Emit the saved message to all connected clients\n    this.server.emit('receiveMessage', savedMessage);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refreshTokenDto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/userDto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n            guard\n            AuthGuardGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/web-socket-guard/web-socket-guard.guard.ts\n            \n            guard\n            WebSocketGuardGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interface/activeInterface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/middlewares/web-socket.middleware.ts\n            \n            variable\n            SocketAuthMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/middlewares/web-socket.middleware.ts\n            \n            type alias\n            SocketIoMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/interfaces/user.interface.ts\n            \n            interface\n            GoogleInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/create-chat-room.dto.ts\n            \n            class\n            CreateChatRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/update-chat-room.dto.ts\n            \n            class\n            UpdateChatRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            controller\n            ChatRoomController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.entity.ts\n            \n            entity\n            ChatRoom\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/providers/chatrooms/chatrooms.service.ts\n            \n            injectable\n            ChatRoomService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/cloudinary-provider/cloudinary-provider.ts\n            \n            variable\n            CloudinaryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cloudinary-provider/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/Interfaces/paginatedInterface.ts\n            \n            class\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/Provider/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.provider.ts\n            \n            injectable\n            MailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/dtos/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/messages/dtos/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/messages/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessageController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/messages/provider/message.service.ts\n            \n            injectable\n            MessageService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/getUserparamdto.ts\n            \n            class\n            GetuserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-email.ts\n            \n            injectable\n            FindOneByEmail\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-googleId.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/googleUserProvider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/provider/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.entitly.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web-socket/interfaces/websockets-message.interface.ts\n            \n            interface\n            ServerToClientEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web-socket/websocketEvents/websocket.gateway.ts\n            \n            class\n            WebsocketGateway\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.5.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.1\n        \n            multer : ^1.4.5-lts.1\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authTypes   (src/.../authTypes.enum.ts)\n                        \n                        \n                            ChatRoomType   (src/.../chatroomType.ts)\n                        \n                        \n                            MessageType   (src/.../message-type .ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        authTypes\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/chatrooms/enums/chatroomType.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatRoomType\n                    \n                \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n\n    src/messages/enum/message-type .ts\n    \n        \n            \n                \n                    \n                        \n                        MessageType\n                    \n                \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n                        \n                            \n                                Value : audio\n                            \n                        \n                        \n                            \n                                 FILE\n                            \n                        \n                        \n                            \n                                Value : file\n                            \n                        \n            \n        \n\n    src/users/Enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nrealTimeChat (NestJS Project)\nThis is a NestJS project bootstrapped using the Nest CLI.\nGetting Started\nPrerequisites\n\nNode.js (LTS enforced)\nnpm\n\nInstallation\nClone the repository and install dependencies:\nExample :git clone https://github.com/phertyameen/realTimeChat.git\ncd realTimeChat\nnpm install\n\n# Running the Application\n\nStart the development server:\n```npm run start\n\nFor hot reload:\n```npm run start:dev\n\n# Project Structure\n\nsrc/ - Main application source code\nmain.ts - Entry point of the application\napp.module.ts - Root module with TypeORM connection\nconfig folder - contains appConfig and database configurations\napp.controller.ts - Default controller\napp.service.ts - Default service\n\n# Installed Packages\n\n@nestjs/config - Configuration management\n@nestjs/typeorm - TypeORM integration\nclass-validator - Validation utilities\nclass-transformer - Transformation utilities\n\n#Rules\n\nDo not push directly to any branch.\nAlways create a new branch for your changes.\nOpen a pull request for review before merging.\nAlways use multi-line comment i.e (/**...*/) comment system instead of the double slash (//) for uproper documentation\n\n#The keyboard shortcut for commenting\nMulti-line comment: Shift + Alt + A (Windows/Linux) or Shift + Option + A (Mac)\n\n#Useful Commands\nnpm run build - Build the project\nnpm run test - Run tests\n\n#License\nThis project is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CloudinaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebSocketModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_exports\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatRoomService \n\nChatRoomService \n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\nCloudinaryService \n\nCloudinaryService \n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nCloudinaryService  -->\n\nCloudinaryModule->CloudinaryService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nMessageModule -->\n\nCloudinaryService->MessageModule\n\n\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SocketIoMiddleware   (src/.../web-socket.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/middlewares/web-socket.middleware.ts\n    \n    \n        \n            \n                \n                    \n                    SocketIoMiddleware\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            CloudinaryProvider   (src/.../cloudinary-provider.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            SocketAuthMiddleware   (src/.../web-socket.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const user: ActiveUserData = request[REQUEST_USER_KEY]\n    return field ? user?.[field] : user \n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: authTypes[]) => \n    SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/cloudinary-provider/cloudinary-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CloudinaryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'Cloudinary',\n  useFactory: (configService: ConfigService) => {\n    return cloudinary.config({\n      cloud_name: configService.get('CLOUDINARY_CLOUD_NAME'),\n      api_key: configService.get('CLOUDINARY_API_KEY'),\n      api_secret: configService.get('CLOUDINARY_API_SECRET'),\n    });\n  },\n  inject: [ConfigService],\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/middlewares/web-socket.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SocketAuthMiddleware\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ():SocketIoMiddleware => {\n    return (client, next) => {\n        try {\n            WebSocketGuardGuard.validateToken(client)\n        } catch (error) {\n            next(error)\n        }\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
