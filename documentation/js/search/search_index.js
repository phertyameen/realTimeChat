var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActiveUserData.html",[0,2.404,1,2.404]],["body/interfaces/ActiveUserData.html",[0,4.038,1,4.038,2,3.965,3,0.259,4,0.229,5,0.229,6,4.443,7,0.714,8,4.443,9,0.889,10,2.156,11,0.384,12,1.943,13,1.024,14,2.625,15,5.118,16,1.648,17,0.59,18,0.018,19,7.038,20,2.546,21,0.259,22,0.015,23,0.015]],["title/controllers/AppController.html",[24,1.56,25,2.61]],["body/controllers/AppController.html",[3,0.25,4,0.222,5,0.222,7,0.689,11,0.371,16,1.498,18,0.019,21,0.25,22,0.015,23,0.015,24,2.901,25,4.293,26,2.083,27,4.293,28,6.665,29,0.155,30,1.36,31,5.979,32,1.545,33,0.575,34,4.995,35,2.315,36,1.052,37,0.419,38,0.814,39,3.978,40,4.293,41,1.545,42,1.88,43,3.831,44,1.702,45,1.052,46,4.995]],["title/modules/AppModule.html",[47,1.274,48,2.61]],["body/modules/AppModule.html",[3,0.165,4,0.146,5,0.146,17,0.31,18,0.019,21,0.165,22,0.011,23,0.011,25,3.785,26,1.948,29,0.076,37,0.505,38,0.537,39,3.859,40,2.833,47,1.848,48,5.069,49,1.533,50,1.241,51,1.724,52,1.724,53,1.533,54,2.837,55,1.724,56,2.833,57,2.833,58,2.833,59,3.859,60,4.155,61,4.155,62,3.859,63,2.443,64,1.724,65,1.724,66,3.296,67,3.485,68,3.485,69,3.236,70,3.296,71,4.014,72,5.069,73,1.724,74,4.014,75,3.296,76,4.669,77,3.296,78,2.529,79,1.451,80,3.296,81,4.014,82,1.968,83,2.301,84,3.296,85,3.296,86,3.296,87,3.296,88,4.014,89,4.669,90,2.119,91,3.259,92,3.296,93,2.529,94,3.296,95,3.582,96,3.296,97,1.968,98,2.529,99,4.669,100,3.296,101,3.296,102,3.296,103,3.296,104,1.451,105,3.296,106,3.296,107,3.296,108,3.296,109,1.375,110,3.296,111,3.296,112,2.833,113,3.296,114,2.833,115,3.296,116,3.296,117,3.296,118,1.451,119,3.296,120,1.724,121,3.296,122,3.296,123,3.296,124,3.296,125,3.296,126,3.296,127,3.296,128,4.014,129,4.014,130,2.301]],["title/injectables/AppService.html",[39,2.232,131,0.458]],["body/injectables/AppService.html",[3,0.263,4,0.233,5,0.233,7,0.724,11,0.39,16,1.544,18,0.018,21,0.263,22,0.015,23,0.015,29,0.158,30,1.401,31,6.08,33,0.604,35,2.385,36,1.105,37,0.357,38,0.855,39,4.222,45,1.105,131,0.777,132,1.623,133,4.509,134,5.246,135,6.81]],["title/controllers/AuthController.html",[24,1.56,67,2.404]],["body/controllers/AuthController.html",[3,0.155,4,0.138,5,0.138,7,0.966,9,1.149,11,0.23,13,0.729,17,0.539,18,0.019,21,0.155,22,0.011,23,0.011,24,2.186,26,1.293,29,0.122,30,0.988,32,1.383,33,0.514,35,2.158,36,1.208,37,0.444,38,0.506,41,0.959,42,1.167,44,1.057,45,0.941,67,2.873,136,2.665,137,2.164,138,3.181,139,2.159,140,4.244,141,1.473,142,3.12,143,3.101,144,3.781,145,3.101,146,4.295,147,2.079,148,2.665,149,3.198,150,3.483,151,4.469,152,4.469,153,4.93,154,3.101,155,3.101,156,1.089,157,0.809,158,2.338,159,1.682,160,4.4,161,2.378,162,4.063,163,3.101,164,3.198,165,3.101,166,3.842,167,3.101,168,3.101,169,5.241,170,1.622,171,3.12,172,2.164,173,3.101,174,3.101,175,3.101,176,1.993,177,3.101,178,3.128,179,2.665,180,2.378,181,1.993,182,2.665,183,2.378,184,2.665,185,1.851,186,3.369,187,3.908,188,4.505,189,1.364,190,3.101,191,3.101,192,1.729,193,1.007,194,1.77,195,3.101,196,2.665,197,3.101,198,3.101,199,2.873,200,3.687,201,4.469,202,2.873,203,4.469,204,3.101,205,1.057,206,3.101,207,3.101,208,3.101,209,3.101]],["title/guards/AuthGuardGuard.html",[91,2.61,210,2.61]],["body/guards/AuthGuardGuard.html",[3,0.157,4,0.139,5,0.139,7,0.622,11,0.233,12,0.971,13,0.735,17,0.424,18,0.019,21,0.157,22,0.011,23,0.011,29,0.122,30,0.997,33,0.519,35,1.986,36,0.949,37,0.446,38,0.512,41,1.395,44,2.168,45,0.661,90,2.018,91,3.147,93,4.048,95,5.026,97,1.874,98,2.408,104,1.984,131,0.553,141,1.484,150,1.546,156,1.098,157,0.816,159,1.181,160,4.048,181,3.927,185,1.874,189,1.381,192,3.216,193,2.065,194,1.243,205,1.07,210,2.191,211,6.109,212,4.536,213,2.698,214,4.509,215,3.459,216,7.088,217,5.277,218,4.509,219,4.509,220,3.139,221,6.929,222,3.139,223,4.509,224,4.425,225,3.139,226,4.425,227,4.509,228,1.984,229,2.691,230,3.459,231,3.459,232,2.514,233,4.509,234,3.683,235,2.698,236,2.408,237,3.139,238,2.408,239,3.139,240,3.139,241,1.642,242,1.881,243,2.698,244,4.509,245,3.139,246,3.139,247,3.139,248,2.018,249,3.139,250,2.171,251,3.139,252,3.139,253,3.139,254,3.139,255,3.139,256,3.139,257,3.139,258,3.139,259,3.139,260,3.139,261,3.139,262,3.139,263,3.139,264,3.139,265,1.642,266,3.139,267,1.75]],["title/modules/AuthModule.html",[47,1.274,59,2.232]],["body/modules/AuthModule.html",[3,0.178,4,0.158,5,0.158,18,0.019,21,0.178,22,0.012,23,0.012,26,2.053,29,0.114,37,0.505,38,0.579,47,1.924,49,1.653,50,1.337,51,1.859,52,1.859,53,1.653,54,2.954,55,2.954,59,4.43,62,2.938,63,2.575,64,1.859,65,1.859,67,3.63,69,2.121,71,3.055,73,1.859,88,3.055,90,2.285,95,2.726,97,2.121,98,2.726,128,3.055,129,3.055,150,1.751,178,4.326,179,3.055,268,3.055,269,3.055,270,3.055,271,3.62,272,3.464,273,3.692,274,3.952,275,3.952,276,3.554,277,3.63,278,2.575,279,3.435,280,3.554,281,3.554,282,3.554,283,3.055,284,3.554,285,2.481,286,2.481,287,3.055,288,3.554,289,3.554,290,3.164,291,3.554,292,3.554,293,3.554,294,3.554,295,2.726,296,3.554,297,3.055,298,3.554,299,3.554,300,3.055,301,3.055,302,3.554,303,3.554,304,3.554]],["title/injectables/AuthService.html",[131,0.458,178,2.232]],["body/injectables/AuthService.html",[3,0.19,4,0.168,5,0.168,7,0.522,9,0.65,11,0.281,13,0.951,17,0.548,18,0.019,21,0.19,22,0.012,23,0.012,29,0.135,30,1.136,33,0.671,35,2.354,36,1.081,37,0.459,38,0.616,41,1.589,42,2.195,44,1.988,45,1.081,109,2.433,131,0.629,132,1.17,138,2.687,139,2.299,140,3.585,141,1.64,142,4.367,144,3.905,146,3.749,150,2.53,156,1.421,157,1.056,161,3.939,162,4.12,164,2.108,170,1.978,178,3.065,180,2.9,183,2.9,192,2.108,193,1.893,205,1.289,274,4.12,275,4.192,278,1.978,283,3.25,290,2.431,305,3.25,306,2.431,307,3.037,308,3.781,309,5.136,310,3.781,311,3.781,312,5.136,313,2.431,314,2.257,315,3.781,316,3.781,317,3.781]],["title/injectables/BcryptProvider.html",[131,0.458,279,2.61]],["body/injectables/BcryptProvider.html",[3,0.205,4,0.182,5,0.182,7,0.565,11,0.304,13,0.883,16,1.762,17,0.509,18,0.019,21,0.205,22,0.013,23,0.013,29,0.126,30,1.198,33,0.624,35,2.432,36,1.141,37,0.413,38,0.668,45,1.141,118,2.957,131,0.792,132,1.267,139,2.353,141,1.941,156,1.32,157,0.981,205,2.069,228,2.843,241,2.834,250,2.039,271,2.834,279,4.238,318,3.52,319,4.657,320,4.657,321,4.657,322,4.657,323,5.554,324,4.095,325,5.418,326,4.657,327,5.219,328,4.095,329,5.418,330,3.52,331,3.782,332,4.657,333,2.445,334,4.095,335,4.095,336,5.418,337,4.095,338,4.095,339,4.095]],["title/modules/ChatModule.html",[47,1.274,60,2.404]],["body/modules/ChatModule.html",[3,0.23,4,0.203,5,0.203,7,0.632,9,1.002,18,0.019,21,0.23,22,0.014,23,0.014,26,2.431,29,0.106,37,0.484,38,0.747,47,2.373,49,2.131,50,1.724,51,2.397,52,2.397,53,2.131,54,3.352,55,3.352,60,4.648,63,3.049,64,2.397,65,2.397,69,2.735,78,3.515,79,2.016,340,3.938,341,3.938,342,3.938,343,4.497,344,4.582,345,3.825,346,4.473,347,4.582,348,4.582,349,3.938,350,3.938,351,4.582]],["title/entities/ChatRoom.html",[345,2.232,352,1.739]],["body/entities/ChatRoom.html",[3,0.186,4,0.165,5,0.165,7,0.512,9,1.233,11,0.276,12,1.568,16,1.512,17,0.666,18,0.019,21,0.186,22,0.012,23,0.012,29,0.086,32,2.01,33,0.748,37,0.393,149,3.22,157,1.266,242,2.115,345,3.026,352,2.887,353,2.846,354,3.189,355,3.741,356,4.761,357,5.775,358,2.215,359,3.22,360,6.207,361,5.775,362,3.71,363,3.259,364,5.07,365,3.71,366,2.497,367,3.259,368,3.705,369,3.71,370,4.536,371,3.189,372,3.461,373,3.71,374,3.189,375,3.71,376,5.07,377,5.07,378,5.07,379,3.71,380,5.335,381,4.358,382,4.358,383,3.189,384,4.358,385,4.358,386,1.328,387,2.59,388,3.189,389,3.71,390,3.71,391,3.71,392,5.07,393,3.71]],["title/controllers/ChatRoomController.html",[24,1.56,346,2.61]],["body/controllers/ChatRoomController.html",[3,0.156,4,0.138,5,0.138,11,0.232,13,1.034,16,1.814,17,0.596,18,0.019,21,0.156,22,0.011,23,0.011,24,1.3,26,1.3,29,0.072,30,0.992,32,2.023,33,0.753,36,1.377,37,0.415,38,0.508,43,2.391,44,1.062,45,1.377,137,2.176,156,1.546,157,1.149,172,3.131,176,4.203,194,1.234,343,3.137,346,3.131,349,2.679,355,3.646,356,4.41,358,2.358,394,2.679,395,3.441,396,4.486,397,2.53,398,4.41,399,3.856,400,3.856,401,4.486,402,3.441,403,3.117,404,5.133,405,4.486,406,3.117,407,2.679,408,3.787,409,3.117,410,3.117,411,2.679,412,4.486,413,3.117,414,2.679,415,4.486,416,3.117,417,4.518,418,3.117,419,4.486,420,3.117,421,2.679,422,4.301,423,4.486,424,3.117,425,2.391,426,3.117,427,2.176,428,3.441,429,3.117,430,3.117,431,3.117,432,3.117,433,3.117,434,3.117,435,3.117,436,3.117,437,3.117,438,3.117,439,3.117,440,3.117,441,3.117,442,3.117,443,3.117,444,3.117,445,4.486,446,3.117,447,3.117,448,3.117]],["title/injectables/ChatRoomService.html",[131,0.458,343,2.232]],["body/injectables/ChatRoomService.html",[3,0.115,4,0.102,5,0.102,7,0.318,9,0.754,11,0.171,13,0.964,16,1.744,17,0.555,18,0.019,21,0.115,22,0.009,23,0.009,29,0.102,30,0.791,33,0.704,36,1.245,37,0.416,38,0.376,41,1.107,42,1.346,45,1.193,79,1.014,131,0.438,132,0.713,141,2.013,156,1.44,157,1.071,159,2.362,193,1.605,205,2.083,228,2.993,250,2.362,267,3.5,343,2.135,345,3.829,350,1.98,355,3.159,356,2.744,358,2.186,359,3.699,370,1.608,386,0.825,395,3.793,397,1.574,398,3.793,399,3.075,400,3.77,402,2.744,404,4.536,407,3.075,408,3.382,411,3.075,414,3.075,421,3.075,422,3.929,428,2.744,449,1.98,450,3.577,451,3.577,452,2.303,453,2.912,454,2.618,455,2.303,456,3.577,457,3.577,458,2.303,459,3.577,460,2.303,461,2.303,462,2.303,463,2.303,464,3.577,465,2.303,466,2.303,467,2.303,468,1.98,469,1.375,470,1.98,471,2.303,472,2.303,473,2.303,474,2.303,475,1.375,476,2.303,477,4.944,478,2.303,479,3.577,480,3.577,481,4.107,482,2.303,483,4.944,484,3.793,485,3.577,486,3.577,487,2.303,488,4.944,489,2.303,490,3.577,491,2.303,492,3.577,493,2.303,494,2.303,495,2.303,496,2.303,497,4.386,498,3.075,499,2.303,500,1.767,501,2.303,502,2.303,503,1.98,504,3.577,505,1.98,506,3.577,507,2.303,508,3.577,509,2.303,510,2.303,511,2.303,512,2.303]],["title/classes/CreateChatRoomDto.html",[29,0.087,408,2.232]],["body/classes/CreateChatRoomDto.html",[3,0.234,4,0.207,5,0.207,11,0.347,12,1.824,13,0.961,16,1.654,17,0.672,18,0.019,21,0.234,22,0.014,23,0.014,29,0.137,32,1.999,33,0.744,37,0.401,104,2.594,157,1.17,355,3.785,370,4.511,388,4.011,408,3.519,513,1.756,514,5.836,515,3.579,516,6.462,517,3.381,518,4.666,519,4.666,520,4.666,521,4.666,522,5.895,523,4.666,524,3,525,5.895,526,4.666,527,3.519,528,1.848,529,4.666,530,4.666]],["title/injectables/CreateGoogleUserProvider.html",[131,0.458,531,2.232]],["body/injectables/CreateGoogleUserProvider.html",[3,0.169,4,0.15,5,0.15,7,0.923,9,1.273,10,1.979,11,0.251,13,0.774,17,0.446,18,0.019,21,0.169,22,0.011,23,0.011,29,0.11,30,1.049,32,1.043,33,0.546,35,1.269,36,0.999,37,0.443,38,0.55,41,1.468,42,1.785,44,1.149,45,0.71,79,1.484,131,0.581,132,1.043,139,1.871,141,1.543,147,2.206,156,1.156,157,0.859,159,2.451,185,2.012,186,3.05,187,3.529,189,1.484,193,1.094,194,1.335,199,2.167,200,3.05,202,3.05,205,1.149,228,2.088,248,2.167,250,1.269,265,1.764,267,1.88,333,2.012,352,2.206,359,2.645,363,3.529,386,1.207,387,2.353,397,2.944,453,3.092,454,2.832,469,2.012,475,2.012,531,2.832,532,2.898,533,3.311,534,3.639,535,5.121,536,4.078,537,2.749,538,4.078,539,2.167,540,3.372,541,4.078,542,3.829,543,2.353,544,2.586,545,3.639,546,3.372,547,4.744,548,3.372,549,3.05,550,2.832,551,4.718,552,4.744,553,3.372,554,2.898,555,2.353,556,2.167,557,2.898,558,2.167,559,3.372,560,3.372,561,2.167,562,3.372]],["title/classes/CreateUserDto.html",[29,0.087,563,1.646]],["body/classes/CreateUserDto.html",[3,0.104,4,0.093,5,0.093,7,0.929,9,1.093,11,0.155,12,1.023,13,0.963,14,2.038,16,1.764,17,0.617,18,0.019,20,1.761,21,0.166,22,0.008,23,0.008,29,0.118,32,1.761,33,0.655,36,0.866,37,0.347,45,0.866,104,1.455,118,3.102,141,0.586,147,1.538,157,1.102,158,1.09,164,1.844,189,0.917,194,1.628,229,1.974,230,1.599,231,1.599,241,1.09,242,1.715,250,0.784,265,1.73,358,1.127,366,2.025,368,1.974,372,1.162,386,0.746,513,0.784,517,2.842,524,1.34,527,2.794,528,0.825,534,2.537,537,2.021,563,1.809,564,4.531,565,1.455,566,2.308,567,3.974,568,2.292,569,1.912,570,2.292,571,3.525,572,4.669,573,3.608,574,3.267,575,3.267,576,2.308,577,3.267,578,3.791,579,2.843,580,3.791,581,2.084,582,2.084,583,3.267,584,4.222,585,2.308,586,1.792,587,2.126,588,2.308,589,2.084,590,2.308,591,2.448,592,1.792,593,2.084,594,1.792,595,2.843,596,2.308,597,1.974,598,2.084,599,2.084,600,2.308,601,2.126,602,2.308,603,2.609,604,1.792,605,2.084,606,2.084,607,2.308,608,2.308,609,2.308,610,2.308,611,2.308,612,2.308,613,2.794,614,2.126,615,2.747,616,3.563,617,2.308,618,2.308,619,2.308,620,2.084,621,2.126,622,3.281,623,2.126,624,1.792,625,2.794,626,2.084,627,2.084,628,2.126,629,1.974,630,1.73,631,1.34,632,1.455,633,3.267,634,2.87,635,2.308,636,2.87,637,4.122,638,1.34,639,2.308,640,1.09,641,1.34,642,2.308,643,1.455,644,1.73,645,1.162,646,1.792,647,1.792,648,2.87,649,2.843,650,1.792,651,1.455,652,1.455,653,2.308,654,1.455,655,1.792,656,1.455,657,2.308,658,1.455,659,2.87,660,1.455,661,1.455,662,1.844,663,1.34,664,1.455]],["title/classes/CreateUserDto-1.html",[29,0.072,563,1.376,665,1.743]],["body/classes/CreateUserDto-1.html",[3,0.106,4,0.094,5,0.094,7,0.931,9,1.147,11,0.157,12,1.033,13,0.967,14,2.047,16,1.76,17,0.619,18,0.019,20,1.256,21,0.106,22,0.008,23,0.008,29,0.138,32,1.769,33,0.658,37,0.349,45,0.872,97,3.54,104,1.469,118,3.09,141,0.593,147,1.552,149,1.176,157,1.106,158,1.103,164,1.861,189,0.928,215,1.618,229,1.259,232,1.861,241,1.746,242,1.965,250,0.794,358,1.138,366,2.041,368,1.993,372,1.176,386,0.755,513,0.794,517,2.856,524,1.356,527,2.812,528,0.835,537,2.033,556,2.146,563,2.259,567,3.583,568,2.31,569,1.927,570,2.31,571,3.54,572,4.693,573,3.719,574,3.288,575,3.288,576,3.288,577,3.288,578,3.583,580,3.288,583,2.892,584,4.102,585,2.33,586,1.813,587,2.146,588,2.33,590,2.33,591,2.465,592,1.813,594,1.813,597,1.993,600,2.33,601,2.146,602,2.33,603,2.627,604,1.813,607,2.33,608,2.33,609,2.33,610,2.33,611,2.33,612,2.33,613,1.993,614,2.146,615,2.758,616,3.288,617,2.33,618,2.33,619,2.33,621,2.146,622,2.663,623,2.146,624,1.813,625,2.812,628,2.663,629,1.993,630,1.746,631,1.356,632,1.472,633,2.892,634,2.892,635,3.288,636,2.892,637,4.14,638,1.356,639,2.33,640,1.103,641,1.356,642,2.33,643,1.472,644,1.746,645,1.861,648,1.472,651,1.472,652,1.472,653,2.33,654,1.472,656,1.472,657,2.33,658,1.472,659,2.892,660,1.472,661,1.472,662,1.861,663,2.146,664,1.472,666,4.549,667,1.618,668,2.561,669,2.33,670,2.869,671,2.109,672,2.109,673,2.109,674,2.109,675,2.869,676,2.109,677,2.109,678,2.109,679,2.109,680,2.109,681,2.109,682,2.109,683,1.813,684,1.618,685,1.813]],["title/injectables/CreateUserProvider.html",[131,0.458,686,2.232]],["body/injectables/CreateUserProvider.html",[3,0.135,4,0.12,5,0.12,7,0.937,9,1.253,10,1.684,11,0.201,13,0.658,14,0.966,17,0.504,18,0.019,21,0.135,22,0.01,23,0.01,29,0.063,30,0.893,32,0.835,33,0.465,36,0.85,37,0.425,38,0.44,41,1.66,42,2.02,44,0.92,45,0.568,50,1.519,79,1.188,109,2.397,118,2.128,120,3.006,131,0.495,132,0.835,139,1.648,141,1.36,149,1.505,156,0.983,157,0.731,159,2.352,185,1.611,186,2.595,187,3.45,189,1.188,193,1.311,194,1.915,199,1.735,200,3.109,202,2.595,205,1.648,228,1.777,232,2.251,248,2.595,250,1.519,265,2.808,267,2.696,271,3.499,278,1.412,314,1.611,331,2.818,352,1.878,363,3.45,386,0.966,397,1.777,427,1.884,453,2.97,454,3.203,468,3.47,469,1.611,475,1.611,505,2.32,533,2.818,539,1.735,543,1.884,544,2.071,545,3.097,549,2.595,554,2.32,556,2.595,558,3.45,561,2.595,563,2.75,566,2.818,686,2.41,687,4.157,688,2.32,689,3.47,690,3.097,691,2.699,692,3.097,693,2.699,694,3.47,695,5.367,696,2.699,697,4.037,698,3.47,699,4.157,700,2.699,701,3.47,702,3.097,703,3.47,704,4.117,705,1.735,706,1.884,707,2.699,708,4.836,709,3.71,710,4.836,711,2.699,712,4.037,713,3.47,714,4.037,715,4.037,716,4.037,717,4.037,718,4.037,719,4.037,720,4.037,721,2.699,722,4.037,723,2.699,724,2.699,725,3.47,726,2.699,727,2.699]],["title/injectables/DataResponseInterceptor.html",[130,2.61,131,0.458]],["body/injectables/DataResponseInterceptor.html",[3,0.241,4,0.213,5,0.213,10,2.505,11,0.357,13,0.783,17,0.451,18,0.019,21,0.241,22,0.015,23,0.015,29,0.111,30,1.328,33,0.553,36,1.012,37,0.409,38,0.783,45,1.012,130,4.191,131,0.736,132,1.487,156,1.17,157,0.87,224,5.263,226,3.686,235,5.63,236,3.686,241,2.514,500,3.686,728,5.162,729,5.162,730,4.131,731,6.005,732,6.005,733,5.63,734,6.861,735,4.805,736,6.005,737,4.805,738,4.805,739,4.805,740,4.805,741,4.805,742,4.805,743,4.805]],["title/classes/EditUserDto.html",[29,0.087,744,2.404]],["body/classes/EditUserDto.html",[3,0.236,4,0.209,5,0.209,7,0.651,10,2.475,11,0.35,12,1.836,13,0.968,17,0.443,18,0.018,20,2.233,21,0.236,22,0.014,23,0.014,29,0.138,32,1.459,33,0.543,37,0.442,358,2.394,366,2.923,367,3.815,397,2.075,425,4.552,513,1.775,517,2.467,528,1.867,550,3.542,563,2.075,565,3.292,629,2.815,630,3.105,706,3.292,744,3.815,745,5.101,746,4.552,747,5.101,748,5.582,749,5.935,750,5.935,751,5.101,752,5.935,753,4.716,754,4.716,755,5.101,756,4.054,757,4.054]],["title/injectables/FindOneByEmail.html",[131,0.458,758,2.232]],["body/injectables/FindOneByEmail.html",[3,0.18,4,0.16,5,0.16,7,0.846,9,1.296,11,0.267,13,0.809,14,2.522,16,1.492,17,0.466,18,0.019,21,0.18,22,0.012,23,0.012,29,0.083,30,1.098,33,0.571,35,1.868,36,1.045,37,0.417,38,0.586,41,1.535,42,1.868,45,0.757,79,1.583,120,3.205,131,0.608,132,1.113,139,1.937,141,1.598,149,2.006,156,1.209,157,0.899,159,1.868,193,1.168,194,1.965,205,1.226,228,2.501,234,3.464,248,3.191,265,2.597,267,2.767,352,2.308,386,1.288,453,3.47,454,3.392,469,2.147,475,2.147,481,3.807,533,3.464,539,2.312,555,3.464,558,2.312,561,2.312,615,2.643,699,3.092,704,3.807,705,2.312,709,3.807,758,3.657,759,4.359,760,3.092,761,4.266,762,3.597,763,3.464,764,4.266,765,4.963,766,3.597,767,4.276,768,3.807,769,2.759,770,3.597,771,3.597,772,3.597]],["title/injectables/FindOneByGoogleIdProvider.html",[131,0.458,773,2.232]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.214,4,0.189,5,0.189,7,0.588,9,1.17,11,0.317,13,0.907,16,1.508,17,0.523,18,0.019,21,0.214,22,0.013,23,0.013,29,0.099,30,1.23,33,0.64,35,2.093,36,0.898,37,0.447,38,0.695,41,1.721,42,2.093,45,0.898,79,1.876,109,1.778,131,0.682,132,1.319,139,2.11,141,1.741,156,1.355,157,1.007,170,2.23,193,1.384,205,1.453,358,2.237,386,1.526,453,3.233,454,3.696,469,2.544,475,2.544,533,3.883,537,2.599,539,2.74,569,2.587,615,2.88,705,2.74,759,4.75,761,4.781,767,3.883,769,3.27,773,3.32,774,3.664,775,4.781,776,4.263,777,4.781,778,4.263]],["title/injectables/GenerateTokensProvider.html",[131,0.458,272,1.956]],["body/injectables/GenerateTokensProvider.html",[1,2.653,3,0.139,4,0.123,5,0.123,7,0.679,9,1.239,10,1.721,11,0.207,13,0.948,14,0.995,15,1.94,17,0.512,18,0.019,20,2.293,21,0.139,22,0.01,23,0.01,29,0.064,30,0.912,33,0.566,36,1.146,37,0.429,38,0.453,41,1.276,42,1.553,44,1.677,45,0.869,73,1.454,109,1.16,131,0.667,132,0.86,139,2.077,140,2.88,141,1.713,146,3.739,150,3.475,156,1.326,157,0.891,158,2.159,160,4.462,166,3.547,170,2.159,171,2.88,192,2.744,193,1.597,194,2.156,205,1.406,250,1.046,272,2.159,278,1.454,285,1.94,286,2.88,306,1.787,307,2.852,313,1.787,314,1.659,352,1.919,358,1.856,387,1.94,404,3.775,453,1.369,596,2.88,614,2.653,669,4.404,702,3.165,779,4.177,780,2.132,781,4.126,782,5.239,783,4.126,784,4.126,785,5.571,786,4.23,787,4.177,788,2.78,789,4.126,790,2.78,791,4.126,792,4.68,793,4.126,794,5.817,795,4.177,796,2.78,797,3.547,798,5.445,799,5.445,800,2.78,801,4.126,802,3.165,803,2.389,804,2.78,805,2.132,806,2.78,807,2.389,808,2.389,809,2.389,810,2.389,811,2.389,812,2.389,813,4.126,814,2.78,815,2.88,816,4.126,817,4.126,818,2.389]],["title/classes/GetuserParamDto.html",[29,0.087,819,2.404]],["body/classes/GetuserParamDto.html",[3,0.251,4,0.222,5,0.222,7,0.691,11,0.372,12,1.906,13,1.005,17,0.627,18,0.019,20,2.319,21,0.251,22,0.015,23,0.015,29,0.166,32,1.549,33,0.577,37,0.419,358,2.373,359,3.435,366,3.035,367,3.961,513,1.885,528,1.983,640,2.62,755,4.305,819,3.961,820,4.305,821,6.161,822,5.009,823,5.009,824,5.009,825,5.009]],["title/controllers/GoogleAuthenticationController.html",[24,1.56,277,2.404]],["body/controllers/GoogleAuthenticationController.html",[3,0.187,4,0.165,5,0.165,7,0.927,9,1.119,11,0.277,13,0.607,17,0.35,18,0.019,21,0.187,22,0.012,23,0.012,24,2.414,26,1.554,29,0.086,30,1.124,32,1.152,33,0.429,36,1.071,37,0.457,38,0.607,41,1.573,44,1.27,45,0.784,137,2.6,138,1.949,139,1.972,147,3.37,148,3.202,150,3.063,153,4.37,156,0.907,157,0.675,172,2.6,176,3.268,181,2.395,182,3.202,184,3.202,185,2.224,186,3.268,187,3.721,189,1.639,193,1.209,194,2.013,196,3.202,199,2.395,200,3.268,202,3.268,273,3.629,277,3.721,295,2.858,535,4.37,537,2.842,543,2.6,544,2.858,550,3.035,555,2.6,694,4.37,826,3.9,827,3.202,828,3.726,829,5.345,830,3.202,831,4.419,832,4.37,833,3.726,834,3.726,835,4.37,836,5.084,837,3.202,838,3.202,839,3.202,840,3.726,841,3.726,842,3.726,843,3.726]],["title/injectables/GoogleAuthenticationService.html",[131,0.458,273,2.085]],["body/injectables/GoogleAuthenticationService.html",[3,0.129,4,0.115,5,0.115,7,0.65,9,1.155,11,0.192,12,1.208,13,0.636,14,1.685,15,1.802,17,0.442,18,0.019,21,0.129,22,0.009,23,0.009,29,0.06,30,0.863,33,0.604,35,1.469,36,0.991,37,0.419,38,0.421,41,1.623,42,2.231,44,1.604,45,0.822,50,1.469,73,1.351,109,2.644,120,1.351,131,0.478,132,0.799,138,2.042,139,1.604,141,1.323,147,3.076,150,3.196,156,0.951,157,0.707,158,2.042,159,1.469,170,1.351,193,1.924,194,2.078,205,1.604,234,2.725,241,1.351,248,1.66,250,2.231,265,2.463,267,1.439,272,3.395,273,2.177,278,1.351,286,1.802,287,2.219,290,1.66,306,1.66,307,2.855,313,1.66,314,1.541,358,1.33,397,1.136,537,2.697,550,3.132,557,3.356,558,1.66,561,1.66,566,2.725,568,2.625,569,2.441,570,2.625,596,2.725,601,2.509,669,2.725,689,2.219,702,2.995,725,2.219,763,2.725,767,1.802,768,1.98,779,1.98,782,5.096,787,4.025,802,4.025,805,1.98,815,3.663,829,4.844,830,3.356,831,3.811,835,2.219,838,2.219,839,2.219,844,4.844,845,2.219,846,3.904,847,5.636,848,5.928,849,5.248,850,3.904,851,3.356,852,2.995,853,4.047,854,2.582,855,2.582,856,2.582,857,4.708,858,2.219,859,2.582,860,2.582,861,2.582,862,2.582,863,3.904,864,2.582,865,2.582,866,2.582,867,2.582,868,3.904,869,2.582,870,2.582,871,2.582,872,2.582,873,2.582,874,2.582,875,3.904,876,2.582,877,2.582,878,2.582,879,2.582,880,2.582,881,2.582,882,2.582,883,2.582,884,2.582,885,2.582,886,2.582,887,2.582,888,2.582]],["title/modules/GoogleAuthticationModule.html",[47,1.274,889,2.61]],["body/modules/GoogleAuthticationModule.html",[3,0.252,4,0.223,5,0.223,18,0.018,21,0.252,22,0.015,23,0.015,26,2.575,29,0.116,37,0.455,38,0.819,47,2.277,49,2.336,50,1.89,51,2.628,52,2.628,53,2.336,54,3.495,55,2.628,63,3.229,64,2.628,65,2.628,273,4.06,277,4.295,295,3.853,297,4.318,537,1.989,826,3.853,837,4.318,889,5.083,890,4.318,891,5.023,892,5.023]],["title/interfaces/GoogleInterface.html",[0,2.404,542,2.404]],["body/interfaces/GoogleInterface.html",[0,3.834,2,3.647,3,0.238,4,0.211,5,0.211,7,0.656,11,0.353,12,1.845,14,2.572,16,1.878,17,0.642,18,0.018,21,0.238,22,0.014,23,0.014,157,1.238,358,2.033,537,2.581,542,3.834,568,3.811,569,3.179,570,3.811,591,3.12,603,3.326,893,4.086,894,5.965]],["title/classes/GoogleTokenDto.html",[29,0.087,831,2.404]],["body/classes/GoogleTokenDto.html",[3,0.261,4,0.232,5,0.232,7,0.72,11,0.387,12,1.953,16,1.72,17,0.638,18,0.018,21,0.261,22,0.015,23,0.015,29,0.164,32,1.613,33,0.6,37,0.355,150,3.561,513,1.963,528,2.065,630,3.553,831,4.538,895,5.428,896,4.483,897,5.215]],["title/injectables/HashingProvider.html",[131,0.458,271,1.956]],["body/injectables/HashingProvider.html",[3,0.225,4,0.199,5,0.199,7,0.62,11,0.334,13,0.938,16,1.793,17,0.54,18,0.018,21,0.225,22,0.014,23,0.014,29,0.147,30,1.272,33,0.662,36,1.211,37,0.306,38,0.732,118,1.975,131,0.705,132,1.389,142,4.015,156,1.401,157,1.041,228,2.945,271,3.009,301,6.329,320,4.944,321,4.944,322,4.944,323,5.456,326,4.944,327,5.456,330,3.859,331,4.015,333,3.433,898,3.859,899,5.752,900,4.489,901,5.752,902,6.693,903,4.489,904,5.752]],["title/modules/MailModule.html",[47,1.274,905,2.404]],["body/modules/MailModule.html",[3,0.201,4,0.178,5,0.178,9,0.69,10,1.674,18,0.019,21,0.201,22,0.013,23,0.013,29,0.093,37,0.495,38,0.654,47,2.048,49,1.866,50,1.51,51,2.099,52,2.099,53,1.866,54,3.144,55,3.144,63,2.796,64,2.099,65,2.099,69,2.395,72,4.594,73,2.099,81,3.449,82,3.19,83,2.8,104,1.765,109,1.674,112,3.449,114,3.449,138,2.099,159,1.51,242,1.674,644,2.796,713,3.449,905,4.504,906,3.449,907,3.449,908,3.449,909,4.751,910,4.012,911,4.594,912,3.449,913,4.012,914,5.166,915,3.078,916,4.012,917,4.012,918,5.345,919,4.012,920,5.345,921,4.012,922,4.012,923,4.012,924,4.012,925,4.012,926,4.012,927,4.012,928,4.012,929,4.012,930,4.012,931,4.012,932,4.012,933,4.012,934,4.012,935,4.012,936,4.012,937,3.449]],["title/injectables/MailProvider.html",[131,0.458,909,2.404]],["body/injectables/MailProvider.html",[3,0.223,4,0.198,5,0.198,9,1.147,11,0.331,13,0.933,14,1.595,17,0.538,18,0.019,21,0.223,22,0.014,23,0.014,29,0.103,30,1.266,33,0.659,36,0.938,37,0.454,38,0.726,41,1.771,42,1.677,44,1.518,82,2.659,83,3.11,109,1.858,131,0.701,132,1.378,139,2.155,141,1.778,156,1.394,157,1.209,193,1.446,205,1.518,226,3.418,228,1.961,387,3.11,818,4.92,909,3.679,914,3.83,915,3.418,938,3.83,939,6.324,940,4.455,941,6.674,942,4.455,943,4.455,944,4.455,945,4.455,946,4.455,947,4.455,948,4.455,949,4.455,950,4.455,951,4.455,952,5.724,953,3.83,954,4.455,955,4.455,956,4.455]],["title/classes/MatchPasswordsConstraint.html",[29,0.087,645,2.085]],["body/classes/MatchPasswordsConstraint.html",[3,0.121,4,0.107,5,0.107,7,0.898,9,0.994,11,0.18,13,0.606,14,1.619,16,1.738,17,0.584,18,0.019,20,1.398,21,0.186,22,0.009,23,0.009,29,0.134,30,0.822,33,0.428,36,1.217,37,0.373,45,0.952,104,1.065,118,3.121,141,0.68,147,1.125,156,0.905,157,1.09,158,1.266,164,1.349,189,1.065,194,1.791,229,3.029,230,2.85,231,2.85,241,1.944,242,1.887,250,0.911,265,2.655,358,0.825,366,1.83,368,2.218,372,1.349,386,0.866,513,0.911,517,3.024,524,1.555,527,3.029,528,0.958,534,1.856,537,1.791,563,1.635,564,3.47,565,1.689,566,1.689,567,4.335,568,1.349,569,1.125,570,1.349,571,3.029,573,3.223,574,2.594,575,2.594,576,1.689,577,2.594,578,3.157,579,2.08,580,3.822,583,3.542,584,4.416,585,1.689,587,1.555,588,1.689,590,1.689,591,1.944,595,2.08,596,1.689,597,1.444,600,1.689,601,1.555,602,1.689,603,2.072,607,1.689,608,1.689,609,1.689,610,1.689,611,1.689,612,1.689,613,3.268,614,1.555,615,2.36,616,3.157,617,1.689,618,1.689,619,1.689,621,1.555,622,3.869,623,1.555,625,2.218,628,1.555,629,2.218,630,1.944,631,2.908,632,1.689,633,4.034,634,3.542,635,3.157,636,4.201,637,4.335,638,1.555,639,2.594,640,1.266,641,2.389,642,3.157,643,1.689,644,1.944,645,2.072,646,3.194,647,3.194,648,4.034,649,4.362,650,3.194,651,2.594,652,1.689,653,2.594,654,1.689,655,3.194,656,2.594,657,2.594,658,1.689,659,3.157,660,1.689,661,1.689,662,2.072,663,1.555,664,1.689,957,3.194,958,2.42,959,2.42]],["title/classes/MatchPasswordsConstraint-1.html",[29,0.072,645,1.743,665,1.743]],["body/classes/MatchPasswordsConstraint-1.html",[3,0.13,4,0.115,5,0.115,7,0.877,9,1.061,11,0.193,13,0.64,14,1.693,16,1.737,17,0.597,18,0.019,20,0.979,21,0.13,22,0.01,23,0.01,29,0.147,30,0.868,33,0.452,36,0.827,37,0.385,45,0.996,97,2.822,104,1.144,118,3.036,141,0.731,147,1.209,156,0.956,157,1.117,158,1.36,164,1.45,189,1.144,215,1.995,229,2.343,232,1.45,241,2.474,242,1.637,250,0.979,358,0.886,366,1.934,368,2.343,372,1.45,386,0.931,513,0.979,517,3.11,524,1.672,527,3.144,528,1.03,537,1.872,556,1.672,563,2.081,567,3.946,568,1.45,569,1.209,570,1.45,571,3.144,573,3.441,574,2.74,575,2.74,576,2.74,577,2.74,578,3.3,580,3.3,583,2.74,584,4.259,585,1.815,587,1.672,588,1.815,590,1.815,591,2.054,597,1.552,600,1.815,601,1.672,602,1.815,603,2.189,607,1.815,608,1.815,609,1.815,610,1.815,611,1.815,612,1.815,613,1.552,614,1.672,615,2.45,616,2.74,617,1.815,618,1.815,619,1.815,621,1.672,622,3.04,623,1.672,625,2.343,628,2.523,629,2.343,630,2.054,631,3.04,632,1.815,633,3.676,634,3.676,635,3.946,636,4.307,637,4.434,638,1.672,639,2.74,640,1.36,641,2.523,642,3.3,643,1.815,644,2.054,645,2.636,648,3.676,651,2.74,652,1.815,653,2.74,654,1.815,656,2.74,657,2.74,658,1.815,659,3.3,660,1.815,661,1.815,662,2.189,663,2.523,664,1.815,666,3.627,667,1.995,668,1.995,669,1.815,670,2.235,675,2.235,683,2.235,684,1.995,685,2.235,957,3.374,960,2.601,961,2.601]],["title/classes/Paginated.html",[29,0.087,962,2.61]],["body/classes/Paginated.html",[3,0.254,4,0.225,5,0.225,10,2.588,11,0.376,12,1.919,16,1.511,17,0.674,18,0.018,20,1.906,21,0.254,22,0.015,23,0.015,29,0.117,33,0.772,513,1.906,591,2.65,795,3.886,962,4.331,963,4.355,964,5.145,965,5.765,966,5.066,967,6.204,968,5.066,969,5.066,970,5.066,971,5.066,972,4.355,973,5.066,974,5.066,975,5.066,976,4.355,977,5.066,978,5.066]],["title/modules/PaginationModule.html",[47,1.274,61,2.404]],["body/modules/PaginationModule.html",[3,0.251,4,0.222,5,0.222,18,0.018,21,0.251,22,0.015,23,0.015,26,2.089,29,0.116,37,0.419,38,0.817,47,2.1,49,2.329,50,1.885,51,2.62,52,2.62,53,2.329,54,3.491,55,3.223,61,4.74,63,3.223,64,2.62,65,2.62,69,2.99,979,4.305,980,4.305,981,4.305,982,4.879,983,5.009,984,5.009,985,5.009,986,5.009]],["title/injectables/PaginationProvider.html",[131,0.458,982,2.404]],["body/injectables/PaginationProvider.html",[3,0.171,4,0.151,5,0.151,10,1.42,11,0.253,13,0.779,17,0.518,18,0.019,20,1.797,21,0.171,22,0.012,23,0.012,29,0.079,30,1.056,33,0.55,36,0.717,37,0.445,38,0.555,41,1.478,44,1.16,45,0.717,90,2.188,109,1.42,131,0.585,132,1.053,139,1.88,141,1.551,156,1.344,157,0.865,159,1.281,176,3.07,193,1.105,205,1.628,228,2.102,232,3.513,250,2.576,386,1.219,397,1.498,453,3.103,500,4.233,591,1.781,603,1.898,665,3.513,733,2.926,795,2.611,962,3.334,964,2.611,965,2.926,972,4.743,976,2.926,982,3.07,987,2.926,988,5.518,989,3.404,990,3.404,991,3.404,992,4.175,993,3.404,994,2.611,995,3.404,996,3.404,997,2.926,998,3.404,999,3.404,1000,3.404,1001,3.404,1002,3.404,1003,3.404,1004,4.776,1005,4.776,1006,3.404,1007,2.926,1008,2.376,1009,5.982,1010,6.846,1011,3.404,1012,2.926,1013,4.776,1014,3.404,1015,3.404,1016,4.776,1017,3.404,1018,3.404,1019,3.404,1020,3.404,1021,3.404,1022,2.926,1023,3.404,1024,3.404,1025,3.404,1026,3.404,1027,3.404,1028,3.404,1029,5.518,1030,3.404,1031,3.404,1032,3.404,1033,4.776,1034,3.404,1035,3.404,1036,3.404,1037,3.404,1038,3.404,1039,3.404,1040,3.404,1041,3.404]],["title/classes/PaginationQueryDto.html",[29,0.087,992,2.61]],["body/classes/PaginationQueryDto.html",[3,0.247,4,0.219,5,0.219,11,0.366,12,1.886,13,1.128,17,0.573,18,0.019,20,2.295,21,0.247,22,0.015,23,0.015,29,0.141,32,1.886,33,0.702,37,0.335,242,2.544,484,4.677,513,1.854,527,3.953,528,1.95,662,3.4,665,3.4,992,4.256,1008,4.256,1042,5.693,1043,4.234,1044,4.677,1045,6.098,1046,4.925,1047,4.925,1048,6.623,1049,4.925,1050,4.925]],["title/classes/RefreshTokenDto.html",[29,0.087,144,2.232]],["body/classes/RefreshTokenDto.html",[3,0.258,4,0.229,5,0.229,7,0.711,11,0.383,12,1.94,16,1.713,17,0.635,18,0.018,21,0.258,22,0.015,23,0.015,29,0.163,32,1.594,33,0.593,37,0.351,140,5.03,144,3.743,146,4.031,513,1.94,517,3.28,528,2.041,630,3.28,1051,4.431,1052,6.27,1053,4.431,1054,5.154]],["title/injectables/RefreshTokensProvider.html",[131,0.458,274,2.232]],["body/injectables/RefreshTokensProvider.html",[3,0.18,4,0.159,5,0.159,7,0.496,9,0.852,11,0.267,13,0.808,15,2.506,17,0.466,18,0.019,21,0.18,22,0.012,23,0.012,29,0.132,30,1.096,33,0.571,35,1.865,36,0.756,37,0.463,38,0.585,41,1.533,44,2.086,45,0.756,73,1.878,109,2.553,120,1.878,131,0.607,132,1.111,139,1.935,141,1.596,144,3.834,146,4.129,150,3.272,156,1.207,157,0.897,170,1.878,183,2.754,192,2.002,193,1.987,205,1.935,250,1.865,272,3.202,274,2.958,278,1.878,285,2.506,286,2.506,290,2.308,306,2.308,307,3.053,313,2.308,314,2.143,333,2.958,550,2.143,631,2.308,780,2.754,785,6.052,786,4.88,787,4.696,802,2.754,803,3.086,805,2.754,807,3.086,808,3.086,809,3.086,810,3.086,811,3.086,812,3.086,815,3.459,1055,4.88,1056,4.956,1057,5.262,1058,3.59,1059,4.956,1060,3.59,1061,4.956,1062,3.086,1063,3.59,1064,3.59,1065,3.59,1066,3.59,1067,3.086]],["title/classes/SignInDto.html",[29,0.087,162,2.232]],["body/classes/SignInDto.html",[3,0.243,4,0.215,5,0.215,7,0.669,9,1.183,11,0.36,12,1.867,14,2.534,16,1.676,17,0.567,18,0.018,21,0.243,22,0.015,23,0.015,29,0.16,32,1.867,33,0.695,37,0.33,118,3.115,162,4.107,366,2.973,513,1.823,517,3.157,528,1.918,629,3.603,630,3.439,1053,4.164,1068,4.164,1069,4.845,1070,4.845,1071,5.188,1072,6.036,1073,4.845]],["title/injectables/SignInProvider.html",[131,0.458,275,2.232]],["body/injectables/SignInProvider.html",[3,0.177,4,0.157,5,0.157,7,0.677,9,1.136,11,0.262,13,0.799,17,0.461,18,0.019,21,0.177,22,0.012,23,0.012,29,0.131,30,1.084,33,0.564,35,1.845,36,0.744,37,0.435,38,0.576,41,1.516,44,1.918,45,0.744,109,1.474,118,2.477,120,1.848,131,0.601,132,1.093,139,1.918,141,1.582,142,3.421,156,1.194,157,0.888,159,2.118,161,3.76,162,3.812,164,2.733,170,1.848,180,2.71,192,3.138,193,1.827,205,1.918,229,2.109,234,2.466,265,2.945,267,3.39,271,3.546,272,3.18,275,2.926,278,1.848,290,2.271,306,2.271,307,3.041,313,2.271,314,2.109,331,3.421,333,2.926,558,2.271,561,2.271,644,1.848,704,2.71,709,2.71,768,4.663,815,2.466,1057,5.226,1062,3.037,1067,3.037,1074,4.838,1075,3.037,1076,3.533,1077,3.533,1078,5.629,1079,5.629,1080,3.533,1081,3.533,1082,3.533,1083,4.902,1084,4.902,1085,3.533,1086,5.629,1087,3.533,1088,3.533,1089,3.533,1090,3.533]],["title/classes/UpdateChatRoomDto.html",[29,0.087,422,2.404]],["body/classes/UpdateChatRoomDto.html",[3,0.275,4,0.244,5,0.244,18,0.018,21,0.275,22,0.016,23,0.016,29,0.127,37,0.443,355,3.631,397,2.416,408,3.277,422,4.186,428,4.211,513,2.066,515,4.211,748,4.718,751,5.597,756,4.718,757,4.718,1091,4.718,1092,6.512]],["title/entities/User.html",[9,0.643,352,1.739]],["body/entities/User.html",[3,0.135,4,0.119,5,0.119,7,0.666,9,1.252,11,0.2,12,1.246,13,0.982,14,2.054,16,1.628,17,0.617,18,0.019,20,1.516,21,0.135,22,0.01,23,0.01,29,0.093,32,1.986,33,0.739,37,0.391,104,2.65,118,2.124,120,2.107,147,1.252,149,1.501,157,0.97,242,2.014,345,3.594,352,2.492,353,2.064,355,3.199,358,1.955,359,2.691,366,2.966,367,2.589,368,2.404,371,2.313,372,2.988,374,2.313,380,4.932,381,4.149,382,3.462,383,4.149,384,3.462,385,3.462,386,0.963,395,4.401,470,2.313,498,2.313,537,1.911,549,1.73,568,2.691,569,2.245,570,2.691,571,3.832,573,3.832,587,3.871,591,2.107,597,1.606,603,2.246,613,3.425,615,1.252,625,1.606,638,1.73,640,1.408,644,2.803,663,1.73,665,1.501,668,3.09,747,3.462,797,2.313,964,2.064,1071,3.462,1093,2.313,1094,4.149,1095,4.827,1096,2.691,1097,2.691,1098,4.028,1099,4.028,1100,6.563,1101,6.419,1102,2.691,1103,4.606,1104,2.691,1105,4.028,1106,2.691,1107,2.691,1108,2.691,1109,2.691,1110,2.691,1111,2.691,1112,4.028,1113,4.028,1114,2.691,1115,2.691,1116,2.691,1117,2.691,1118,2.064,1119,2.691,1120,2.691,1121,2.691,1122,2.691]],["title/controllers/UserController.html",[24,1.56,68,2.404]],["body/controllers/UserController.html",[3,0.101,4,0.089,5,0.089,7,0.987,9,1.299,10,2.233,11,0.15,13,0.916,17,0.503,18,0.019,20,2.604,21,0.101,22,0.008,23,0.008,24,1.677,26,0.841,29,0.047,30,0.712,32,1.421,33,0.529,35,1.728,36,1.229,37,0.364,38,0.329,41,0.624,42,0.759,43,1.546,44,0.687,45,0.967,68,2.07,104,1.417,137,1.407,139,2.186,156,1.119,157,1.057,158,1.685,159,2.014,171,3.504,172,1.407,176,2.07,185,1.203,186,3.227,187,3.227,188,3.456,189,0.887,192,1.124,194,2.311,199,2.952,200,2.952,202,3.441,228,2.021,242,1.916,307,0.887,358,2.403,359,3.577,363,2.585,397,1.769,402,3.085,417,4.829,425,2.47,427,1.407,543,3.205,545,2.47,549,2.07,563,2.715,573,2.984,613,1.922,621,2.07,628,2.952,644,2.8,665,2.56,690,2.47,692,1.546,703,2.768,706,2.248,744,3.966,746,1.546,763,2.248,819,3.751,832,4.601,852,2.47,994,3.523,1007,3.947,1008,4.662,1044,4.31,1123,1.733,1124,2.768,1125,2.768,1126,3.22,1127,4.021,1128,2.016,1129,3.22,1130,2.016,1131,2.016,1132,3.22,1133,1.733,1134,2.016,1135,5.836,1136,3.22,1137,2.016,1138,2.016,1139,2.768,1140,2.768,1141,2.016,1142,2.016,1143,4.829,1144,2.016,1145,2.016,1146,2.768,1147,2.016,1148,2.768,1149,4.592,1150,2.016,1151,2.016,1152,2.016,1153,3.22,1154,3.22,1155,2.016,1156,2.016,1157,2.768,1158,3.947,1159,3.22,1160,4.021,1161,2.016,1162,4.592,1163,2.016,1164,1.733,1165,1.733,1166,1.733,1167,4.592,1168,3.22,1169,2.016,1170,2.016,1171,3.22,1172,2.016,1173,2.016,1174,2.016,1175,2.016,1176,2.016,1177,2.016,1178,2.016,1179,2.016,1180,1.733,1181,2.016,1182,2.016,1183,2.016,1184,2.016,1185,2.016]],["title/modules/UserModule.html",[47,1.274,62,2.232]],["body/modules/UserModule.html",[3,0.195,4,0.173,5,0.173,9,0.669,14,1.392,18,0.019,21,0.195,22,0.013,23,0.013,26,2.183,29,0.09,37,0.497,38,0.634,47,2.016,49,1.809,50,1.463,51,2.034,52,2.034,53,1.809,54,3.095,55,3.095,59,3.124,62,4.497,63,2.738,64,2.034,65,2.034,68,3.803,69,3.124,78,2.983,79,1.711,278,2.738,307,3.236,531,4.061,569,1.809,615,2.434,686,4.061,705,2.5,758,4.061,773,4.061,905,4.373,1164,3.343,1186,3.343,1187,3.343,1188,3.343,1189,3.889,1190,3.889,1191,3.889,1192,3.889,1193,3.343,1194,5.234,1195,3.889,1196,3.889,1197,3.889,1198,3.889]],["title/injectables/UserService.html",[131,0.458,307,1.646]],["body/injectables/UserService.html",[3,0.088,4,0.078,5,0.078,7,0.792,9,1.286,10,2.096,11,0.13,13,0.935,14,2.113,16,1.349,17,0.539,18,0.019,20,2.557,21,0.088,22,0.007,23,0.01,29,0.085,30,0.637,33,0.66,35,2.401,36,1.379,37,0.42,38,0.286,41,0.891,42,1.76,44,1.444,45,1.243,50,0.661,79,0.773,104,0.773,109,0.733,131,0.353,132,0.543,139,2.375,141,1.879,147,1.703,156,1.473,157,1.039,159,1.76,170,2.628,171,2.01,193,1.518,194,2.561,205,1.248,228,2.716,307,1.267,333,1.048,352,1.339,358,2.348,359,3.198,363,2.723,386,0.629,397,1.267,398,2.809,427,1.226,453,2.475,454,2.186,469,1.048,475,1.048,481,2.209,531,3.424,536,3.147,537,2.444,538,2.476,539,1.129,541,2.476,542,3.006,549,3.006,551,2.476,555,1.226,556,2.354,563,2.335,569,1.703,615,1.339,686,3.424,690,2.209,692,2.209,705,1.129,706,2.01,744,3.411,746,1.347,758,3.424,763,2.01,764,1.51,767,2.957,769,2.209,773,3.424,775,2.476,777,2.476,792,2.476,819,3.561,851,1.51,852,2.209,994,2.209,1008,3.507,1044,3.249,1124,2.476,1125,2.476,1133,2.476,1139,2.476,1140,2.476,1143,2.476,1146,2.476,1157,4.02,1158,2.476,1165,1.51,1166,1.51,1180,1.51,1193,1.51,1199,1.51,1200,2.88,1201,2.88,1202,2.88,1203,1.756,1204,1.756,1205,1.756,1206,1.756,1207,2.88,1208,2.88,1209,1.756,1210,2.88,1211,2.476,1212,1.756,1213,1.756,1214,2.88,1215,1.756,1216,4.236,1217,2.88,1218,2.88,1219,1.756,1220,2.88,1221,2.88,1222,1.756,1223,1.756,1224,1.756,1225,1.51,1226,1.756,1227,1.756,1228,1.756,1229,1.756,1230,1.756,1231,2.88,1232,1.756,1233,2.88,1234,1.756,1235,2.88,1236,1.756,1237,2.88,1238,1.756,1239,1.756,1240,1.756,1241,1.756]],["title/coverage.html",[1242,4.381]],["body/coverage.html",[0,2.775,1,1.9,5,0.131,6,2.541,9,0.508,17,0.278,18,0.019,22,0.01,23,0.01,24,2.488,25,2.063,27,2.541,29,0.164,39,1.764,53,1.375,67,1.9,68,1.9,91,2.063,93,2.267,97,2.577,130,2.063,131,0.891,133,2.541,136,2.541,138,1.546,144,1.764,159,1.112,162,1.764,178,1.764,210,2.063,212,2.541,213,2.541,238,2.267,271,1.546,272,1.546,273,1.648,274,1.764,275,1.764,277,1.9,279,2.063,305,2.541,307,1.301,318,2.541,343,1.764,345,1.764,346,2.063,352,2.008,354,2.541,355,2.407,367,1.9,394,2.541,408,1.764,422,1.9,449,2.541,503,5.53,514,2.541,515,3.312,531,1.764,532,2.541,542,1.9,563,1.9,564,3.312,565,3.56,615,2.008,645,2.407,666,3.312,667,3.312,686,1.764,687,2.541,688,2.541,728,2.541,729,2.541,730,2.541,744,1.9,745,2.541,758,1.764,759,3.312,760,2.541,773,1.764,774,2.541,779,2.267,780,3.312,819,1.9,820,2.541,826,2.267,827,2.541,831,1.9,844,2.541,845,2.541,893,2.541,895,2.541,896,2.541,898,2.541,909,1.9,938,2.541,962,2.063,963,2.541,982,1.9,987,2.541,992,2.063,1042,2.541,1043,2.541,1051,2.541,1055,2.541,1068,2.541,1074,2.541,1075,2.541,1091,2.541,1093,2.541,1094,2.541,1103,6.455,1123,2.541,1199,2.541,1242,2.541,1243,2.541,1244,2.956,1245,6.433,1246,6.595,1247,3.711,1248,5.609,1249,6.433,1250,2.541,1251,2.541,1252,2.541,1253,2.541,1254,4.317,1255,2.956,1256,2.956,1257,4.317,1258,4.317,1259,4.317,1260,4.317,1261,5.609,1262,5.609,1263,4.317,1264,4.317,1265,2.956,1266,2.956,1267,2.956,1268,2.956,1269,2.956,1270,2.956,1271,5.1,1272,2.541,1273,2.956,1274,2.956,1275,2.956,1276,2.956]],["title/dependencies.html",[50,1.692,1277,2.687]],["body/dependencies.html",[18,0.019,22,0.015,23,0.015,29,0.141,38,0.799,50,1.843,73,2.562,79,2.155,82,2.924,83,3.419,90,3.149,138,2.562,189,2.155,236,3.757,285,3.419,332,4.21,386,1.753,528,1.94,537,1.94,640,2.562,858,4.21,915,3.757,997,4.21,1278,4.898,1279,4.898,1280,4.898,1281,6.607,1282,4.898,1283,6.077,1284,4.898,1285,4.898,1286,4.898,1287,4.898,1288,4.898,1289,4.898,1290,4.898,1291,4.898,1292,4.898,1293,4.898,1294,4.898,1295,4.898,1296,4.898,1297,4.898,1298,4.898,1299,4.898,1300,4.898,1301,4.898]],["title/miscellaneous/enumerations.html",[1302,1.866,1303,3.865]],["body/miscellaneous/enumerations.html",[9,1.172,11,0.391,18,0.018,22,0.015,23,0.015,181,4.383,193,2.061,370,4.431,372,3.54,571,3.79,625,3.14,662,4.041,1302,3.14,1303,4.523,1304,5.261,1305,5.261,1306,5.261,1307,5.261,1308,5.261,1309,5.261,1310,5.261,1311,5.261,1312,6.349,1313,5.261,1314,6.349,1315,6.349]],["title/miscellaneous/functions.html",[1302,1.866,1316,3.865]],["body/miscellaneous/functions.html",[11,0.418,18,0.016,22,0.016,23,0.016,53,3.263,82,3.36,597,3.36,911,4.838,1118,5.069,1272,4.838,1302,3.36,1316,4.838,1317,5.629,1318,4.318,1319,4.838,1320,4.838,1321,5.629,1322,5.629,1323,4.838,1324,5.629,1325,4.838]],["title/index.html",[11,0.232,1326,2.687,1327,2.687]],["body/index.html",[4,0.176,18,0.018,22,0.013,23,0.013,24,1.655,29,0.123,42,1.493,47,1.352,50,1.493,73,2.075,74,3.41,79,1.746,82,3.166,120,2.075,159,1.493,232,2.212,242,2.213,300,3.41,386,1.899,397,1.746,453,1.954,528,1.571,550,2.368,573,2.212,622,2.55,623,2.55,640,2.075,684,3.043,698,3.41,701,3.41,853,3.41,912,3.41,937,3.41,953,4.56,1012,3.41,1022,4.56,1118,4.584,1225,3.41,1243,3.41,1318,3.043,1319,3.41,1320,3.41,1323,3.41,1325,3.41,1326,3.41,1327,3.41,1328,6.65,1329,3.967,1330,3.967,1331,3.967,1332,3.967,1333,3.967,1334,3.967,1335,3.967,1336,6.843,1337,3.967,1338,5.305,1339,5.305,1340,3.967,1341,3.967,1342,3.967,1343,3.967,1344,5.305,1345,3.967,1346,6.65,1347,3.967,1348,3.967,1349,3.967,1350,3.967,1351,3.967,1352,3.967,1353,3.967,1354,3.967,1355,3.967,1356,3.967,1357,3.967,1358,3.967,1359,3.967,1360,3.967,1361,3.967,1362,3.967,1363,5.305,1364,3.967,1365,3.967,1366,3.967,1367,5.305,1368,5.305,1369,3.967,1370,3.967,1371,3.967,1372,3.967,1373,3.967,1374,5.305,1375,5.976,1376,3.967,1377,3.967,1378,3.967,1379,3.967,1380,3.967,1381,3.967,1382,3.967,1383,5.305,1384,3.967,1385,3.967,1386,3.967,1387,3.967,1388,3.967,1389,5.305,1390,3.967,1391,3.967,1392,4.56,1393,3.967,1394,3.41,1395,3.967]],["title/modules.html",[49,2.371]],["body/modules.html",[18,0.016,22,0.016,23,0.016,48,3.75,49,2.499,59,3.207,60,3.454,61,3.454,62,3.207,889,3.75,905,3.454,1396,7.48,1397,7.48,1398,7.48,1399,7.48]],["title/overview.html",[1400,4.381]],["body/overview.html",[2,2.737,18,0.019,22,0.012,23,0.012,26,1.488,39,3.378,47,1.216,48,5.062,49,1.659,50,1.343,51,1.867,52,1.867,53,1.659,54,1.867,55,1.867,56,3.067,57,3.067,58,3.067,59,4.411,60,4.262,61,4.262,62,4.432,63,2.582,64,1.867,65,1.867,132,1.104,178,4.057,210,2.491,268,3.067,269,3.067,270,3.067,271,3.194,272,2.96,273,3.404,274,3.378,275,3.378,307,2.991,340,3.067,341,3.067,342,3.067,343,4.057,353,2.737,484,3.786,513,1.343,531,3.378,665,1.989,686,3.378,758,3.378,773,3.378,889,4.262,890,3.067,905,4.262,906,3.067,907,3.067,908,3.067,909,4.369,979,3.067,980,3.067,981,3.067,982,4.369,1186,3.067,1187,3.067,1188,3.067,1400,3.067,1401,3.568,1402,3.568,1403,3.568,1404,3.568]],["title/properties.html",[12,1.391,1277,2.687]],["body/properties.html",[7,0.802,12,1.798,18,0.018,22,0.016,23,0.016,1392,4.997,1405,5.813,1406,5.813,1407,5.813,1408,5.813]],["title/miscellaneous/variables.html",[1302,1.866,1409,3.865]],["body/miscellaneous/variables.html",[1,3.709,8,4.96,9,1.239,10,2.407,11,0.335,16,1.406,17,0.542,18,0.019,22,0.014,23,0.014,29,0.105,45,0.95,138,3.508,149,2.516,181,4.09,224,3.461,232,3.864,238,4.426,242,2.797,243,3.878,250,2.172,319,3.878,584,3.709,641,2.9,662,3.739,1148,4.96,1211,3.878,1247,3.878,1250,5.469,1251,3.878,1252,4.96,1253,3.878,1302,2.693,1318,3.461,1394,3.878,1409,3.878,1410,4.512,1411,4.512,1412,5.771,1413,4.512,1414,4.512,1415,4.512,1416,4.512,1417,4.512,1418,4.512,1419,4.512,1420,4.512,1421,4.512,1422,5.771,1423,5.771]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":503,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1406,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1299,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1301,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1265,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1270,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1271,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1264,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":665,"title":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.1.23",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1256,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1269,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["10.0.0",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1103,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["11",{"_index":1268,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["123456789",{"_index":1119,"title":{},"body":{"entities/User.html":{}}}],["13",{"_index":1404,"title":{},"body":{"overview.html":{}}}],["150",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["17",{"_index":1403,"title":{},"body":{"overview.html":{}}}],["1})@apiresponse({status",{"_index":1136,"title":{},"body":{"controllers/UserController.html":{}}}],["2",{"_index":484,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/PaginationQueryDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1245,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1262,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":1267,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1160,"title":{},"body":{"controllers/UserController.html":{}}}],["200",{"_index":832,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["201",{"_index":545,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{}}}],["20})@apiquery({name",{"_index":1152,"title":{},"body":{"controllers/UserController.html":{}}}],["225",{"_index":1105,"title":{},"body":{"entities/User.html":{}}}],["25",{"_index":1266,"title":{},"body":{"coverage.html":{}}}],["3.1.10",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1260,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1255,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":1023,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["4.0.0",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1258,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":694,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["408",{"_index":697,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["409",{"_index":547,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["5",{"_index":1402,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1263,"title":{},"body":{"coverage.html":{}}}],["6.9.13",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1261,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1401,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1300,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1259,"title":{},"body":{"coverage.html":{}}}],["8.13.1",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1254,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1257,"title":{},"body":{"coverage.html":{}}}],["9!@#$%^&*]{8,16",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["9.15.1",{"_index":1292,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":1275,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1274,"title":{},"body":{"coverage.html":{}}}],["9])[a",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["abstract",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["access",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstoken",{"_index":813,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["active",{"_index":8,"title":{},"body":{"interfaces/ActiveUserData.html":{},"miscellaneous/variables.html":{}}}],["activeuser",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":1,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":935,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":509,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["additional",{"_index":801,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["address",{"_index":1071,"title":{},"body":{"classes/SignInDto.html":{},"entities/User.html":{}}}],["adduser",{"_index":396,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["adduser(@param('id",{"_index":444,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["adduser(id",{"_index":403,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["addusertochatroom",{"_index":450,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["addusertochatroom(chatroomid",{"_index":457,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["admin",{"_index":1314,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allows",{"_index":1098,"title":{},"body":{"entities/User.html":{}}}],["alphabets",{"_index":577,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["already",{"_index":695,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["alt",{"_index":1384,"title":{},"body":{"index.html":{}}}],["always",{"_index":1368,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["apibody",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":543,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":1168,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["apiproperty({enum",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["apiproperty({type",{"_index":572,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["apiquery",{"_index":1167,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":240,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["apitags('authentication",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('google",{"_index":840,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["apitags('users",{"_index":554,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["apiversrion:'0.0.1",{"_index":742,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1358,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1354,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1359,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["app_interceptor",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appcontroller",{"_index":25,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1118,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["appmodule",{"_index":48,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":39,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["args.object",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["arguments",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":255,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["assert",{"_index":919,"title":{},"body":{"modules/MailModule.html":{}}}],["associated",{"_index":1217,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":809,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtypes.none",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["auth.controller",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":432,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/auth.controller",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":828,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guard/access",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/auth",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":431,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/social/interfaces/user.interface",{"_index":553,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["auth_type_key",{"_index":238,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig/jwt.config",{"_index":803,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["authcontroller",{"_index":67,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":829,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":842,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":830,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":535,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authenticates",{"_index":835,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["authentication.controller",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.controller.ts",{"_index":827,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:32",{"_index":834,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.service.ts",{"_index":845,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:17",{"_index":850,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:40",{"_index":855,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:55",{"_index":854,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authguard",{"_index":214,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authguardguard",{"_index":91,"title":{"guards/AuthGuardGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["authguardguard.defaultauthtype",{"_index":254,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authmodule",{"_index":59,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1408,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":233,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authservice",{"_index":178,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtication.module.ts",{"_index":892,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["authtype",{"_index":243,"title":{},"body":{"guards/AuthGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypeguardmap",{"_index":217,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtypes.bearer",{"_index":244,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.map((type",{"_index":256,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.none",{"_index":247,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["auto",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["autogenerated",{"_index":675,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["autoloadentities",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":468,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["badrequestexception('cannot",{"_index":508,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('one",{"_index":479,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('private",{"_index":485,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('user",{"_index":721,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["baseurl",{"_index":1016,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(inppassword",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":279,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["before",{"_index":684,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{},"index.html":{}}}],["between",{"_index":382,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["bind",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{}}}],["blog",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":229,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1329,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1367,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1399,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1396,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1389,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":734,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":216,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["canactivate(context",{"_index":223,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["catch",{"_index":561,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["catch((err",{"_index":264,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["cause",{"_index":717,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["cd",{"_index":1342,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1369,"title":{},"body":{"index.html":{}}}],["character",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["chat",{"_index":355,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["chat_room_id",{"_index":391,"title":{},"body":{"entities/ChatRoom.html":{}}}],["chat_room_users",{"_index":376,"title":{},"body":{"entities/ChatRoom.html":{}}}],["chatmodule",{"_index":60,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatroom",{"_index":345,"title":{"entities/ChatRoom.html":{}},"body":{"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatroom.controller",{"_index":348,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.entity",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.type",{"_index":497,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users",{"_index":498,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatroom.users)@jointable",{"_index":1096,"title":{},"body":{"entities/User.html":{}}}],["chatroom.users.filter(user",{"_index":511,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.push(user",{"_index":510,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomcontroller",{"_index":346,"title":{"controllers/ChatRoomController.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["chatroomid",{"_index":459,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomrepository",{"_index":456,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms",{"_index":1095,"title":{},"body":{"entities/User.html":{}}}],["chatrooms/chatroom.entity",{"_index":470,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatrooms/chatrooms.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["chatrooms/dtos/create",{"_index":471,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms/dtos/update",{"_index":472,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomservice",{"_index":343,"title":{"injectables/ChatRoomService.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"coverage.html":{},"overview.html":{}}}],["chatroomtype",{"_index":370,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatroomtype.group",{"_index":389,"title":{},"body":{"entities/ChatRoom.html":{}}}],["chatroomtype.private",{"_index":483,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["check",{"_index":1078,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["checking",{"_index":685,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["class",{"_index":29,"title":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":513,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["cli",{"_index":1331,"title":{},"body":{"index.html":{}}}],["client",{"_index":860,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_id",{"_index":861,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_secret",{"_index":863,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":1338,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":340,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":341,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":342,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule",{"_index":890,"title":{},"body":{"modules/GoogleAuthticationModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule_providers",{"_index":891,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["cluster_mailmodule",{"_index":906,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":908,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":907,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":979,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":981,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":980,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1186,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1187,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1189,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1188,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1352,"title":{},"body":{"index.html":{}}}],["column",{"_index":368,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["column('varchar",{"_index":1100,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":371,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["commands",{"_index":1388,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1375,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":1382,"title":{},"body":{"index.html":{}}}],["common/pagination.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["comparepasswords",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(password",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["comparison",{"_index":901,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{}}}],["config",{"_index":912,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["config.get('mail_host",{"_index":926,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_port",{"_index":928,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_password",{"_index":931,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_username",{"_index":929,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["configservice.get('database.autoload",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.blog",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":787,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":853,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"index.html":{}}}],["configurations",{"_index":1323,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["confirm",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["confirmation",{"_index":1140,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["confirmpassword",{"_index":567,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["conflictexception",{"_index":552,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":562,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["connecting",{"_index":709,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["connection",{"_index":698,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["conpare",{"_index":1085,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["console.error(\"google",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"google",{"_index":874,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"received",{"_index":867,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log('before",{"_index":740,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log(baseurl",{"_index":1021,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(getuserparamdto",{"_index":1176,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(newurl",{"_index":1027,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["const",{"_index":250,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(chatroomrepository",{"_index":452,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["constructor(mailerservice",{"_index":940,"title":{},"body":{"injectables/MailProvider.html":{}}}],["constructor(private",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatRoomController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":220,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["constructor(request",{"_index":989,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":539,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":575,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["containing",{"_index":702,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["contains",{"_index":1357,"title":{},"body":{"index.html":{}}}],["context",{"_index":226,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailProvider.html":{}}}],["context.getclass",{"_index":253,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gethandler",{"_index":252,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["controller",{"_index":24,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":841,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('chat",{"_index":433,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["controller('users",{"_index":1169,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"modules/PaginationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1242,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":397,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"classes/UpdateChatRoomDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":435,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["create(createchatroomdto",{"_index":407,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["createchatroomdto",{"_index":408,"title":{"classes/CreateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["createchatroomdto.type",{"_index":482,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.length",{"_index":478,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["created",{"_index":363,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created'})@post",{"_index":1130,"title":{},"body":{"controllers/UserController.html":{}}}],["created.'})@apiresponse({status",{"_index":546,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["createdat",{"_index":357,"title":{},"body":{"entities/ChatRoom.html":{}}}],["createdatecolumn",{"_index":361,"title":{},"body":{"entities/ChatRoom.html":{}}}],["creategoogleuser",{"_index":538,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":541,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":531,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":549,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":563,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":711,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":724,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":686,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":690,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createusers(@body",{"_index":1178,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":692,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["creating",{"_index":534,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["creation",{"_index":556,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apibody({type",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":976,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1035,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["currentpage:number",{"_index":973,"title":{},"body":{"classes/Paginated.html":{}}}],["custom",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":10,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiresponse({status",{"_index":1129,"title":{},"body":{"controllers/UserController.html":{}}}],["data.length",{"_index":743,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["data:t",{"_index":970,"title":{},"body":{"classes/Paginated.html":{}}}],["database",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"index.html":{}}}],["databaseconfig",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":130,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":360,"title":{},"body":{"entities/ChatRoom.html":{}}}],["db",{"_index":1079,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["declarations",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":319,"title":{},"body":{"injectables/BcryptProvider.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["decorators/auth.decorator",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":242,"title":{},"body":{"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":219,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["defaultmessage",{"_index":957,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["defaultmessage(args",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["defaultvaluepipe",{"_index":1161,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1175,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(20",{"_index":1173,"title":{},"body":{"controllers/UserController.html":{}}}],["define",{"_index":1308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["defined",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["defining",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":417,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":415,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':id/users/:userid",{"_index":419,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["deleted",{"_index":1180,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleted'})@delete",{"_index":1137,"title":{},"body":{"controllers/UserController.html":{}}}],["deletes",{"_index":1139,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser",{"_index":1125,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":1181,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1133,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletion",{"_index":1207,"title":{},"body":{"injectables/UserService.html":{}}}],["denied",{"_index":249,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["dependencies",{"_index":50,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1080,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["details",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["details'})@apibody({type",{"_index":1142,"title":{},"body":{"controllers/UserController.html":{}}}],["development",{"_index":1345,"title":{},"body":{"index.html":{}}}],["dir",{"_index":933,"title":{},"body":{"modules/MailModule.html":{}}}],["directly",{"_index":1366,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1243,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1116,"title":{},"body":{"entities/User.html":{}}}],["doesnt",{"_index":1081,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["double",{"_index":1377,"title":{},"body":{"index.html":{}}}],["dto",{"_index":566,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["dtos/create",{"_index":427,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/getuserparamdto",{"_index":1166,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":838,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1165,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/refreshtokendto",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/update",{"_index":429,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["dtos/userdto",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["during",{"_index":902,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["each",{"_index":522,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["edit",{"_index":746,"title":{},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["edit.email",{"_index":1237,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.firstname",{"_index":1231,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.lastname",{"_index":1233,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.password",{"_index":1235,"title":{},"body":{"injectables/UserService.html":{}}}],["editedpost",{"_index":1126,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(@body",{"_index":1184,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(edituserdto",{"_index":1141,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":1200,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser(edituserdto",{"_index":1208,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto",{"_index":744,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto.email",{"_index":1238,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.firstname",{"_index":1232,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.id",{"_index":1230,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.lastname",{"_index":1234,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.password",{"_index":1236,"title":{},"body":{"injectables/UserService.html":{}}}],["ejs",{"_index":915,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":920,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":14,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.ts",{"_index":760,"title":{},"body":{"injectables/FindOneByEmail.html":{},"coverage.html":{}}}],["email.ts:10",{"_index":762,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["email.ts:27",{"_index":766,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["encrypassword",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enforced",{"_index":1335,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["entities",{"_index":353,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":352,"title":{"entities/ChatRoom.html":{},"entities/User.html":{}},"body":{"entities/ChatRoom.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entry",{"_index":1319,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["enum",{"_index":372,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1303,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtypes.enum",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/chatroomtype",{"_index":388,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{}}}],["enums/userrole.enum",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["env.development",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":266,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["error",{"_index":265,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{}}}],["everything",{"_index":750,"title":{},"body":{"classes/EditUserDto.html":{}}}],["exactly",{"_index":486,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["example",{"_index":573,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"controllers/UserController.html":{},"index.html":{}}}],["example:rukky@gmail.com",{"_index":1072,"title":{},"body":{"classes/SignInDto.html":{}}}],["exception",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["exclude",{"_index":1112,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column('varchar",{"_index":1109,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":260,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["execution",{"_index":227,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["executioncontext",{"_index":224,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":768,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["existinguser",{"_index":710,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":708,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists.'})@apiresponse({status",{"_index":696,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expiration",{"_index":798,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["expiresin",{"_index":794,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":986,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":997,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":751,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["extract",{"_index":876,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["extracts",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":557,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["false",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["family_name",{"_index":878,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fatima",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["fatimaaminu@mail.com",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["fetch",{"_index":771,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["field",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"miscellaneous/variables.html":{}}}],["field'})@isemail()@maxlength(150)@column({unique",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["field'})@isstring()@isnotempty()@maxlength(100",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["field'})@isstring()@isoptional()@maxlength(100",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filtering",{"_index":1214,"title":{},"body":{"injectables/UserService.html":{}}}],["finalresponse",{"_index":1033,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":767,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":398,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":1212,"title":{},"body":{"injectables/UserService.html":{}}}],["finding",{"_index":761,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["findone",{"_index":399,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findone(@param('id",{"_index":438,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["findone(id",{"_index":411,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findonebyemail",{"_index":758,"title":{"injectables/FindOneByEmail.html":{}},"body":{"injectables/FindOneByEmail.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemail(email",{"_index":765,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["findonebygoogleid",{"_index":775,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":777,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":773,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1201,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1218,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":1216,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["firstname",{"_index":568,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["folder",{"_index":1356,"title":{},"body":{"index.html":{}}}],["form",{"_index":913,"title":{},"body":{"modules/MailModule.html":{}}}],["forwardref",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UserModule.html":{}}}],["found",{"_index":481,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/FindOneByEmail.html":{},"injectables/UserService.html":{}}}],["function",{"_index":1273,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1316,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":815,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generated",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["generates",{"_index":791,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokenprovider",{"_index":1057,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":783,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":789,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":272,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":781,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["get('/:id",{"_index":1171,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id",{"_index":412,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["gethello",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":1202,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":1221,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1326,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserparamdto",{"_index":819,"title":{"classes/GetuserParamDto.html":{}},"body":{"classes/GetuserParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getusers",{"_index":1127,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1147,"title":{},"body":{"controllers/UserController.html":{}}}],["git",{"_index":1340,"title":{},"body":{"index.html":{}}}],["give",{"_index":1024,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["given",{"_index":792,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/UserService.html":{}}}],["given_name",{"_index":877,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":911,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":537,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["google'})@isstring()@isoptional()@maxlength(225",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["google.'})@isstring()@isoptional()@maxlength(225",{"_index":676,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["googleauthenticationcontroller",{"_index":277,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":273,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthticationmodule",{"_index":889,"title":{"modules/GoogleAuthticationModule.html":{}},"body":{"modules/GoogleAuthticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleid",{"_index":569,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["googleid.ts",{"_index":774,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["googleid.ts:10",{"_index":776,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleid.ts:20",{"_index":778,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleinterface",{"_index":542,"title":{"interfaces/GoogleInterface.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["googletokendto",{"_index":831,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":868,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":551,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["googleuserprovider",{"_index":1223,"title":{},"body":{"injectables/UserService.html":{}}}],["grab",{"_index":1065,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["group",{"_index":1312,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guard",{"_index":210,"title":{"guards/AuthGuardGuard.html":{}},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guard.guard",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["guard.guard.ts",{"_index":213,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:34",{"_index":222,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:54",{"_index":225,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard/access",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard/auth",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guards",{"_index":211,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["handle",{"_index":851,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["handles",{"_index":846,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["handling",{"_index":689,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["hashedpassword",{"_index":722,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashing",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":271,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(inppassword",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasing",{"_index":899,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["hasshing",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["having",{"_index":718,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hello",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["helpdesk",{"_index":949,"title":{},"body":{"injectables/MailProvider.html":{}}}],["host",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hot",{"_index":1347,"title":{},"body":{"index.html":{}}}],["http",{"_index":1014,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["http://localhost:3000",{"_index":956,"title":{},"body":{"injectables/MailProvider.html":{}}}],["http://localhost:3000/resource",{"_index":1013,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpcode",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/phertyameen/realtimechat.git",{"_index":1341,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.ok",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":1012,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["id",{"_index":358,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@apiparam({name",{"_index":1150,"title":{},"body":{"controllers/UserController.html":{}}}],["id'})@apiquery({name",{"_index":1134,"title":{},"body":{"controllers/UserController.html":{}}}],["id:number",{"_index":1182,"title":{},"body":{"controllers/UserController.html":{}}}],["id?:number",{"_index":825,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["identifier",{"_index":367,"title":{},"body":{"entities/ChatRoom.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["idtoken",{"_index":873,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["implementation",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{}}}],["implementing",{"_index":215,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["implements",{"_index":241,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["import",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{}}}],["in'})@apiresponse({status",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.provider",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1075,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:28",{"_index":1077,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:9",{"_index":1076,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/GenerateTokensProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["incorrect",{"_index":1084,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":230,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":1211,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":805,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":999,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":131,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{}}}],["injectrepository",{"_index":469,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["injectrepository(chatroom",{"_index":474,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["injectrepository(user",{"_index":475,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["injects",{"_index":555,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByEmail.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":936,"title":{},"body":{"modules/MailModule.html":{}}}],["inppassword",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["input",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["install",{"_index":1339,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1337,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1360,"title":{},"body":{"index.html":{}}}],["instance",{"_index":261,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instance.canactivate(context",{"_index":263,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instead",{"_index":1376,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1362,"title":{},"body":{"index.html":{}}}],["interact",{"_index":764,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/UserService.html":{}}}],["intercept",{"_index":731,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":732,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["interface/activeinterface",{"_index":804,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"overview.html":{}}}],["interfaces/paginatedinterface",{"_index":998,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["invalid",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["inversejoincolumn",{"_index":378,"title":{},"body":{"entities/ChatRoom.html":{}}}],["isarray",{"_index":525,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isarray()@isuuid('4",{"_index":521,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["ischeckedpassword",{"_index":1086,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isemail",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1069,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":524,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["isenum(chatroomtype",{"_index":529,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(chatroomtype)@isoptional",{"_index":519,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(userrole",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["isglobal",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":755,"title":{},"body":{"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{}}}],["isint()@isnotempty",{"_index":753,"title":{},"body":{"classes/EditUserDto.html":{}}}],["isint()@type(undefined",{"_index":822,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["isnotempty",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isoptional",{"_index":527,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive",{"_index":1045,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional,isint",{"_index":824,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["ispositive",{"_index":1048,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":517,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1053,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["issue",{"_index":699,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{}}}],["issuer",{"_index":811,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["issues",{"_index":720,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["isuuid",{"_index":526,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isuuid('4",{"_index":530,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["itemsperpage",{"_index":1034,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["itemsperpage:number",{"_index":971,"title":{},"body":{"classes/Paginated.html":{}}}],["john",{"_index":1115,"title":{},"body":{"entities/User.html":{}}}],["johndoe@example.com",{"_index":1117,"title":{},"body":{"entities/User.html":{}}}],["join",{"_index":916,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":934,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":377,"title":{},"body":{"entities/ChatRoom.html":{}}}],["jointable",{"_index":385,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["junction",{"_index":1120,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":802,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtauthguard",{"_index":430,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["jwtconfig",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":786,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfigurattion",{"_index":849,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtmodule",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":785,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["key",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyboard",{"_index":1380,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["last:string",{"_index":975,"title":{},"body":{"classes/Paginated.html":{}}}],["lastname",{"_index":570,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["later",{"_index":716,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["legend",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["letter",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["letter'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":579,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["library",{"_index":858,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1392,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1393,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1044,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["limit?:number",{"_index":1049,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["line",{"_index":1022,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["link",{"_index":964,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["list",{"_index":1158,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":967,"title":{},"body":{"classes/Paginated.html":{}}}],["load",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":1090,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":871,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":875,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":955,"title":{},"body":{"injectables/MailProvider.html":{}}}],["loop",{"_index":258,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["lowercase",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["lts",{"_index":1334,"title":{},"body":{"index.html":{}}}],["mac",{"_index":1386,"title":{},"body":{"index.html":{}}}],["mailer",{"_index":945,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailermodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":923,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":941,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailerservice:mailerservice",{"_index":946,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailmodule",{"_index":905,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprovider",{"_index":909,"title":{"injectables/MailProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1318,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["main.ts",{"_index":1353,"title":{},"body":{"index.html":{}}}],["makes",{"_index":749,"title":{},"body":{"classes/EditUserDto.html":{}}}],["management",{"_index":1225,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["managing",{"_index":1124,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["many",{"_index":380,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany",{"_index":384,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":374,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["map",{"_index":737,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":580,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["matches",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchpasswordconstraint",{"_index":683,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["matchpasswords",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["matchpasswordsconstraint",{"_index":645,"title":{"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"coverage.html":{}}}],["math.ceil(totalitems",{"_index":1030,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["maxlength(100",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["maxlength(150",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["maxlength(225",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["merging",{"_index":1373,"title":{},"body":{"index.html":{}}}],["message",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["message.sender",{"_index":1121,"title":{},"body":{"entities/User.html":{}}}],["messages",{"_index":1122,"title":{},"body":{"entities/User.html":{}}}],["messages/messages.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["messagesmodule",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":965,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1298,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":1302,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["mit",{"_index":1395,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":1315,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":47,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["module,forwardref",{"_index":984,"title":{},"body":{"modules/PaginationModule.html":{}}}],["modules",{"_index":49,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":921,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":714,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":480,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["multi",{"_index":1374,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1099,"title":{},"body":{"entities/User.html":{}}}],["name",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":1330,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":736,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":756,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["nestjs/platform",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["network",{"_index":719,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["new",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":703,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{}}}],["newurl",{"_index":1019,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&${totalpage",{"_index":1037,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${nextpage",{"_index":1039,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${paginationquerydto.page",{"_index":1038,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${prevpage",{"_index":1041,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=1",{"_index":1036,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":725,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["next",{"_index":733,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe(map((data",{"_index":741,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next:string",{"_index":978,"title":{},"body":{"classes/Paginated.html":{}}}],["nextpage",{"_index":1031,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1333,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":467,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`chat",{"_index":492,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`user",{"_index":507,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["npm",{"_index":1336,"title":{},"body":{"index.html":{}}}],["null",{"_index":1220,"title":{},"body":{"injectables/UserService.html":{}}}],["nullable",{"_index":1101,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":20,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(userid",{"_index":506,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["numbers",{"_index":576,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["oauth",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["oauth2",{"_index":859,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client",{"_index":857,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(client_id",{"_index":866,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":847,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"controllers/UserController.html":{}}}],["object.assign(chatroom",{"_index":499,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["object.password",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["objectliteral",{"_index":996,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":235,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["one",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1113,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":848,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1370,"title":{},"body":{"index.html":{}}}],["operations",{"_index":763,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["option",{"_index":937,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["optional",{"_index":13,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["optional)'})@apiquery({name",{"_index":1151,"title":{},"body":{"controllers/UserController.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1400,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1277,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1361,"title":{},"body":{"index.html":{}}}],["page",{"_index":1008,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["page?:number",{"_index":1050,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginated",{"_index":962,"title":{"classes/Paginated.html":{}},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":988,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(paginationquerydto",{"_index":991,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":994,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pagination/provider/pagination.provider",{"_index":985,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":61,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":982,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":992,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1009,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto.page",{"_index":1010,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto:paginationquerydto",{"_index":1001,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["param",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('userid",{"_index":445,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["parameter",{"_index":1159,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paramsdto",{"_index":821,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["parseintpipe",{"_index":1162,"title":{},"body":{"controllers/UserController.html":{}}}],["part",{"_index":747,"title":{},"body":{"classes/EditUserDto.html":{},"entities/User.html":{}}}],["partialtype",{"_index":748,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createchatroomdto",{"_index":1092,"title":{},"body":{"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":752,"title":{},"body":{"classes/EditUserDto.html":{}}}],["pass",{"_index":930,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password.'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":671,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["password123",{"_index":574,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["passwords",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":425,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":423,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["path",{"_index":917,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":669,"title":{},"body":{"classes/CreateUserDto-1.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["per",{"_index":1007,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{}}}],["pg",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":738,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["please",{"_index":715,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["point",{"_index":1320,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["port",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{}}}],["post('/refreshtoken",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/refreshtoken')@apioperation({summary",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@auth(authtypes.none)@httpcode(httpstatus.ok)@useinterceptors(classserializerinterceptor)@apioperation({summary",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/users/:userid",{"_index":405,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["postgres",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["prerequisites",{"_index":1332,"title":{},"body":{"index.html":{}}}],["present",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["previous",{"_index":1040,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["previous:string",{"_index":977,"title":{},"body":{"classes/Paginated.html":{}}}],["prevpage",{"_index":1032,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":383,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":364,"title":{},"body":{"entities/ChatRoom.html":{}}}],["private",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":713,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["project",{"_index":1328,"title":{},"body":{"index.html":{}}}],["promise",{"_index":228,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":814,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":262,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"controllers/UserController.html":{}}}],["provided).'})@isenum(userrole)@isoptional()@transform",{"_index":681,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["provider",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["provider/create",{"_index":1192,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/find",{"_index":1194,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/googleuserprovider",{"_index":1196,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/user.service",{"_index":1164,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/chatrooms/chatrooms.service",{"_index":349,"title":{},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{}}}],["providers/generate",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":837,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["providers/hashing",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.provider",{"_index":922,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/refresh",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pull",{"_index":1371,"title":{},"body":{"index.html":{}}}],["push",{"_index":1365,"title":{},"body":{"index.html":{}}}],["query",{"_index":1163,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":1172,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1174,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":995,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1043,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1046,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:14",{"_index":1047,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["readonly",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realtimechat",{"_index":953,"title":{},"body":{"injectables/MailProvider.html":{},"index.html":{}}}],["realtimechat.com",{"_index":950,"title":{},"body":{"injectables/MailProvider.html":{}}}],["record",{"_index":245,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["referencedcolumnname",{"_index":392,"title":{},"body":{"entities/ChatRoom.html":{}}}],["reflect",{"_index":1297,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":221,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["refresh",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshed",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtoken",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":144,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1064,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokenprovider",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1056,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1059,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":274,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["related",{"_index":852,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":490,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["relationship",{"_index":381,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["reload",{"_index":1348,"title":{},"body":{"index.html":{}}}],["remove",{"_index":400,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["remove(@param('id",{"_index":442,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["remove(id",{"_index":414,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["removeuser",{"_index":401,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuser(@param('id",{"_index":447,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuser(id",{"_index":418,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuserfromchatroom",{"_index":451,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removeuserfromchatroom(chatroomid",{"_index":464,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["reply",{"_index":932,"title":{},"body":{"modules/MailModule.html":{}}}],["repo",{"_index":1062,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["repository",{"_index":453,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1028,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1003,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository:repository",{"_index":1002,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["representing",{"_index":668,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["request",{"_index":232,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request:request",{"_index":1000,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request[request_user_key",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":704,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception('could",{"_index":770,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["requesttimeoutexception(error",{"_index":1089,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["requesturl",{"_index":1011,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["required",{"_index":1135,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":836,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["response.interceptor.ts",{"_index":730,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":735,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":729,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":533,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["result",{"_index":500,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{}}}],["result.affected",{"_index":502,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":1154,"title":{},"body":{"controllers/UserController.html":{}}}],["retrieve",{"_index":1148,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":1157,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["review",{"_index":1372,"title":{},"body":{"index.html":{}}}],["role",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":356,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["room.dto",{"_index":428,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{}}}],["room.dto.ts",{"_index":515,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":520,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:14",{"_index":523,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:6",{"_index":518,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["rooms",{"_index":395,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["root",{"_index":1355,"title":{},"body":{"index.html":{}}}],["rules",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"index.html":{}}}],["run",{"_index":1346,"title":{},"body":{"index.html":{}}}],["running",{"_index":1343,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":236,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["saltrounds",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":670,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["secret",{"_index":807,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":927,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["sent",{"_index":870,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["server",{"_index":1325,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["service",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["setmetadata(auth_type_key",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shift",{"_index":1383,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":1381,"title":{},"body":{"index.html":{}}}],["show",{"_index":1006,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sign",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/SignInProvider.html":{}}}],["signed",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signin",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":162,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":275,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":797,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/User.html":{}}}],["signtoken",{"_index":784,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":793,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signup",{"_index":904,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["single",{"_index":1149,"title":{},"body":{"controllers/UserController.html":{}}}],["skip",{"_index":1004,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slash",{"_index":1378,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["special",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["specific",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"controllers/UserController.html":{}}}],["src",{"_index":1351,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constant.ts",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtypes.enum.ts",{"_index":1304,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../chatroomtype.ts",{"_index":1305,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1317,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../userrole.enum.ts",{"_index":1306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:8",{"_index":134,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1197,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/authconfig/jwt.config",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constant",{"_index":239,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refreshtokendto.ts",{"_index":1051,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refreshtokendto.ts:9",{"_index":1054,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dtos/userdto.ts",{"_index":1068,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/userdto.ts:13",{"_index":1073,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/userdto.ts:8",{"_index":1070,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtypes.enum",{"_index":237,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["src/auth/enums/authtypes.enum.ts",{"_index":1307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guard/access",{"_index":666,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{},"coverage.html":{}}}],["src/auth/guard/auth",{"_index":212,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["src/auth/interface/activeinterface.ts",{"_index":6,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.ts",{"_index":318,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.ts:10",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.ts:18",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":779,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing",{"_index":707,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.ts",{"_index":898,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.ts:10",{"_index":900,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.ts:7",{"_index":903,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1055,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1074,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":895,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":826,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["src/auth/social/interfaces/user.interface",{"_index":1224,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/social/interfaces/user.interface.ts",{"_index":893,"title":{},"body":{"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":844,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts",{"_index":394,"title":{},"body":{"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts:14",{"_index":409,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:19",{"_index":410,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:24",{"_index":413,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:29",{"_index":424,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:35",{"_index":416,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:40",{"_index":406,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:45",{"_index":420,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.entity.ts",{"_index":354,"title":{},"body":{"entities/ChatRoom.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.entity.ts:11",{"_index":365,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:17",{"_index":369,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:24",{"_index":373,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:39",{"_index":379,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:43",{"_index":362,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatrooms.module.ts",{"_index":344,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chatrooms/dtos/create",{"_index":514,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/dtos/update",{"_index":1091,"title":{},"body":{"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/enums/chatroomtype",{"_index":473,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/enums/chatroomtype.ts",{"_index":1311,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts",{"_index":449,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:106",{"_index":465,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:14",{"_index":455,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:23",{"_index":460,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:42",{"_index":461,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:48",{"_index":462,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:61",{"_index":466,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:82",{"_index":463,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:90",{"_index":458,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/common/interceptor/data",{"_index":728,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination.module.ts",{"_index":983,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts",{"_index":963,"title":{},"body":{"classes/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:11",{"_index":968,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:4",{"_index":966,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:5",{"_index":969,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/pagination",{"_index":1042,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts",{"_index":987,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:10",{"_index":990,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:18",{"_index":993,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module",{"_index":1195,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":910,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.provider.ts",{"_index":938,"title":{},"body":{"injectables/MailProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mail.provider.ts:15",{"_index":944,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/mail/providers/mail.provider.ts:8",{"_index":942,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/main.ts",{"_index":1272,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/message.entity",{"_index":1114,"title":{},"body":{"entities/User.html":{}}}],["src/users/dtos/create",{"_index":564,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts",{"_index":820,"title":{},"body":{"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts:10",{"_index":823,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["src/users/dtos/patch",{"_index":745,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1313,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/provider/create",{"_index":687,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/find",{"_index":759,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts",{"_index":532,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts:15",{"_index":540,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/googleuserprovider.ts:35",{"_index":548,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/user.service",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/provider/user.service.ts",{"_index":1199,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/provider/user.service.ts:100",{"_index":1206,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:113",{"_index":1209,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:133",{"_index":1215,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:143",{"_index":1204,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:19",{"_index":1203,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:52",{"_index":1213,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:67",{"_index":1205,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:78",{"_index":1219,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:89",{"_index":1222,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.controller.ts",{"_index":1123,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:32",{"_index":1156,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:51",{"_index":1131,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:66",{"_index":1138,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:83",{"_index":1145,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.entitly",{"_index":387,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["src/users/user.entitly.ts",{"_index":1093,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entitly.ts:17",{"_index":1107,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:24",{"_index":1104,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:31",{"_index":1108,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:38",{"_index":1102,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:42",{"_index":1110,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:49",{"_index":1111,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:56",{"_index":1106,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:64",{"_index":1097,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.module",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/user.module.ts",{"_index":1190,"title":{},"body":{"modules/UserModule.html":{}}}],["start",{"_index":1344,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1349,"title":{},"body":{"index.html":{}}}],["started",{"_index":1327,"title":{"index.html":{}},"body":{"index.html":{}}}],["starts",{"_index":1324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":218,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["status",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["step",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["stored",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":918,"title":{},"body":{"modules/MailModule.html":{}}}],["strig",{"_index":894,"title":{},"body":{"interfaces/GoogleInterface.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1350,"title":{},"body":{"index.html":{}}}],["sub",{"_index":15,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":951,"title":{},"body":{"injectables/MailProvider.html":{}}}],["successful",{"_index":1153,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["successfully'})@apiresponse({status",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1397,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1398,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":701,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["t",{"_index":795,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1094,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1276,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1005,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["taking",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["tap",{"_index":739,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":914,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{}}}],["terminal",{"_index":1026,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1390,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1391,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":246,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.appservice.gethello",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":257,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.chatroomrepository.create",{"_index":487,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.delete(id",{"_index":501,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.find",{"_index":489,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.findone",{"_index":491,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.save(chatroom",{"_index":488,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomservice.addusertochatroom(id",{"_index":446,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.create(createchatroomdto",{"_index":436,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findall",{"_index":437,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findone(id",{"_index":439,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.remove(id",{"_index":443,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.removeuserfromchatroom(id",{"_index":448,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.update(id",{"_index":441,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1241,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createusers(createuserdto",{"_index":1227,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findone(chatroomid",{"_index":504,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findone(id",{"_index":493,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findonebyemail.findonebyemail(email",{"_index":1228,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1240,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1067,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":843,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords(signindto.password",{"_index":1087,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":723,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":810,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":812,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":808,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.ttl",{"_index":817,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfigurattion.googleclient_id",{"_index":862,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfigurattion.googleclient_secret",{"_index":864,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":806,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":1063,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":948,"title":{},"body":{"injectables/MailProvider.html":{}}}],["this.oauthclient",{"_index":865,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":872,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":251,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1018,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1017,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.requestprotocol",{"_index":1015,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":816,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository.create",{"_index":726,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":559,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.delete(id",{"_index":1229,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1226,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findbyids(createchatroomdto.userids",{"_index":476,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findbyids(updatechatroomdto.userids",{"_index":495,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findone",{"_index":505,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":769,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(edit",{"_index":1239,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":727,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":560,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userservice.creategoogleuser",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createusers(createuserdto",{"_index":1179,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1183,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituser(edituserdto",{"_index":1185,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":1177,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1066,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.getonebyemail(signindto.email",{"_index":1082,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["through",{"_index":259,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["throw",{"_index":267,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["throws",{"_index":248,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["time",{"_index":799,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["token",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token'})@apibody({type",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["token'})@apiresponse({status",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["token'})@post",{"_index":833,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["token.dto",{"_index":839,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["token.dto.ts",{"_index":896,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:8",{"_index":897,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["token.guard.ts",{"_index":667,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{},"coverage.html":{}}}],["token.guard.ts:104",{"_index":680,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:118",{"_index":672,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:131",{"_index":682,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:144",{"_index":677,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:30",{"_index":961,"title":{},"body":{"classes/MatchPasswordsConstraint-1.html":{}}}],["token.guard.ts:38",{"_index":960,"title":{},"body":{"classes/MatchPasswordsConstraint-1.html":{}}}],["token.guard.ts:59",{"_index":674,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:72",{"_index":678,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token.guard.ts:85",{"_index":673,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["token/access",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint-1.html":{},"coverage.html":{}}}],["tokendto",{"_index":1052,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["tokens",{"_index":782,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["tokens.provider",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":780,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1058,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:13",{"_index":788,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:37",{"_index":1060,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:40",{"_index":796,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:60",{"_index":790,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":972,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":1029,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpage:number",{"_index":974,"title":{},"body":{"classes/Paginated.html":{}}}],["transfer",{"_index":1132,"title":{},"body":{"controllers/UserController.html":{}}}],["transform",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["transformation",{"_index":1364,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transport",{"_index":925,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["try",{"_index":558,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":19,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["typeorm",{"_index":386,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([chatroom",{"_index":351,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1198,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":757,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["types/bcrypt",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":1025,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["unable",{"_index":712,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorised",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":234,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('email",{"_index":1083,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('failed",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":772,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["undefined",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":1394,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":366,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["unknown",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1407,"title":{},"body":{"properties.html":{}}}],["up",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["update",{"_index":402,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/UserController.html":{}}}],["update(@param('id",{"_index":440,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["update(id",{"_index":421,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["updatechatroomdto",{"_index":422,"title":{"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["updatechatroomdto.userids",{"_index":494,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.length",{"_index":496,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updated",{"_index":1143,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated'})@patch",{"_index":1144,"title":{},"body":{"controllers/UserController.html":{}}}],["updates",{"_index":1146,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updating",{"_index":1210,"title":{},"body":{"injectables/UserService.html":{}}}],["uppercase",{"_index":578,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["uppercase.'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":679,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["uproper",{"_index":1379,"title":{},"body":{"index.html":{}}}],["url(this.request.url",{"_index":1020,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["useclass",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["usefactory",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory:async(config:configservice",{"_index":924,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":1387,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":426,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useguards(jwtauthguard",{"_index":434,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useinterceptors",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":9,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibody({type",{"_index":1128,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apiresponse({status",{"_index":544,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["user'})@isenum(userrole)@isoptional()@transform",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.chatrooms",{"_index":390,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.chatrooms)@jointable({name",{"_index":375,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.controller",{"_index":1191,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":706,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":565,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["user.dto.ts:108",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:12",{"_index":754,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:120",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:133",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":959,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:30",{"_index":958,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:50",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:63",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:95",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":818,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["user.entitly",{"_index":705,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.firstname",{"_index":954,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user.id",{"_index":512,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["user.password",{"_index":1088,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1193,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":688,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:14",{"_index":691,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:40",{"_index":700,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user:user):promise",{"_index":947,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user?.[field",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_id",{"_index":393,"title":{},"body":{"entities/ChatRoom.html":{}}}],["usercontroller",{"_index":68,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":404,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{}}}],["userids",{"_index":516,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["usermodule",{"_index":62,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":454,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":571,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"entities/User.html":{}}}],["users",{"_index":359,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/GetuserParamDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users'})@get('/:id?')@get('/:id",{"_index":1155,"title":{},"body":{"controllers/UserController.html":{}}}],["users.length",{"_index":477,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users/user.controller",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["users/user.entitly",{"_index":350,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{}}}],["users/user.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":307,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":1170,"title":{},"body":{"controllers/UserController.html":{}}}],["user})@apiresponse({status",{"_index":693,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["using",{"_index":550,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["utilities",{"_index":1363,"title":{},"body":{"index.html":{}}}],["validate",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"injectables/RefreshTokensProvider.html":{}}}],["validate(confirmpassword",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["validate(matchpasswordsconstraint",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["validates",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validating",{"_index":1061,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["validation",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"index.html":{}}}],["validationarguments",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["validator",{"_index":528,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["validatorconstraintinterface",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["value",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1409,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":869,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["version",{"_index":1405,"title":{},"body":{"properties.html":{}}}],["via",{"_index":536,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["void",{"_index":856,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["welcome",{"_index":952,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail",{"_index":939,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail(user",{"_index":943,"title":{},"body":{"injectables/MailProvider.html":{}}}],["whether",{"_index":231,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["windows/linux",{"_index":1385,"title":{},"body":{"index.html":{}}}],["yes",{"_index":800,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["z0",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["z])(?=.*[0",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["z])(?=.*[a",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["za",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/MatchPasswordsConstraint-1.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/activeInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Active user data interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    email of type:string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    sub of type:string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    \n    /**sub of type:string */\n    sub: number,\n\n    /**email of type:string */\n    email?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App controller class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n                        get method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**App controller class */\n@Controller()\nexport class AppController {\n    /**constructor for the app service */\n  constructor(private readonly appService: AppService) {}\n\n  /**get method */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './users/user.module';\n// import { MailerModule } from '@nestjs-modules/mailer';\nimport { PaginationModule } from './common/pagination.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './users/user.controller';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuardGuard } from './auth/guard/auth-guard/auth-guard.guard';\nimport { AccessTokenGuard } from './auth/guard/access-token/access-token.guard';\n// import { MessagesModule } from './messages/messages.module';\nimport { ChatModule } from './chatrooms/chatrooms.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        blog: configService.get('database.blog'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoload'),\n      }),\n    }),\n    AuthModule,\n    UserModule,\n    // MailerModule,\n    PaginationModule,\n    // MessagesModule,\n    ChatModule\n  ],\n  controllers: [AppController, AuthController, UserController],\n  providers: [\n    AppService,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AuthGuardGuard,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: DataResponseInterceptor\n    // },\n    // AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService  class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:8\n                        \n                    \n\n\n            \n                \n                        Get  hello method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**AppService  class*/\n@Injectable()\n\nexport class AppService {\n  \n   /**Get  hello method */\n  getHello(): string {\n    return 'Hello';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Auth controller class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                RefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        RefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    RefreshToken(refreshToken: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')@ApiOperation({summary: 'Refresh authentication token'})@ApiResponse({status: undefined, description: 'Token refreshed successfully'})@ApiResponse({status: undefined, description: 'Invalid refresh token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Refresh token method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRefresh token object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                New access token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Auth(authTypes.None)@HttpCode(HttpStatus.OK)@UseInterceptors(ClassSerializerInterceptor)@ApiOperation({summary: 'User sign-in'})@ApiResponse({status: undefined, description: 'User signed in successfully'})@ApiResponse({status: undefined, description: 'Invalid credentials'})@ApiBody({type: SignInDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Sign in method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Access token and user details\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, HttpCode, HttpStatus, Post, UseInterceptors } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/userDto';\nimport { authTypes } from './enums/authTypes.enum';\nimport { RefreshTokenDto } from './dtos/refreshTokenDto';\nimport { Auth } from './decorators/auth.decorator';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\n\n/**\n * Auth controller class\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        /** Injecting auth service*/ \n        private readonly authservice: AuthService,\n    ) {}\n\n    /**\n     * Sign in method\n     * @param signInDto - User credentials\n     * @returns Access token and user details\n     */\n    @Post('/signIn')\n    @Auth(authTypes.None)\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(ClassSerializerInterceptor)\n    @ApiOperation({ summary: 'User sign-in' })\n    @ApiResponse({ status: HttpStatus.OK, description: 'User signed in successfully' })\n    @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Invalid credentials' })\n    @ApiBody({ type: SignInDto })\n    public async SignIn(@Body() signInDto: SignInDto) {\n       return await this.authservice.SignIn(signInDto);\n    }\n\n    /**\n     * Refresh token method\n     * @param refreshToken - Refresh token object\n     * @returns New access token\n     */\n    @Post('/refreshToken')\n    @ApiOperation({ summary: 'Refresh authentication token' })\n    @ApiResponse({ status: HttpStatus.OK, description: 'Token refreshed successfully' })\n    @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Invalid refresh token' })\n    @ApiBody({ type: RefreshTokenDto })\n    public RefreshToken(@Body() refreshToken: RefreshTokenDto) {\n        return this.authservice.refreshToken(refreshToken);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardGuard.html":{"url":"guards/AuthGuardGuard.html","title":"guard - AuthGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    AuthGuard class implementing CanActivate\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                    AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:54\n                        \n                    \n\n\n            \n                \n                        CanActivate method to get authTypes from the reflector\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A boolean indicating whether the request is authorized\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { authTypes } from 'src/auth/enums/authTypes.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * AuthGuard class implementing CanActivate\n */\n@ApiTags('Auth')\n@Injectable()\nexport class AuthGuardGuard implements CanActivate {\n  /**\n   * Injecting default AuthType\n   */\n  private static readonly defaultAuthType = authTypes.Bearer;\n\n  /**\n   * Injecting default AuthTypeGuardMap\n   */\n  private readonly authTypeGuardMap: Record = {\n    [authTypes.Bearer]: this.accessTokenGuard,\n    [authTypes.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    /**\n     * Injecting reflector\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting Access Token Guard\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * CanActivate method to get authTypes from the reflector\n   * @param context - Execution context\n   * @returns A boolean indicating whether the request is authorized\n   * @throws UnauthorizedException if access is denied\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get authTypes from the reflector\n    const authTypes =\n      this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]) ?? [AuthGuardGuard.defaultAuthType];\n\n    // Get array of guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]);\n\n    // Loop through the guards and execute the canActivate method\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        error: err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw new UnauthorizedException();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt';\nimport { HashingProvider } from './providers/hashing';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './guard/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { UserModule } from 'src/users/user.module';\nimport { AuthController } from './auth.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // Use the abstract class as a token\n      useClass: BcryptProvider, // Bind it to the concrete implementation\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Auth service class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        method for the refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n                        signin method taking signinDto\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { UserService } from 'src/users/provider/user.service';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n/**Auth service class */\n@Injectable()\nexport class AuthService {\n    constructor(\n        /* \n          injecting user service\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /*inject signInProvider*/\n        private readonly signInProvider: SignInProvider,\n\n        /* \n         inject refreshTokenProvider\n         */\n         private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n        /**signin method taking signinDto */\n    public async SignIn(signInDto: SignInDto) {\n        return await this.signInProvider.SignIn(signInDto)\n    }\n\n        /**method for the refresh token */\n    public refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }    \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.ts\n        \n\n\n            \n                Description\n            \n            \n                injectable decorator\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:18\n                        \n                    \n\n\n            \n                \n                        Comparing password method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:10\n                        \n                    \n\n\n            \n                \n                        Hasshing  password method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing';\nimport * as bcrypt from 'bcrypt';\n\n/**injectable decorator */\n@Injectable()\n/**BcryptProvider class that implements Hashing provider */\nexport class BcryptProvider implements HashingProvider {\n        /**Hasshing  password method*/\n    public async hashPassword(inpPassword: string | Buffer): Promise {\n        const saltRounds = 10\n        const salt = await bcrypt.genSalt(saltRounds)\n        \n        return await bcrypt.hash(inpPassword, salt) \n    }\n\n    /**Comparing password method */ \n    public async comparePasswords(password: string, encryPassword: string): Promise {\n        return await bcrypt.compare(password, encryPassword)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nChatRoomService \n\nChatRoomService \n\n\n\nChatModule\n\nChatModule\n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chatrooms/chatrooms.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            chatroom module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatRoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatRoom } from './chatroom.entity'; \nimport { ChatRoomController } from './chatroom.controller';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { User } from '../users/user.entitly'; \n\n/**chatroom module */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatRoom, User]),\n  ],\n  controllers: [ChatRoomController],\n  providers: [ChatRoomService],\n  exports: [ChatRoomService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatRoom.html":{"url":"entities/ChatRoom.html","title":"entity - ChatRoom","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                chat room entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:43\n                        \n                    \n\n            \n                \n                    The date the chat was created\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:17\n                        \n                    \n\n            \n                \n                    name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ChatRoomType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chatRooms)@JoinTable({name: 'chat_room_users', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:39\n                        \n                    \n\n            \n                \n                    Many-many relationship between the user and the chat room\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable, CreateDateColumn } from 'typeorm';\nimport { User } from 'src/users/user.entitly'; \nimport { ChatRoomType } from './enums/chatroomType';\n\n\n/**chat room entity */\n@Entity()\nexport class ChatRoom {\n  /**Unique identifier */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n    name of the user.\n   */\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: ChatRoomType,\n    default: ChatRoomType.GROUP\n  })\n  type: ChatRoomType;\n\n    /**Many-many relationship between the user and the chat room */\n  @ManyToMany(() => User, (user) => user.chatRooms)\n  @JoinTable({\n    name: 'chat_room_users',\n    joinColumn: {\n      name: 'chat_room_id',\n      referencedColumnName: 'id'\n    },\n    inverseJoinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id'\n    }\n  })\n  users: User[];\n\n  /**The date the chat was created */\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatRoomController.html":{"url":"controllers/ChatRoomController.html","title":"controller - ChatRoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatRoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat-rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:14\n                        \n                    \n\n\n            \n                \n                        chat room to create a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        chat room to delete a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto'; \nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto'; \n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n    /**chat room to create a post */\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto) {\n    return this.chatRoomService.create(createChatRoomDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateChatRoomDto: UpdateChatRoomDto) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  /**chat room to delete a post */\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.chatRoomService.remove(id);\n  }\n\n  @Post(':id/users/:userId')\n  addUser(@Param('id') id: string, @Param('userId') userId: string) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  @Delete(':id/users/:userId')\n  removeUser(@Param('id') id: string, @Param('userId') userId: string) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatRoomService.html":{"url":"injectables/ChatRoomService.html","title":"injectable - ChatRoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatRoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/providers/chatrooms/chatrooms.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Chatroom service class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserToChatRoom\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeUserFromChatRoom\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatRoomRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatRoomRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addUserToChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserToChatRoom(chatRoomId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserFromChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserFromChatRoom(chatRoomId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ChatRoom } from '../../../chatrooms/chatroom.entity'; \nimport { CreateChatRoomDto } from '../../../chatrooms/DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from '../../../chatrooms/DTOs/update-chat-room.dto';\nimport { User } from '../../../users/user.entitly'; \nimport { ChatRoomType } from 'src/chatrooms/enums/chatroomType';\n\n/**\n * Chatroom service class\n */\n@Injectable()\nexport class ChatRoomService {\n  constructor(\n    @InjectRepository(ChatRoom)\n    private chatRoomRepository: Repository,\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  \n  async create(createChatRoomDto: CreateChatRoomDto): Promise {\n    const users = await this.userRepository.findByIds(createChatRoomDto.userIds);\n    \n    if (users.length !== createChatRoomDto.userIds.length) {\n      throw new BadRequestException('One or more users not found');\n    }\n\n    if (createChatRoomDto.type === ChatRoomType.PRIVATE && users.length !== 2) {\n      throw new BadRequestException('Private chat rooms must have exactly 2 users');\n    }\n\n    const chatRoom = this.chatRoomRepository.create({\n      ...createChatRoomDto,\n      users,\n    });\n\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async findAll(): Promise {\n    return this.chatRoomRepository.find({\n      relations: ['users'],\n    });\n  }\n\n  async findOne(id: string): Promise {\n    const chatRoom = await this.chatRoomRepository.findOne({\n      where: { id },\n      relations: ['users'],\n    });\n\n    if (!chatRoom) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n\n    return chatRoom;\n  }\n\n  async update(id: string, updateChatRoomDto: UpdateChatRoomDto): Promise {\n    const chatRoom = await this.findOne(id);\n    \n    if (updateChatRoomDto.userIds) {\n      const users = await this.userRepository.findByIds(updateChatRoomDto.userIds);\n      \n      if (users.length !== updateChatRoomDto.userIds.length) {\n        throw new BadRequestException('One or more users not found');\n      }\n\n      if (chatRoom.type === ChatRoomType.PRIVATE && users.length !== 2) {\n        throw new BadRequestException('Private chat rooms must have exactly 2 users');\n      }\n\n      chatRoom.users = users;\n    }\n\n    Object.assign(chatRoom, updateChatRoomDto);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async remove(id: string): Promise {\n    const result = await this.chatRoomRepository.delete(id);\n    \n    if (result.affected === 0) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n  }\n\n  async addUserToChatRoom(chatRoomId: string, userId: string): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n    const user = await this.userRepository.findOne({ where: { id: Number(userId) }});\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found`);\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot add users to private chat rooms');\n    }\n\n    chatRoom.users.push(user);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async removeUserFromChatRoom(chatRoomId: string, userId: string): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot remove users from private chat rooms');\n    }\n\n    chatRoom.users = chatRoom.users.filter(user => user.id !== Number(userId));\n    return this.chatRoomRepository.save(chatRoom);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatRoomDto.html":{"url":"classes/CreateChatRoomDto.html","title":"class - CreateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/create-chat-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChatRoomType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsUUID('4', {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsArray, IsUUID, IsOptional } from 'class-validator';\nimport { ChatRoomType } from '../enums/chatroomType'; \n\nexport class CreateChatRoomDto {\n  @IsString()\n  name: string;\n\n  @IsEnum(ChatRoomType)\n  @IsOptional()\n  type?: ChatRoomType;\n\n  @IsArray()\n  @IsUUID('4', { each: true })\n  userIds: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/googleUserProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for creating users authenticated via Google.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/googleUserProvider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Google-authenticated user'})@ApiResponse({status: 201, description: 'User successfully created.'})@ApiResponse({status: 409, description: 'Could not create a new user.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/googleUserProvider.ts:35\n                        \n                    \n\n\n            \n                \n                        Creates a new user using Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Google user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created user entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { GoogleInterface } from '../../auth/social/interfaces/user.interface';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Service responsible for creating users authenticated via Google.\n */\n@ApiTags('Users')\n@Injectable()\n\n/**Create Google User Provider class */\nexport class CreateGoogleUserProvider {\n  constructor(\n    /**\n     * Injects the user repository.\n     */\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new user using Google authentication.\n   * @param googleUser - The Google user data.\n   * @returns The created user entity.\n   * @throws ConflictException if user creation fails.\n   */\n  @ApiOperation({ summary: 'Create a Google-authenticated user' })\n  @ApiResponse({ status: 201, description: 'User successfully created.' })\n  @ApiResponse({ status: 409, description: 'Could not create a new user.' })\n\n  /**Method to create GoogleUser */\n  public async createGoogleUser(googleUser: GoogleInterface): Promise {\n    try {\n      const user = this.userRepository.create(googleUser);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Must contain numbers, alphabets, uppercase letters, and match the password'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:108\n                        \n                    \n\n            \n                \n                    Confirm password field, must match the password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com', description: 'Email field'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    Email field (must be unique).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'First name field'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:50\n                        \n                    \n\n            \n                \n                    First name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]', description: 'This is auto-generated from Google when you sign up with Google'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:133\n                        \n                    \n\n            \n                \n                    Google ID (used for OAuth authentication).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'Last name field'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:63\n                        \n                    \n\n            \n                \n                    Last name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Password should contain a number, alphabets, and an uppercase letter'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:95\n                        \n                    \n\n            \n                \n                    Password field with specific validation rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: userRole, description: 'Role of the user'})@IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:120\n                        \n                    \n\n            \n                \n                    User role (default is USER if not provided).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {   IsString,   IsEmail,   IsNotEmpty,   IsEnum,   IsOptional,   Validate,   MaxLength,   Matches,   ValidatorConstraint,   ValidatorConstraintInterface,   ValidationArguments, } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform } from 'class-transformer';\n\n/**\n * ValidatorConstraint: Custom validation class to ensure that\n * the confirmPassword field matches the password field.\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nexport class MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  /**\n   * Validates whether the confirmPassword field matches the password field.\n   * @param confirmPassword - The confirm password input.\n   * @param args - Validation arguments.\n   * @returns Boolean indicating if passwords match.\n   */\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  /**\n   * Returns the default error message for password mismatch.\n   * @param args - Validation arguments.\n   * @returns Error message string.\n   */\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user.\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain a number, alphabets, and an uppercase letter',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Must contain numbers, alphabets, uppercase letters, and match the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    description: 'Role of the user',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is auto-generated from Google when you sign up with Google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/access-token/access-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                CreateUserDto class representing the user creation request payload.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Password should contain numbers, alphabets, and uppercase and should be the same as the password.'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:118\n                        \n                    \n\n            \n                \n                    Confirm password field, must match the password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com', description: 'Email field'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:85\n                        \n                    \n\n            \n                \n                    Email field (must be unique).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'First name field'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:59\n                        \n                    \n\n            \n                \n                    First name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]', description: 'This is autogenerated from Google when you sign up with Google.'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:144\n                        \n                    \n\n            \n                \n                    Google ID (used for OAuth authentication).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'Last name field'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:72\n                        \n                    \n\n            \n                \n                    Last name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Password should contain numbers, alphabets, and uppercase.'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:104\n                        \n                    \n\n            \n                \n                    Password field with specific validation rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: userRole, example: undefined, description: 'User role (default is USER if not provided).'})@IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:131\n                        \n                    \n\n            \n                \n                    User role (default is USER if not provided).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform } from 'class-transformer';\n\n/**\n * ValidatorConstraint: Custom validation class to ensure that\n * the confirmPassword field matches the password field.\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\n/**\n * MatchPasswordsConstraint class that implements ValidatorConstraintInterface\n */\n\n/**MatchPasswordConstraint implementing ValidatorConstraintInterface */\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n\n    /** Ensure password is present before checking match */\n    if (!object.password) return false;\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * CreateUserDto class representing the user creation request payload.\n */\n\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain numbers, alphabets, and uppercase.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'Password should contain numbers, alphabets, and uppercase and should be the same as the password.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    example: userRole.USER,\n    description: 'User role (default is USER if not provided).',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is autogenerated from Google when you sign up with Google.',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/create-user.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling user creation\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/create-user.provider.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for User entity\n\n\n                                                        \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for password hashing\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User successfully created.', type: User})@ApiResponse({status: 400, description: 'User already exists.'})@ApiResponse({status: 408, description: 'Database connection issue.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/create-user.provider.ts:40\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {   BadRequestException,   forwardRef,   Inject,   Injectable,   RequestTimeoutException, } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Service responsible for handling user creation\n */\n@ApiTags('Users')\n@Injectable()\nexport class CreateUserProvider {\n  /**\n   * Constructor to inject dependencies.\n   * @param userRepository - Repository for User entity\n   * @param hashingProvider - Service for password hashing\n   */\n  constructor(\n    /** Inject userRepository */\n    @InjectRepository(User) private userRepository: Repository,\n\n    /** Inject hashingProvider */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  /**\n   * Creates a new user in the system\n   * @param createUserDto - DTO containing user data.\n   * @returns The newly created user.\n   * @throws BadRequestException If the user already exists.\n   * @throws RequestTimeoutException If there is an issue connecting to the database.\n   */\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User successfully created.', type: User })\n  @ApiResponse({ status: 400, description: 'User already exists.' })\n  @ApiResponse({ status: 408, description: 'Database connection issue.' })\n  public async createUsers(createUserDto: CreateUserDto): Promise {\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'The user is having network issues',\n        },\n      );\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists');\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      createUserDto.password,\n    );\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    try {\n      await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'The user is having network issues',\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/data-response/data-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, \n  ExecutionContext, \n  Injectable, \n  NestInterceptor \n} from '@nestjs/common';\nimport { map, Observable, pipe, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('before')\n    return next.handle().pipe(map((data) => ({\n      apiversrion:'0.0.1',\n      result: data.length,\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                using the patch to edit part of the data, the partialtype makes everything optional\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/patch-user.dto.ts:12\n                        \n                    \n\n            \n                \n                    unique identifier id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsInt, IsNotEmpty, IsString } from \"class-validator\";\nimport { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n \n/**using the patch to edit part of the data, the partialtype makes everything optional */ \nexport class EditUserDto extends PartialType(CreateUserDto) {\n    /**unique identifier id */\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmail.html":{"url":"injectables/FindOneByEmail.html","title":"injectable - FindOneByEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-email.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for finding a user by email.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-email.ts:10\n                            \n                        \n\n                \n                    \n                            Injects the User repository for database operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository to interact with the User entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-email.ts:27\n                        \n                    \n\n\n            \n                \n                        Method to find a user by email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The found user.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n/**\n   Service responsible for finding a user by email.\n */\n@Injectable()\nexport class FindOneByEmail {\n     /**\n       Injects the User repository for database operations.\n      @param {Repository} userRepository - Repository to interact with the User entity.\n     */\n    constructor(\n        @InjectRepository(User) private userRepository: Repository) {}\n\n        \n    /**\n     \n      @param {string} email - The email of the user to find.\n      @returns {Promise} The found user.\n      @throws {RequestTimeoutException} If there is an issue connecting to the database.\n      @throws {UnauthorizedException} If the user does not exist.\n     */\n     /** Method to find a user by email. */\n    public async findOneByEmail(email: string): Promise {\n        let user: User | undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({ email });\n        } catch (error) {\n            throw new RequestTimeoutException('Could not fetch user', {\n                description: 'Error connecting to database',\n            });\n        }\n\n        if (!user) {\n            throw new UnauthorizedException('User does not exist');\n        }\n\n        return user; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-googleId.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for finding a user by Google ID.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-googleId.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-googleId.ts:20\n                        \n                    \n\n\n            \n                \n                        Method to find a user by their Google ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n/**\n  Service responsible for finding a user by Google ID.\n */\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /*\n     *inject userRepository\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n   /** Method to find a user by their Google ID. */\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userRepository.findOneBy({ googleId })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for generating tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:60\n                        \n                    \n\n\n            \n                \n                        Generates access and refresh tokens for a given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity for whom tokens are generated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing access token, refresh token, and user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Signs a token with a given user ID, expiration time, and optional payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the token.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAdditional data to include in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A signed JWT token.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interface/activeInterface';\nimport { UserService } from 'src/users/provider/user.service';\nimport { User } from 'src/users/user.entitly';\n\n/**\n * Injectable service for generating tokens.\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Injecting userService repository.\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * Injecting JwtService.\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting jwtConfig.\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Signs a token with a given user ID, expiration time, and optional payload.\n   * @param userId - The ID of the user.\n   * @param expiresIn - The expiration time for the token.\n   * @param payload - Additional data to include in the token.\n   * @returns A signed JWT token.\n   */\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      } as ActiveUserData,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn,\n      },\n    );\n  }\n\n  /**\n   * Generates access and refresh tokens for a given user.\n   * @param user - The user entity for whom tokens are generated.\n   * @returns An object containing access token, refresh token, and user details.\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      /**\n       * Generate access token.\n       */\n      this.signToken(user.id, this.jwtConfiguration.ttl, { email: user.email }),\n\n      /**\n       * Generate refresh token.\n       */\n      this.signToken(user.id, this.jwtConfiguration.ttl),\n    ]);\n\n    return { accessToken, refreshToken, user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetuserParamDto.html":{"url":"classes/GetuserParamDto.html","title":"class - GetuserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetuserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/getUserparamdto.ts\n        \n\n\n            \n                Description\n            \n            \n                Get users paramsdto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/getUserparamdto.ts:10\n                        \n                    \n\n            \n                \n                    Unique identifier id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional,IsInt } from \"class-validator\";\nimport { Type } from 'class-transformer';\n\n/**Get users paramsdto class */\nexport class GetuserParamDto {\n   \n     /**Unique identifier id */\n    @IsInt()\n    @Type (() => Number )\n    id?:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n            \n                Description\n            \n            \n                Google authentication controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Authenticate user with Google token'})@ApiResponse({status: 200, description: 'Successfully authenticated user'})@ApiResponse({status: 400, description: 'Invalid Google token'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Authenticates a user using Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Google authentication token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Authentication response.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { authTypes } from '../enums/authTypes.enum';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n/**\n * Google authentication controller\n */\n@ApiTags('Google Authentication')\n@Auth(authTypes.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n    /**\n     * Constructor for GoogleAuthenticationController\n     * @param googleAuthenticationService - Injects GoogleAuthenticationService\n     */\n    constructor(\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) {}\n\n    /**\n     * Authenticates a user using Google authentication.\n     * @param googleTokenDto - The Google authentication token.\n     * @returns Authentication response.\n     */\n    @ApiOperation({ summary: 'Authenticate user with Google token' })\n    @ApiResponse({ status: 200, description: 'Successfully authenticated user' })\n    @ApiResponse({ status: 400, description: 'Invalid Google token' })\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googleTokenDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Authentication Service\nHandles authentication using Google OAuth tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtConfigurattion: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle user-related operations\n\n\n                                                        \n                                                \n                                                \n                                                        jwtConfigurattion\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT\n\n\n                                                        \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to generate authentication tokens\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Authenticate method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the Google ID token\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The generated authentication tokens for the user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                        \n                    \n\n            \n                \n                    inject oAuthClient\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\n/**\n Google Authentication Service\n  Handles authentication using Google OAuth tokens.\n */\n@Injectable()\n/** OAuth2 client for handling Google authentication */\nexport class GoogleAuthenticationService implements OnModuleInit {\n  /**inject oAuthClient */\n  private oAuthClient: OAuth2Client;\n  /**\n   Constructor to inject dependencies.\n    @param userService - Service to handle user-related operations\n    @param jwtConfigurattion - Configuration object for JWT\n   @param generateTokensProvider - Service to generate authentication tokens\n   */\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n       /** Inject JWT configuration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigurattion: ConfigType,\n    /**\n      inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const client_id = this.jwtConfigurattion.googleClient_id;\n    const client_secret = this.jwtConfigurattion.googleClient_secret;\n\n    this.oAuthClient = new OAuth2Client(client_id, client_secret);\n  }\n\n  /**\n    Authenticates a user using a Google token.\n    @param googleTokenDto - DTO containing the Google ID token\n    @returns The generated authentication tokens for the user\n    @throws UnauthorizedException if authentication fails\n   */\n\n    /**Authenticate method */\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      console.log(\"Received Token:\", googleTokenDto.token);\n\n      // verify the google token sent by user\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      console.log(\"Google Token Payload:\", loginTicket.getPayload());\n\n      // extract the payload from google jwt token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the database using googleId\n      const user = await this.userService.findOneByGoogleId(googleId);\n\n      // if user exist, generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      // else generate the user and create the token\n      const newUser = await this.userService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      // if any of the step fails, send an unauthorised exception\n      console.error(\"Google Auth Error:\", error);\n      throw new UnauthorizedException('failed to authenticate with google');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthticationModule.html":{"url":"modules/GoogleAuthticationModule.html","title":"module - GoogleAuthticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_GoogleAuthticationModule_providers\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/social/google-authtication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Module({\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleInterface.html":{"url":"interfaces/GoogleInterface.html","title":"interface - GoogleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/interfaces/user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Google interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    email as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    first name as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Google id as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    last name as strig\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleInterface {\n    /**email as string */\n    email: string\n\n    /**first name as string */\n    firstName: string\n    /**last name as strig */\n    lastName: string\n    /**Google id as string */\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                class for GoogleTokendto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:8\n                        \n                    \n\n            \n                \n                    The Token of type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\n\n/**class for GoogleTokendto */\nexport class GoogleTokenDto {\n\n     /**The Token of type string */\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.ts\n        \n\n\n            \n                Description\n            \n            \n                Hasing provider abstract class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:10\n                        \n                    \n\n\n            \n                \n                        comparison during signIn\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:7\n                        \n                    \n\n\n            \n                \n                        hashing during signUp\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**Hasing provider abstract class */\n@Injectable()\nexport abstract class HashingProvider {\n     /**hashing during signUp */ \n    abstract hashPassword(inpPassword: string | Buffer): Promise\n\n /**comparison during signIn */ \n    abstract comparePasswords(password: string, encryPassword: string): Promise\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { config } from 'process';\nimport { from } from 'form-data';\nimport { Template } from 'ejs';\nimport { join } from 'path';\nimport { strict } from 'assert';\nimport {EjsAdapter} from '@nestjs-modules/mailer/dist/adapters/ejs.adapter'\nimport { MailProvider } from './providers/mail.provider';\n\n\n@Global()\n@Module({\n    imports: [MailerModule.forRootAsync({\n        inject: [ConfigService],\n        useFactory:async(config:ConfigService) => ({\n            transport: {\n                host: config.get('MAIL_HOST'),\n                secure: false,\n                port: config.get('MAIL_PORT'),\n                auth: {\n                    user: config.get('SMTP_USERNAME'),\n                    pass: config.get('SMTP_PASSWORD'),\n                },\n                default: {\n                    from: `no-reply-`\n                },\n                template: {\n                    dir: join(__dirname, 'template'),\n                    adapter: new EjsAdapter({\n                    inlineCssEnabled: true,\n                    }),\n                    Option : {\n                        strict: false,\n                    }\n\n                }\n            }\n        })\n    })],\n    providers: [MailProvider],\n    exports: [MailProvider]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailProvider.html":{"url":"injectables/MailProvider.html","title":"injectable - MailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                WelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        WelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    WelcomeEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { name } from 'ejs';\nimport { User } from 'src/users/user.entitly';\n\n\n@Injectable()\nexport class MailProvider {\n    constructor (\n        //inject the mailer Service\n        private readonly mailerService:MailerService,\n    ) {}\n\n\n    public async WelcomeEmail (user:User):Promise {\n        await this.mailerService.sendMail({\n         to: user.email,\n         from: `helpdesk from realTimeChat.com`,\n         subject: `welcome to realTimeChat`,\n         template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000/',\n        }\n        })\n\n\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                ValidatorConstraint: Custom validation class to ensure that\nthe confirmPassword field matches the password field.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:30\n                        \n                    \n\n\n            \n                \n                        Returns the default error message for password mismatch.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValidation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Error message string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:19\n                        \n                    \n\n\n            \n                \n                        Validates whether the confirmPassword field matches the password field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe confirm password input.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValidation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if passwords match.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {   IsString,   IsEmail,   IsNotEmpty,   IsEnum,   IsOptional,   Validate,   MaxLength,   Matches,   ValidatorConstraint,   ValidatorConstraintInterface,   ValidationArguments, } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform } from 'class-transformer';\n\n/**\n * ValidatorConstraint: Custom validation class to ensure that\n * the confirmPassword field matches the password field.\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nexport class MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  /**\n   * Validates whether the confirmPassword field matches the password field.\n   * @param confirmPassword - The confirm password input.\n   * @param args - Validation arguments.\n   * @returns Boolean indicating if passwords match.\n   */\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  /**\n   * Returns the default error message for password mismatch.\n   * @param args - Validation arguments.\n   * @returns Error message string.\n   */\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user.\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain a number, alphabets, and an uppercase letter',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Must contain numbers, alphabets, uppercase letters, and match the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    description: 'Role of the user',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is auto-generated from Google when you sign up with Google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint-1.html":{"url":"classes/MatchPasswordsConstraint-1.html","title":"class - MatchPasswordsConstraint-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/access-token/access-token.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                ValidatorConstraint: Custom validation class to ensure that\nthe confirmPassword field matches the password field.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform } from 'class-transformer';\n\n/**\n * ValidatorConstraint: Custom validation class to ensure that\n * the confirmPassword field matches the password field.\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\n/**\n * MatchPasswordsConstraint class that implements ValidatorConstraintInterface\n */\n\n/**MatchPasswordConstraint implementing ValidatorConstraintInterface */\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n\n    /** Ensure password is present before checking match */\n    if (!object.password) return false;\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * CreateUserDto class representing the user creation request payload.\n */\n\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain numbers, alphabets, and uppercase.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description:\n      'Password should contain numbers, alphabets, and uppercase and should be the same as the password.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    example: userRole.USER,\n    description: 'User role (default is USER if not provided).',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is autogenerated from Google when you sign up with Google.',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paginated.html":{"url":"classes/Paginated.html","title":"class - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Interfaces/paginatedInterface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                link\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Paginated   {\n    data:T[];\n    meta: {\n        itemsPerPage:number,\n        totalItems: number,\n        currentPage:number,\n        totalPage:number,\n    };\n    link: \n    {\n        first: string,\n        last:string,\n        current: string,\n        previous:string,\n        next:string,\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module,forwardRef } from '@nestjs/common';\nimport { PaginationProvider } from './pagination/Provider/pagination.provider';\n\n\n\n\n@Module({\n  imports:[],\n  providers: [PaginationProvider],\n  controllers: [],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Provider/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/Provider/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(paginationQueryDto: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/Provider/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { PaginationQueryDto } from \"../pagination-query.dto\";\nimport { ObjectLiteral, Repository } from \"typeorm\";\nimport { Request } from \"express\";\nimport { REQUEST } from \"@nestjs/core\"\nimport { Paginated } from \"../Interfaces/paginatedInterface\";\n\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor (\n        @Inject(REQUEST)\n        private readonly request:Request,\n    ) {}\n    \n\n    public async paginatedQuery (paginationQueryDto:PaginationQueryDto, repository:Repository,): Promise> {\n\n        const result = await repository.find({\n\n            //skip: number of post\n            //take: number of post to show per page\n            skip: paginationQueryDto.limit * (paginationQueryDto.page - 1),\n            take: paginationQueryDto.limit,\n        })\n\n\n        // create a requestUrl \n        // i.e http://localhost:3000/resource \n        // the http is this.requestprotocol\n        const baseUrl = this.request.protocol; + \"://\" + this.request.headers.host + \"/\"\n\n        const newUrl = new URL(this.request.url, baseUrl)\n\n        console.log(baseUrl);\n        // line 34 give u http://localhost:3000/resource  as result on your terminal\n        console.log(newUrl)\n\n       const totalItems = await repository.count()\n\n       const totalpage = Math.ceil(totalItems / paginationQueryDto.limit)\n\n       const nextpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page +1\n\n       const prevpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page -1\n\n\n        const finalResponse: Paginated = {\n            data: result,\n            meta: {\n                itemsPerPage: paginationQueryDto.limit,\n                totalItems: totalItems,\n                currentPage: paginationQueryDto.page,\n                totalPage : totalpage\n            }, \n            link: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=1`,\n\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&${totalpage}`,\n   \n               current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${paginationQueryDto.page}`,\n   \n               next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${nextpage}`,\n   \n               previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${prevpage}`\n   \n            }\n        }\n\n        return finalResponse\n\n\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\n\nexport class PaginationQueryDto {\n\n    @IsOptional()\n    @IsPositive()\n    limit?:number = 2;\n\n    @IsOptional()\n    @IsPositive()\n    page?:number = 1;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refreshTokenDto.ts\n        \n\n\n            \n                Description\n            \n            \n                refresh tokendto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refreshTokenDto.ts:9\n                        \n                    \n\n            \n                \n                    refreshToken of type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, } from \"class-validator\";\n\n/**refresh tokendto class */\nexport class RefreshTokenDto {\n\n    /**refreshToken of type string */\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for validating refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n/**Refresh token provider class */\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /*\n      injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n      inject jwtService\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /* \n      inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider\n  ) {}\n\n    /**A method for validating refresh token */\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // validate the refresh token using jwt\n   const { sub } = await this.jwtService.verifyAsync(\n        refreshTokenDto.refreshToken, \n        {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n    })\n\n    // grab the user from the database\n    const user = await this.userService.FindOneById(sub)\n\n    // generate the token\n    return await this.generateTokenProvider.generateTokens(user)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/userDto.ts\n        \n\n\n            \n                Description\n            \n            \n                signinDto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:8\n                        \n                    \n\n            \n                \n                    A unique email address of the user example:Rukky@gmail.com\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:13\n                        \n                    \n\n            \n                \n                    password of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\n/**signinDto class */\nexport class SignInDto {\n  /**A unique email address of the user example:Rukky@gmail.com */\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**password of the user */\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Sign in provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        A method to check if user exist in db\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { HashingProvider } from './hashing';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n/**Sign in provider class */\n@Injectable()\nexport class SignInProvider {\n    constructor(\n        /* \n          injecting userService repo\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n          injecting hashing dependency\n         */\n        private readonly hashingProvider: HashingProvider,\n        \n        /* \n          injecting generateTokenProvider\n         */\n        private readonly generateTokenProvider: GenerateTokensProvider\n    ){}\n        /**A method to check if user exist in db */\n        public async SignIn(signInDto: SignInDto) {\n        // check if user exist in db\n        // throw error if user doesnt exist\n        let user = await this.userService.GetOneByEmail(signInDto.email)\n\n        if (!user) {\n            throw new UnauthorizedException('email or password is incorrect');\n        }\n        \n        /**conpare password */\n        let isCheckedPassword: boolean = false\n\n        try {\n            isCheckedPassword = await this.hashingProvider.comparePasswords(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'error  connecting to the database'\n            })\n        }\n\n        if (!isCheckedPassword) {\n            throw new UnauthorizedException('email or password is incorrect')\n        }\n        // login\n        return await this.generateTokenProvider.generateTokens(user)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatRoomDto.html":{"url":"classes/UpdateChatRoomDto.html","title":"class - UpdateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/update-chat-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateChatRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatRoomDto } from './create-chat-room.dto';\n\nexport class UpdateChatRoomDto extends PartialType(CreateChatRoomDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entitly.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity representing the user table in the database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                chatRooms\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, chatRoom => chatRoom.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:64\n                        \n                    \n\n            \n                \n                    Many-to-Many relationship between users and chat rooms.\nThis allows a user to be part of multiple chat rooms.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:38\n                        \n                    \n\n            \n                \n                    Unique email address of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:24\n                        \n                    \n\n            \n                \n                    First name of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 225, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:56\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:17\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:31\n                        \n                    \n\n            \n                \n                    Last name of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:49\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable, OneToMany } from 'typeorm';\nimport { userRole } from './Enums/userRole.enum';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\n// import { Message } from 'src/messages/message.entity';\n\n/**\n  User entity representing the user table in the database.\n */\n@Entity()\nexport class User {\n  /**\n    Unique identifier for the user.\n    @example 1\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n    First name of the user.\n    @example \"John\"\n   */\n  @Column('varchar', { length: 100, nullable: false })\n  firstName: string;\n\n  /**\n     Last name of the user.\n    @example \"Doe\"\n   */\n  @Column('varchar', { length: 100 })\n  lastName: string;\n\n  /**\n   Unique email address of the user.\n    @example \"johndoe@example.com\"\n   */\n  @Column('varchar', { unique: true, nullable: false })\n  email: string;\n\n  @Exclude()\n  @Column('varchar', { nullable: true })\n  password?: string;\n\n  /**\n    @description Role of the user in the application. Default is `USER`.\n   @example \"USER\"\n   */\n  @Column({ type: 'enum', enum: userRole, default: userRole.USER })\n  userRole?: userRole;\n\n  /**\n    @description Google ID for authentication when the user signs up with Google.\n    @example \"123456789-google-id\"\n   */\n  @Column('varchar', { length: 225, nullable: true })\n  googleId?: string;\n\n  /**\n    Many-to-Many relationship between users and chat rooms.\n    This allows a user to be part of multiple chat rooms.\n   */\n  @ManyToMany(() => ChatRoom, (chatRoom) => chatRoom.users)\n  @JoinTable() // This creates a junction table to link users and chat rooms\n  chatRooms: ChatRoom[];\n\n  // One-to-Many relationship with Message\n  // @OneToMany(() => Message, (message) => message.sender)\n  // messages: Message[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing user-related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                editedPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiBody({type: CreateUserDto, description: 'User data'})@ApiResponse({status: 201, description: 'User successfully created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data transfer object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a user by ID'})@ApiQuery({name: 'id', required: true, description: 'User ID', example: 1})@ApiResponse({status: 200, description: 'User successfully deleted'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        editedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    editedPost(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user details'})@ApiBody({type: EditUserDto, description: 'Updated user data'})@ApiResponse({status: 200, description: 'User successfully updated'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Updates user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUpdated user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getuserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieve users or a single user by ID'})@ApiParam({name: 'id', required: false, description: 'User ID (optional)'})@ApiQuery({name: 'limit', required: false, description: 'Number of users per page', example: 20})@ApiQuery({name: 'page', required: false, description: 'Page number for pagination', example: 1})@ApiResponse({status: 200, description: 'Successful retrieval of users'})@Get('/:id?')@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users or a single user if an ID is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getuserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptional user ID parameter.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users per page (default: 20).\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination (default: 1).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users or a specific user if ID is provided.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from \"@nestjs/common\";\nimport { UserService } from \"./provider/user.service\";\nimport { CreateUserDto } from \"./DTOs/create-user.dto\";\nimport { EditUserDto } from \"./DTOs/patch-user.dto\";\nimport { GetuserParamDto } from \"./DTOs/getUserparamdto\";\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from \"@nestjs/swagger\";\n\n/**\n  Controller for managing user-related operations.\n */\n@Controller('users')\nexport class UserController {\n    /**constructor for injecting user service */\n    constructor(private readonly userService:UserService) {}\n\n    /**\n      Retrieves a list of users or a single user if an ID is provided.\n      @param {GetuserParamDto} getuserParamDto - Optional user ID parameter.\n      @param {number} limit - The number of users per page (default: 20).\n      @param {number} page - The page number for pagination (default: 1).\n      @returns {Promise} A list of users or a specific user if ID is provided.\n     */\n      @ApiOperation({ summary: 'Retrieve users or a single user by ID' })\n      @ApiParam({ name: 'id', required: false, description: 'User ID (optional)' })\n      @ApiQuery({ name: 'limit', required: false, description: 'Number of users per page', example: 20 })\n      @ApiQuery({ name: 'page', required: false, description: 'Page number for pagination', example: 1 })\n      @ApiResponse({ status: 200, description: 'Successful retrieval of users' })\n      @Get('/:id?')\n  \n      /**Get user method */\n    @Get('/:id?')\n  public getUsers(\n    @Param() getuserParamDto: GetuserParamDto,\n    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    console.log(getuserParamDto);\n    return this.userService.findAll(getuserParamDto, limit, page);\n  }\n\n  /**\n    Creates a new user.\n      @param {CreateUserDto} createUserDto - User data transfer object.\n      @returns {Promise} The newly created user.\n     */\n      @ApiOperation({ summary: 'Create a new user' })\n      @ApiBody({ type: CreateUserDto, description: 'User data' })\n      @ApiResponse({ status: 201, description: 'User successfully created' })\n  /**Create a user method */\n@Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUsers(createUserDto);\n  }\n  \n  /**\n     Deletes a user by ID.\n      @param {number} id - The ID of the user to delete.\n      @returns {Promise} A confirmation message.\n     */\n      @ApiOperation({ summary: 'Delete a user by ID' })\n      @ApiQuery({ name: 'id', required: true, description: 'User ID', example: 1 })\n      @ApiResponse({ status: 200, description: 'User successfully deleted' })\n\n  /**Delete a user method */\n  @Delete()\n  public deleteUser(@Query('id', ParseIntPipe) id:number)  {\n      return this.userService.deleteUser(id)\n\n  }\n\n  /**\n      Updates user details.\n      @param {EditUserDto} edituserDto - Updated user data.\n      @returns {Promise} The updated user details.\n     */\n      @ApiOperation({ summary: 'Update user details' })\n      @ApiBody({ type: EditUserDto, description: 'Updated user data' })\n      @ApiResponse({ status: 200, description: 'User successfully updated' })\n  \n\n  /**Update or edit  a user method */\n  @Patch()\n  public editedPost(@Body() edituserDto: EditUserDto) {\n    return this.userService.editUser(edituserDto);\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmail\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entitly';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { FindOneByEmail } from './provider/find-one-by-email';\nimport { MailModule } from 'src/mail/mail.module';\nimport { FindOneByGoogleIdProvider } from './provider/find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './provider/googleUserProvider';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]), MailModule],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    FindOneByEmail,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for managing user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                editUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                FindOneById\n                            \n                            \n                                    Public\n                                    Async\n                                GetOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, createUserProvider: CreateUserProvider, findOneByemail: FindOneByEmail, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByemail\n                                                  \n                                                        \n                                                                        FindOneByEmail\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Creates a new user via Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGoogle user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Method to Creates a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data for creation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:100\n                        \n                    \n\n\n            \n                \n                        A method to Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion confirmation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(edituserDto: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:113\n                        \n                    \n\n\n            \n                \n                        A method to Updates user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Method to Retrieves all users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                List of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:133\n                        \n                    \n\n\n            \n                \n                        A method to Finds a user by Google ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGoogle ID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user associated with the given Google ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:78\n                        \n                    \n\n\n            \n                \n                        A method to Finds a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The found user or null.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        GetOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:89\n                        \n                    \n\n\n            \n                \n                        A method to Retrieves a user by email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser email.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the email.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entitly';\nimport { Repository } from 'typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { FindOneByEmail } from './find-one-by-email';\nimport { EditUserDto } from '../DTOs/patch-user.dto';\nimport { GetuserParamDto } from '../DTOs/getUserparamdto';\nimport { FindOneByGoogleIdProvider } from './find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './googleUserProvider';\nimport { GoogleInterface } from 'src/auth/social/interfaces/user.interface';\n\n\n/**\n   Service class for managing user-related operations.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    /*\n     *inject User entity*/\n     /**\n    Injects dependencies for user management.\n    @param {Repository} userRepository - Repository to interact with the User entity.\n    @param {CreateUserProvider} createUserProvider - Provider to handle user creation.\n    @param {FindOneByEmail} findOneByemail - Service to find a user by email.\n    @param {FindOneByGoogleIdProvider} findOneByGoogleIdProvider - Service to find a user by Google ID.\n    @param {CreateGoogleUserProvider} createGoogleUserProvider - Service to create a user via Google authentication.\n   */\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly findOneByemail: FindOneByEmail,\n\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  /**\n    Retrieves all users.\n    @param {GetuserParamDto} getUserParamDto - Parameters for filtering users.\n    @param {number} limit - Number of users to return.\n    @param {number} page - Page number for pagination.\n    @returns {Promise} List of users.\n   */\n\n  /**Method to Retrieves all users. */\n  public findAll(\n    getUserParamDto: GetuserParamDto,\n    limit: number,\n    page: number,\n  ): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n     Creates a new user.\n    @param {CreateUserDto} createUserDto - User data for creation.\n    @returns {Promise} The created user.\n   */\n\n  /**Method to Creates a new user */\n  public async createUsers(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUsers(createUserDto);\n  }\n\n  /**\n   \n    @param {number} id - User ID.\n    @returns {Promise} The found user or null.\n   */\n\n  /**A method to Finds a user by ID. */\n  public FindOneById(id: number): Promise {\n    return this.userRepository.findOneBy({ id });\n  }\n\n  /**\n    \n    @param {string} email - User email.\n    @returns {Promise} The user matching the email.\n   */\n\n  /**A method to Retrieves a user by email. */\n  public async GetOneByEmail(email: string) {\n    return await this.findOneByemail.findOneByEmail(email);\n  }\n\n  /**\n     \n    @param {number} id - User ID.\n    @returns {Promise} Deletion confirmation.\n   */\n\n  /**A method to Deletes a user by ID. */\n  public async deleteUser(id: number) {\n    await this.userRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n    \n    @param {EditUserDto} edituserDto - Data for updating user information.\n    @returns {Promise} The updated user.\n   */\n\n  /**A method to Updates user details. */\n  public async editUser(edituserDto: EditUserDto) {\n    let edit = await this.userRepository.findOneBy({\n      id: edituserDto.id,\n    });\n\n    edit.firstName = edituserDto.firstName ?? edit.firstName;\n    edit.lastName = edituserDto.lastName ?? edit.lastName;\n    edit.password = edituserDto.password ?? edit.password;\n    edit.email = edituserDto.email ?? edit.email;\n\n    return this.userRepository.save(edit);\n  }\n\n  /**\n   \n    @param {string} googleId - Google ID of the user.\n    @returns {Promise} The user associated with the given Google ID.\n   */\n\n  /**A method to Finds a user by Google ID. */\n  public async findOneByGoogleId(googleId: string) {\n    return this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  /**\n    @param {GoogleInterface} googleUser - Google user data.\n    @returns {Promise} The created user.\n   */\n  \n  /** Creates a new user via Google authentication. */\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    return this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refreshTokenDto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/userDto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n            guard\n            AuthGuardGuard\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/interface/activeInterface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/social/interfaces/user.interface.ts\n            \n            interface\n            GoogleInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/create-chat-room.dto.ts\n            \n            class\n            CreateChatRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/update-chat-room.dto.ts\n            \n            class\n            UpdateChatRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            controller\n            ChatRoomController\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.entity.ts\n            \n            entity\n            ChatRoom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chatrooms/providers/chatrooms/chatrooms.service.ts\n            \n            injectable\n            ChatRoomService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/common/interceptor/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/Interfaces/paginatedInterface.ts\n            \n            class\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/Provider/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.provider.ts\n            \n            injectable\n            MailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/getUserparamdto.ts\n            \n            class\n            GetuserParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-email.ts\n            \n            injectable\n            FindOneByEmail\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-googleId.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/provider/googleUserProvider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/provider/user.service.ts\n            \n            injectable\n            UserService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/user.entitly.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.1\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authTypes   (src/.../authTypes.enum.ts)\n                        \n                        \n                            ChatRoomType   (src/.../chatroomType.ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        authTypes\n                    \n                \n                    \n                        \n                            define authTypes enum\n\n                        \n                    \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/chatrooms/enums/chatroomType.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatRoomType\n                    \n                \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n\n    src/users/Enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                    \n                        \n                            Enum for user role\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The main entry point of the application. \nIt initializes the NestJS application, sets up global configurations, \nand starts the server.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nrealTimeChat (NestJS Project)\nThis is a NestJS project bootstrapped using the Nest CLI.\nGetting Started\nPrerequisites\n\nNode.js (LTS enforced)\nnpm\n\nInstallation\nClone the repository and install dependencies:\nExample :git clone https://github.com/phertyameen/realTimeChat.git\ncd realTimeChat\nnpm install\n\n# Running the Application\n\nStart the development server:\n```npm run start\n\nFor hot reload:\n```npm run start:dev\n\n# Project Structure\n\nsrc/ - Main application source code\nmain.ts - Entry point of the application\napp.module.ts - Root module with TypeORM connection\nconfig folder - contains appConfig and database configurations\napp.controller.ts - Default controller\napp.service.ts - Default service\n\n# Installed Packages\n\n@nestjs/config - Configuration management\n@nestjs/typeorm - TypeORM integration\nclass-validator - Validation utilities\nclass-transformer - Transformation utilities\n\n#Rules\n\nDo not push directly to any branch.\nAlways create a new branch for your changes.\nOpen a pull request for review before merging.\nAlways use multi-line comment i.e (/**...*/) comment system instead of the double slash (//) for uproper documentation\n\n#The keyboard shortcut for commenting\nMulti-line comment: Shift + Alt + A (Windows/Linux) or Shift + Option + A (Mac)\n\n#Useful Commands\nnpm run build - Build the project\nnpm run test - Run tests\n\n#License\nThis project is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatRoomService \n\nChatRoomService \n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const user: ActiveUserData = request[REQUEST_USER_KEY]\n    return field ? user?.[field] : user \n  },\n)\n                    \n                \n\n            \n                \n                    Custom decorator to retrieve active user data from the request.\nIt extracts the user information stored under REQUEST_USER_KEY.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: authTypes[]) => \n    SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    main auth class retrieve active user data from the request\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n            \n                \n                    defining the request authtype key\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    defining the request user key\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
