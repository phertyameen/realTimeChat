var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.595,1,2.425]],["body/guards/AccessTokenGuard.html",[1,3.279,2,2.758,3,0.163,4,0.147,5,0.13,6,5.651,7,4.314,8,3.348,9,0.27,10,1.146,11,1.591,12,5.08,13,2.271,14,5.302,15,1.694,16,3.862,17,5.5,18,4.719,19,4.654,20,0.714,21,3.862,22,1.416,23,0.015,24,1.209,25,0.484,26,0.942,27,4.133,28,4.314,29,3.862,30,3.509,31,1.102,32,2.172,33,5.302,34,4.2,35,3.862,36,0.403,37,1.337,38,0.688,39,3.509,40,0.55,41,2.007,42,2.388,43,2.388,44,2.758,45,2.556,46,2.388,47,3.01,48,3.01,49,3.348,50,0.163,51,0.047,52,2.007,53,1.628,54,2.758,55,4.597,56,3.862,57,2.167,58,3.862,59,3.965,60,3.862,61,3.862,62,2.758,63,2.617,64,1.694,65,2.119,66,3.081,67,1.14,68,3.348,69,3.862,70,3.348,71,3.862,72,2.119,73,1.906,74,3.862,75,1.146,76,1.582,77,3.862,78,3.862,79,0.01,80,0.01]],["title/interfaces/ActiveUserData.html",[81,1.935,82,2.151]],["body/interfaces/ActiveUserData.html",[3,0.242,4,0.217,5,0.193,9,0.4,23,0.015,25,0.545,26,1.062,50,0.242,79,0.013,80,0.013,81,2.826,82,3.745,83,3.789,84,4.963,85,1.939,86,2.963,87,4.39,88,1.844,89,2.331]],["title/controllers/AppController.html",[90,1.538,91,2.8]],["body/controllers/AppController.html",[3,0.228,4,0.204,5,0.181,9,0.377,10,1.422,20,0.635,23,0.015,31,1.119,36,0.367,40,0.767,50,0.228,51,0.08,53,1.654,75,1.164,79,0.012,80,0.012,88,1.663,90,2.787,91,4.699,92,2.206,93,4.67,94,6.417,95,1.59,96,5.385,97,6.58,98,4.394,99,4.67,100,4.67,101,3.331,102,3.565,103,5.385]],["title/modules/AppModule.html",[104,1.158,105,2.8]],["body/modules/AppModule.html",[1,2.858,3,0.134,4,0.121,5,0.107,7,2.105,23,0.015,25,0.254,36,0.441,37,1.101,40,0.453,41,1.653,42,1.967,46,1.967,50,0.134,51,0.038,76,1.303,79,0.009,80,0.009,91,3.888,92,1.893,98,4.096,99,2.758,104,1.608,105,5.614,106,1.362,107,1.303,108,1.495,109,1.495,110,1.362,111,2.559,112,1.495,113,2.758,114,2.758,115,2.758,116,4.096,117,4.725,118,4.096,119,4.384,120,4.096,121,4.384,122,3.634,123,2.172,124,1.495,125,1.495,126,3.18,127,3.604,128,3.604,129,2.987,130,3.18,131,4.008,132,4.659,133,4.008,134,3.18,135,4.622,136,3.18,137,2.271,138,1.362,139,3.18,140,2.758,141,2.105,142,2.271,143,3.18,144,3.18,145,3.18,146,3.18,147,4.008,148,4.622,149,2.105,150,3.301,151,3.18,152,2.479,153,3.18,154,3.18,155,2.479,156,4.622,157,4.622,158,3.18,159,4.008,160,2.758,161,3.18,162,2.858,163,3.18,164,3.18,165,3.18,166,2.758,167,3.18,168,3.18,169,3.18,170,3.18,171,3.18,172,3.18,173,2.758,174,3.18,175,2.758,176,3.18,177,2.758,178,3.18,179,3.18,180,3.18,181,1.653,182,3.18,183,1.745,184,3.18,185,3.18,186,3.18,187,3.18,188,3.18,189,3.18,190,3.18,191,2.758,192,2.758,193,3.603,194,4.008,195,2.271]],["title/injectables/AppService.html",[38,0.509,98,2.425]],["body/injectables/AppService.html",[3,0.234,4,0.21,5,0.187,9,0.388,10,1.447,20,0.653,23,0.015,31,1.151,36,0.309,38,0.869,40,0.789,50,0.234,51,0.081,75,1.198,79,0.012,80,0.012,88,1.692,94,6.479,98,4.14,100,6.238,102,4.431,196,1.771,197,4.805,198,5.542,199,3.739,200,5.542]],["title/controllers/AuthController.html",[90,1.538,127,2.595]],["body/controllers/AuthController.html",[3,0.188,4,0.169,5,0.15,9,0.311,10,1.26,11,1.708,13,1.478,15,1.421,20,0.687,22,1.363,23,0.015,24,1.163,25,0.465,26,0.907,31,1.211,36,0.41,40,0.633,50,0.188,51,0.054,53,1.366,67,1.313,75,1.26,79,0.011,80,0.011,90,1.744,92,1.821,95,1.721,127,3.857,199,2.31,201,3.855,202,2.943,203,3.378,204,2.764,205,4.927,206,4.161,207,4.446,208,4.267,209,5.827,210,4.446,211,3.465,212,4.546,213,4.446,214,4.446,215,2.089,216,2.749,217,3.855,218,3.465,219,3.465,220,2.584,221,3.465,222,4.02,223,3.855,224,3.465,225,2.749,226,3.855,227,3.465,228,3.855,229,4.446,230,2.943,231,4.446,232,3.465,233,3.465,234,3.855,235,4.446,236,4.446,237,4.446,238,4.446]],["title/guards/AuthGuardGuard.html",[0,2.595,150,2.8]],["body/guards/AuthGuardGuard.html",[0,4.189,1,4.386,2,4.758,3,0.153,4,0.137,5,0.121,7,2.387,9,0.252,10,1.093,11,1.534,12,5.529,13,2.297,15,1.616,20,0.596,22,1.182,23,0.015,24,1.009,25,0.404,26,0.787,27,3.941,28,4.189,30,2.387,31,0.749,32,2.071,36,0.385,38,0.657,39,3.347,40,0.514,44,2.575,45,2.387,49,3.127,50,0.153,51,0.044,52,1.874,53,2.122,57,2.297,63,1.78,64,1.152,67,1.065,73,1.78,75,1.093,76,2.071,79,0.009,80,0.009,85,1.024,102,2.387,149,2.387,150,3.611,152,4.551,155,2.811,225,4.121,239,5.062,240,2.811,241,5.056,242,4.384,243,5.056,244,3.606,245,7.093,246,3.606,247,3.606,248,3.127,249,3.127,250,2.811,251,5.056,252,3.606,253,3.606,254,3.606,255,3.606,256,3.606,257,3.606,258,3.606,259,3.606,260,2.811,261,3.347,262,3.606,263,5.056,264,3.606,265,3.606,266,3.606,267,3.606,268,3.606,269,3.606,270,3.606,271,3.606,272,4.384,273,3.606,274,3.606,275,3.606,276,3.606,277,3.606,278,3.606]],["title/modules/AuthModule.html",[104,1.158,116,2.425]],["body/modules/AuthModule.html",[1,2.341,3,0.16,4,0.144,5,0.128,7,2.505,23,0.015,36,0.438,40,0.539,41,1.967,42,2.341,46,2.341,47,2.951,50,0.16,51,0.063,59,2.077,79,0.01,80,0.01,92,2.142,104,1.769,106,1.621,107,1.551,108,1.779,109,1.779,110,1.621,111,2.816,112,2.816,116,4.854,120,3.234,123,2.458,124,1.779,125,1.779,127,3.966,129,2.077,131,3.282,147,3.282,149,2.505,155,2.951,166,3.282,191,3.282,192,3.282,193,2.951,194,3.282,222,4.741,223,3.282,279,3.282,280,3.282,281,3.282,282,4.019,283,3.847,284,4.076,285,4.337,286,4.337,287,3.785,288,3.966,289,2.869,290,3.734,291,3.785,292,3.785,293,3.785,294,3.282,295,3.785,296,3.785,297,3.461,298,3.785,299,3.785,300,3.785,301,3.785,302,2.951,303,3.785,304,3.282,305,3.282,306,3.282,307,3.785,308,3.785,309,3.785]],["title/injectables/AuthService.html",[38,0.509,222,2.425]],["body/injectables/AuthService.html",[3,0.178,4,0.159,5,0.142,9,0.294,10,1.213,11,1.661,13,2.102,15,1.794,20,0.745,22,1.478,23,0.015,24,1.262,25,0.505,26,0.983,31,1.166,36,0.403,37,2.189,38,0.729,40,0.598,50,0.178,51,0.051,53,1.942,67,1.241,75,1.213,79,0.01,80,0.01,196,1.343,199,2.183,204,2.72,205,4.009,206,4.009,208,4.348,211,4.376,212,4.348,215,1.975,222,3.471,224,3.275,227,3.275,230,2.781,285,4.568,286,4.641,289,2.305,294,3.643,297,2.781,310,3.643,311,2.781,312,3.471,313,4.201,314,5.613,315,4.201,316,4.201,317,2.781,318,3.643,319,3,320,0.873,321,2.598,322,4.201,323,4.201,324,4.201]],["title/injectables/BcryptProvider.html",[38,0.509,290,2.8]],["body/injectables/BcryptProvider.html",[3,0.193,4,0.174,5,0.154,9,0.32,10,1.283,11,1.946,20,0.7,22,1.388,23,0.015,24,1.185,25,0.474,26,0.923,31,1.233,32,2.857,36,0.367,38,0.771,40,0.651,50,0.193,51,0.055,52,2.377,57,1.974,67,1.946,75,1.283,79,0.011,80,0.011,88,1.953,181,2.377,196,1.461,204,2.785,282,3.257,290,4.239,325,3.965,326,5.147,327,5.147,328,5.147,329,6.048,330,4.573,331,5.147,332,5.714,333,4.573,334,3.965,335,3.565,336,5.147,337,4.573,338,4.573,339,3.565,340,5.936,341,4.573,342,4.573,343,3.565,344,4.573]],["title/modules/ChatModule.html",[104,1.158,117,2.595]],["body/modules/ChatModule.html",[3,0.209,4,0.187,5,0.166,23,0.015,36,0.421,40,0.703,50,0.209,51,0.06,79,0.012,80,0.012,92,2.555,104,2.018,106,2.116,107,2.024,108,2.322,109,2.322,110,2.116,111,3.212,112,3.212,117,5.08,123,2.931,124,2.322,125,2.322,129,2.71,137,3.528,138,2.116,320,1.296,345,4.283,346,4.283,347,4.283,348,4.639,349,4.94,350,4.523,351,2.214,352,4.283,353,4.94,354,3.851,355,3.851,356,4.94]],["title/entities/ChatRoom.html",[351,1.757,357,2.151]],["body/entities/ChatRoom.html",[3,0.167,4,0.15,5,0.133,9,0.276,20,0.857,23,0.015,24,1.374,25,0.612,36,0.342,50,0.167,51,0.048,76,2.206,79,0.01,80,0.01,85,1.529,88,1.361,89,2.102,95,2.147,320,1.559,351,2.413,357,2.167,358,2.82,359,3.424,360,6.125,361,2.403,362,5.311,363,5.311,364,4.055,365,4.668,366,5.311,367,3.949,368,4.775,369,3.949,370,4.668,371,3.845,372,4.197,373,3.949,374,3.949,375,6.579,376,3.949,377,3.949,378,4.775,379,3.949,380,4.916,381,3.424,382,4.068,383,2.798,384,2.167,385,3.949,386,3.949,387,5.384,388,4.668,389,4.197,390,3.949,391,4.055,392,4.668,393,3.424,394,4.668,395,5.384,396,1.549,397,2.442,398,3.079,399,3.949,400,3.949,401,3.949,402,3.079,403,3.949,404,3.949,405,3.949,406,3.949]],["title/controllers/ChatRoomController.html",[90,1.538,350,2.595]],["body/controllers/ChatRoomController.html",[3,0.067,4,0.06,5,0.054,9,0.111,10,0.58,11,0.912,20,0.617,22,1.151,23,0.015,24,0.983,25,0.393,26,0.766,31,1.344,34,3.758,36,0.292,40,0.227,43,0.986,50,0.067,51,0.019,53,0.49,57,0.892,64,0.857,67,0.471,75,1.132,79,0.005,80,0.005,81,0.787,86,0.625,87,0.926,88,0.403,89,2.26,90,1.362,92,0.653,95,1.546,101,0.986,202,1.055,215,0.749,216,1.659,218,1.242,219,1.242,220,1.559,233,1.242,261,1.775,320,1.499,348,2.018,350,1.775,354,1.242,361,2.963,383,1.394,407,1.242,408,3.587,409,4.34,410,2.001,411,2.326,412,3.011,413,1.598,414,2.518,415,2.326,416,3.174,417,3.011,418,3.043,419,1.594,420,4.618,421,3.739,422,2.091,423,3.939,424,4.119,425,3.174,426,4.543,427,4.766,428,4.766,429,1.594,430,1.594,431,2.326,432,4.313,433,3.638,434,1.382,435,3.043,436,5.269,437,3.739,438,1.775,439,2.367,440,1.594,441,1.594,442,1.915,443,1.914,444,3.638,445,2.695,446,2.234,447,3.531,448,1.382,449,1.471,450,2.091,451,1.594,452,1.594,453,3.174,454,1.382,455,1.471,456,1.242,457,1.594,458,3.638,459,1.594,460,1.594,461,3.4,462,1.382,463,2.018,464,2.298,465,2.326,466,2.091,467,1.594,468,1.594,469,1.594,470,2.091,471,2.326,472,1.306,473,1.594,474,3.531,475,2.682,476,1.594,477,1.594,478,2.326,479,1.382,480,3.537,481,1.594,482,1.594,483,2.091,484,1.055,485,3.617,486,1.382,487,4.285,488,0.874,489,1.915,490,1.055,491,0.986,492,3.638,493,4.466,494,0.714,495,1.382,496,1.382,497,1.382,498,1.055,499,1.242,500,1.382,501,1.382,502,3.465,503,4.41,504,3.465,505,1.914,506,1.382,507,2.326,508,2.518,509,2.326,510,1.382,511,1.382,512,1.242,513,1.382,514,1.382,515,1.382,516,3.011,517,1.382,518,1.382,519,1.382,520,1.382,521,1.382,522,1.382,523,1.382,524,1.382,525,2.326,526,1.382,527,1.382,528,1.382]],["title/injectables/ChatRoomService.html",[38,0.509,348,2.279]],["body/injectables/ChatRoomService.html",[3,0.059,4,0.053,5,0.047,9,0.098,10,0.521,11,1.793,13,1.247,15,0.77,20,0.612,22,1.151,23,0.015,24,1.037,25,0.415,26,0.903,31,1.238,32,2.549,36,0.303,38,0.313,40,0.2,50,0.059,51,0.017,57,1.931,63,2.866,64,2.056,67,1.714,75,0.995,79,0.004,80,0.004,89,2.278,95,1.454,102,2.093,138,0.601,196,0.449,199,1.252,320,1.472,348,1.4,351,2.523,352,1.217,361,2.911,362,3.25,363,1.217,364,4.037,380,1.003,396,0.551,397,0.868,398,1.095,408,3.561,409,4.019,410,1.793,413,1.655,414,2.318,415,2.088,416,3.288,418,2.452,420,4.721,421,3.516,422,2.922,423,3.25,424,3.945,425,1.877,432,4.286,433,3.047,434,2.088,435,2.675,438,1.594,439,2.179,442,1.72,443,1.132,444,2.481,445,1.594,446,1.321,448,1.217,449,2.057,450,1.877,453,1.877,454,2.088,455,2.314,456,1.877,458,1.594,461,3.686,462,2.088,463,2.452,464,2.481,466,3.288,470,2.922,479,2.088,480,3.212,483,1.877,485,3.271,488,0.77,489,1.72,490,0.929,491,0.868,492,3.438,493,3.592,494,0.629,499,1.095,502,3.259,503,3.438,504,3.945,505,1.762,529,1.217,530,2.408,531,1.877,532,1.877,533,2.408,534,2.408,535,1.404,536,2.559,537,1.956,538,1.404,539,2.408,540,2.408,541,1.404,542,2.093,543,4.603,544,1.404,545,1.877,546,2.922,547,1.404,548,1.217,549,1.404,550,2.408,551,1.404,552,1.003,553,3.749,554,2.408,555,1.404,556,1.404,557,1.095,558,1.095,559,1.404,560,0.816,561,1.217,562,0.868,563,2.408,564,1.404,565,3.749,566,3.162,567,1.404,568,1.404,569,2.408,570,1.404,571,1.404,572,0.77,573,1.404,574,1.404,575,1.404,576,1.217,577,1.404,578,2.408,579,2.088,580,1.404,581,1.404,582,1.404,583,1.404,584,3.749,585,1.404,586,2.088,587,1.404,588,2.408,589,2.408,590,1.404,591,1.404,592,1.404,593,1.404,594,1.404,595,1.404,596,3.749,597,3.162,598,2.408,599,1.404,600,1.404,601,2.088,602,1.404,603,2.408,604,1.404,605,2.408,606,2.088,607,1.404,608,1.217,609,3.162,610,1.404,611,1.404,612,2.408,613,1.404,614,2.088,615,3.162,616,1.404,617,1.404,618,2.408,619,2.408,620,1.404,621,1.404]],["title/modules/CloudinaryModule.html",[104,1.158,622,2.595]],["body/modules/CloudinaryModule.html",[3,0.225,4,0.202,5,0.179,23,0.015,36,0.364,40,0.758,50,0.225,51,0.064,79,0.012,80,0.012,104,2.088,106,2.281,107,2.182,108,2.503,109,2.503,110,2.281,111,3.323,112,3.323,123,3.071,124,2.503,125,2.503,622,5.163,623,4.618,624,4.618,625,4.618,626,4.685,627,3.293,628,5.325,629,5.325]],["title/injectables/CloudinaryService.html",[38,0.509,626,2.279]],["body/injectables/CloudinaryService.html",[3,0.205,4,0.184,5,0.208,9,0.339,10,1.333,11,1.781,15,2.166,20,0.727,22,1.135,23,0.015,24,0.969,25,0.387,26,0.755,31,1.008,32,2.526,36,0.378,38,0.801,40,0.691,50,0.205,51,0.059,64,1.551,73,3.044,75,1.049,79,0.012,80,0.012,196,1.551,626,3.584,627,4.191,630,4.207,631,6.166,632,4.852,633,6.166,634,5.283,635,4.852,636,4.852,637,4.84,638,4.852,639,4.207,640,4.207,641,4.852,642,4.207,643,4.852,644,4.207,645,4.852,646,4.852,647,4.852,648,4.852,649,4.852,650,4.852,651,4.852,652,3.465,653,4.852,654,4.852,655,4.852]],["title/classes/CreateChatRoomDto.html",[51,0.047,435,2.279]],["body/classes/CreateChatRoomDto.html",[3,0.191,4,0.171,5,0.152,9,0.315,20,0.772,23,0.015,24,1.437,25,0.635,26,0.915,36,0.365,50,0.191,51,0.087,76,1.847,79,0.011,80,0.011,85,1.67,88,1.753,89,2.092,95,1.933,351,3.308,380,4.674,382,3.637,398,3.515,408,3.11,410,1.185,413,2.307,435,3.418,443,2.764,656,1.769,657,6.015,658,3.515,659,6.545,660,3.804,661,4.509,662,4.509,663,4.509,664,4.509,665,4.584,666,3.909,667,4.509,668,3.22,669,4.584,670,4.509,671,3.418,672,5.881,673,1.847,674,2.62,675,4.509]],["title/injectables/CreateGoogleUserProvider.html",[38,0.509,676,2.425]],["body/injectables/CreateGoogleUserProvider.html",[3,0.19,4,0.17,5,0.151,9,0.314,10,1.267,11,1.716,13,1.492,15,1.874,20,0.691,22,1.371,23,0.015,24,1.171,25,0.553,26,0.912,31,0.932,36,0.401,37,1.554,38,0.761,40,0.639,50,0.19,51,0.079,53,1.378,57,1.492,63,2.215,64,1.874,65,2.462,67,1.325,72,2.462,73,2.215,75,0.97,79,0.011,80,0.011,138,1.922,196,1.434,204,2.456,215,2.109,320,1.357,396,1.76,397,2.775,410,1.179,413,2.562,536,3.598,537,4.039,560,2.608,562,2.775,676,3.626,677,3.891,678,5.084,679,2.97,680,4.487,681,5.084,682,4.583,683,4.487,684,6.229,685,4.487,686,4.487,687,4.487,688,4.487,689,4.487]],["title/classes/CreateMessageDto.html",[51,0.047,690,2.425]],["body/classes/CreateMessageDto.html",[3,0.163,4,0.146,5,0.243,9,0.27,20,0.805,23,0.015,25,0.588,26,1.097,36,0.295,50,0.163,51,0.064,79,0.01,80,0.01,85,1.504,88,1.782,89,1.692,95,2.016,361,2.077,408,2.373,410,1.013,432,2.905,443,2.488,446,2.905,472,2.892,505,2.488,542,4.003,545,4.127,656,1.512,660,3.784,668,2.752,671,3.784,673,1.579,690,3.274,691,6.114,692,3.004,693,3.781,694,6.472,695,4.319,696,5.036,697,4.467,698,5.294,699,3.854,700,4.65,701,5.646,702,6.511,703,3.572,704,3.854,705,3.781,706,3.854,707,3.854,708,3.854,709,4.591,710,4.591,711,3.004,712,3.854,713,4.591,714,3.342,715,3.854]],["title/classes/CreateUserDto.html",[51,0.047,716,2.151]],["body/classes/CreateUserDto.html",[3,0.1,4,0.09,5,0.08,9,0.166,11,0.622,20,0.754,23,0.015,24,1.115,25,0.591,26,1.046,36,0.33,50,0.1,51,0.062,52,1.231,57,0.788,62,1.691,75,0.984,76,1.865,79,0.007,80,0.007,85,1.051,86,2.191,88,1.945,89,1.645,95,1.89,181,3.712,261,2.449,320,1.23,343,1.846,351,2.503,371,2.642,382,1.465,391,2.449,396,0.929,410,1.197,443,1.739,446,1.299,449,2.03,472,1.391,494,1.062,572,3.997,656,0.929,660,3.44,665,1.846,666,2.053,668,1.691,669,2.884,671,3.246,673,0.97,674,1.376,693,2.642,703,2.03,716,2.498,717,5.127,718,1.691,719,4.353,720,4.463,721,3.014,722,2.498,723,3.014,724,4.57,725,4.821,726,3.208,727,2.368,728,2.368,729,3.208,730,4.728,731,2.368,732,2.368,733,2.884,734,4.988,735,2.368,736,3.208,737,2.368,738,2.368,739,2.368,740,2.449,741,2.368,742,2.368,743,3.208,744,2.992,745,3.208,746,2.884,747,2.368,748,2.368,749,2.642,750,3.55,751,4.463,752,5.132,753,5.548,754,4.463,755,4.463,756,2.368,757,3.208,758,3.208,759,3.208,760,3.208,761,3.208,762,3.208,763,3.948,764,2.368,765,3.208,766,3.208,767,3.208,768,2.053,769,2.368,770,2.368,771,2.884,772,2.642,773,2.053,774,3.208,775,3.208,776,3.208,777,3.948,778,3.208,779,4.697,780,1.846,781,3.208,782,1.846,783,2.053,784,1.846,785,2.053,786,2.053,787,2.151,788,1.691,789,2.053,790,2.053,791,1.691,792,2.053,793,3.208,794,1.846,795,2.053,796,2.053,797,2.053,798,2.053,799,2.053,800,3.208,801,2.053,802,2.053,803,2.053,804,1.568,805,3.948,806,2.053,807,2.884,808,2.053,809,2.449,810,2.053]],["title/injectables/CreateUserProvider.html",[38,0.509,811,2.425]],["body/injectables/CreateUserProvider.html",[3,0.138,4,0.124,5,0.11,9,0.229,10,1.02,11,1.454,13,1.569,15,1.508,20,0.556,22,1.103,23,0.015,24,0.942,25,0.377,26,0.734,31,0.981,32,2.481,34,2.743,36,0.384,37,1.916,38,0.613,40,0.466,50,0.138,51,0.04,53,1.005,57,1.569,63,2.732,64,2.052,65,3.323,67,1.394,72,2.589,73,2.99,75,0.708,79,0.009,80,0.009,86,1.284,138,1.402,181,1.701,183,3.036,196,1.046,199,2.452,204,2.081,282,3.945,289,1.796,320,1.517,321,2.024,357,2.589,364,3.124,384,1.796,396,1.284,410,1.592,439,2.743,442,3.37,443,2.218,444,3.124,485,1.902,488,1.796,491,2.024,494,1.467,505,2.218,536,3.148,537,3.423,558,3.679,560,1.902,562,2.024,576,4.092,579,2.838,679,2.166,693,3.37,716,3.783,811,2.918,812,4.798,813,2.838,814,3.679,815,3.679,816,3.273,817,3.679,818,3.273,819,4.092,820,4.719,821,4.719,822,4.722,823,2.024,824,2.337,825,3.273,826,2.551,827,4.719,828,3.273,829,2.551,830,3.273,831,3.273,832,5.534,833,3.273,834,4.719,835,4.092,836,4.719,837,4.719,838,4.719,839,3.679,840,4.719,841,4.719,842,4.719,843,4.719,844,3.273,845,2.337,846,4.719,847,3.273,848,3.273,849,4.092,850,3.273,851,3.273]],["title/injectables/DataResponseInterceptor.html",[38,0.509,195,2.8]],["body/injectables/DataResponseInterceptor.html",[3,0.216,4,0.193,5,0.172,9,0.357,10,1.375,20,0.601,22,1.192,23,0.015,24,1.018,25,0.407,26,0.793,28,4.805,30,3.374,31,1.059,36,0.355,38,0.826,40,0.726,44,4.951,45,3.374,50,0.216,51,0.062,52,2.649,75,1.102,79,0.012,80,0.012,195,4.542,196,1.629,505,2.989,652,3.641,852,5.515,853,5.515,854,4.42,855,6.361,856,6.361,857,5.404,858,7.26,859,5.098,860,6.361,861,5.098,862,5.098,863,5.098,864,5.098,865,5.098,866,5.098,867,5.098]],["title/classes/EditUserDto.html",[51,0.047,868,2.595]],["body/classes/EditUserDto.html",[3,0.216,4,0.193,5,0.172,9,0.357,20,0.601,23,0.015,25,0.407,26,0.989,36,0.387,50,0.216,51,0.077,79,0.012,80,0.012,85,1.807,89,2.033,95,1.506,260,3.974,361,2.72,410,1.34,413,2,484,4.21,498,4.21,505,2.989,656,2,660,2.963,673,2.088,703,3.49,716,2.797,718,3.641,772,3.641,824,3.641,868,4.21,869,5.515,870,4.21,871,4.958,872,5.515,873,5.404,874,6.361,875,6.361,876,6.361,877,4.42,878,5.098,879,4.958,880,4.42]],["title/injectables/FindOneByEmail.html",[38,0.509,881,2.425]],["body/injectables/FindOneByEmail.html",[3,0.177,4,0.159,5,0.141,9,0.293,10,1.212,11,1.659,13,1.394,15,1.34,20,0.661,22,1.311,23,0.015,24,1.119,25,0.448,26,0.872,31,0.871,32,2.296,36,0.376,37,1.941,38,0.728,39,2.775,40,0.597,50,0.177,51,0.085,63,2.767,64,1.791,65,2.3,67,1.238,72,2.3,73,2.767,75,0.906,79,0.01,80,0.01,86,2.943,88,1.596,138,1.795,183,2.3,196,1.34,204,2.374,320,1.578,384,2.3,396,1.645,410,1.473,455,3.698,536,3.757,537,3.466,560,2.436,572,4.05,679,2.775,822,3.268,823,2.593,839,3.268,845,2.994,881,4.169,882,4.922,883,3.635,884,4.192,885,5.605,886,4.192,887,4.86,888,4.003,889,4.192,890,3.268,891,4.192,892,3.268,893,4.192]],["title/injectables/FindOneByGoogleIdProvider.html",[38,0.509,894,2.425]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.196,4,0.176,5,0.156,9,0.325,10,1.295,11,1.744,13,1.543,15,1.915,20,0.706,22,1.401,23,0.015,24,1.196,25,0.56,26,0.932,31,0.964,36,0.391,37,1.607,38,0.778,40,0.661,50,0.196,51,0.08,67,1.37,75,1.003,79,0.011,80,0.011,88,1.835,138,1.987,196,1.483,204,2.495,215,2.181,320,0.964,396,1.82,455,3.287,536,3.645,537,4.104,560,2.697,562,2.87,572,3.984,679,3.071,722,4.08,823,2.87,882,5.173,888,4.279,890,3.617,894,3.705,895,4.023,896,5.195,897,4.64,898,5.195,899,4.64]],["title/injectables/GenerateTokensProvider.html",[38,0.509,283,2.151]],["body/injectables/GenerateTokensProvider.html",[3,0.155,4,0.139,5,0.123,9,0.256,10,1.103,11,1.823,13,1.956,15,1.631,17,5.661,18,4.584,19,4.545,20,0.693,22,1.488,23,0.015,24,1.174,25,0.508,26,0.915,31,1.06,36,0.397,37,1.266,38,0.663,40,0.52,41,1.899,42,2.26,46,3.156,50,0.155,51,0.044,53,1.806,54,2.61,57,1.215,59,2.8,66,3.699,67,1.507,75,1.103,79,0.01,80,0.01,82,2.8,86,1.434,87,2.124,89,2.217,196,1.168,204,2.608,205,4.199,215,2.399,230,3.892,248,3.169,283,2.8,289,2.005,311,2.419,312,3.413,317,2.419,319,2.61,320,1.441,321,2.26,397,2.26,420,3.645,552,2.61,900,4.962,901,2.849,902,5.103,903,5.103,904,3.169,905,5.103,906,3.655,907,5.103,908,6.365,909,4.962,910,3.655,911,3.169,912,3.655,913,2.849,914,3.655,915,2.849,916,3.169,917,3.169,918,3.169,919,3.169,920,3.169,921,5.88,922,3.655,923,3.645,924,5.103,925,5.103,926,3.169]],["title/classes/GetuserParamDto.html",[51,0.047,927,2.8]],["body/classes/GetuserParamDto.html",[3,0.216,4,0.194,5,0.172,9,0.358,20,0.603,23,0.015,25,0.597,26,1.13,36,0.387,50,0.216,51,0.091,79,0.012,80,0.012,85,1.81,89,2.389,95,1.51,361,2.851,410,1.343,494,2.291,656,2.005,671,2.971,673,2.094,674,2.971,725,3.985,730,3.383,779,3.65,804,4.217,879,4.967,927,4.55,928,4.432,929,6.371,930,5.112,931,5.112,932,5.112,933,5.112,934,5.112]],["title/controllers/GoogleAuthenticationController.html",[90,1.538,288,2.595]],["body/controllers/GoogleAuthenticationController.html",[3,0.206,4,0.185,5,0.164,9,0.341,10,1.337,13,1.622,15,1.558,20,0.575,22,1.14,23,0.015,24,0.974,25,0.389,26,0.759,31,1.013,36,0.411,37,1.689,40,0.694,50,0.206,51,0.059,53,1.498,75,1.054,79,0.012,80,0.012,90,1.913,92,1.998,95,1.44,202,3.228,203,2.534,204,2.555,216,3.016,220,3.948,225,3.016,226,4.229,228,4.229,232,3.802,284,4.152,288,4.094,302,3.802,935,4.822,936,4.229,937,4.877,938,6.186,939,5.363,940,4.877,941,4.729,942,4.877,943,6.186,944,4.229,945,4.229,946,4.229,947,4.877,948,4.877,949,4.877]],["title/injectables/GoogleAuthenticationService.html",[38,0.509,284,2.279]],["body/injectables/GoogleAuthenticationService.html",[3,0.138,4,0.124,5,0.11,9,0.229,10,1.02,11,1.454,13,2.225,15,1.508,19,4.326,20,0.714,22,1.103,23,0.015,24,0.942,25,0.442,26,0.734,31,0.981,36,0.384,37,2.097,38,0.613,39,2.166,40,0.466,41,1.701,46,2.918,47,2.551,50,0.138,51,0.04,52,1.701,53,1.7,54,2.337,55,2.838,57,2.225,59,3.67,63,1.616,64,1.508,65,1.796,66,2.743,67,1.634,72,1.796,73,2.732,75,1.02,79,0.009,80,0.009,85,1.34,86,2.171,87,1.902,183,1.796,196,1.046,203,2.452,204,2.081,215,1.538,283,3.872,284,2.743,289,1.796,297,2.166,311,2.166,312,3.317,317,2.166,320,1.39,321,2.024,413,1.284,455,1.796,705,2.337,721,3.663,722,3.323,723,3.663,744,3.52,845,2.337,849,2.838,870,2.166,900,2.551,923,3.37,939,4.798,941,4.25,945,2.838,946,2.838,950,5.568,951,2.838,952,5.534,953,6.689,954,5.534,955,4.719,956,4.719,957,3.273,958,3.273,959,3.273,960,5.534,961,2.838,962,3.273,963,3.273,964,4.719,965,3.273,966,3.273,967,3.273,968,3.273,969,4.719,970,2.838,971,3.273,972,3.273,973,3.273,974,3.273,975,4.719,976,2.838,977,3.273,978,3.273,979,3.273,980,3.273,981,3.273,982,3.273,983,3.273,984,3.273,985,2.838,986,3.273,987,3.273,988,3.273,989,3.273]],["title/modules/GoogleAuthticationModule.html",[104,1.158,990,2.8]],["body/modules/GoogleAuthticationModule.html",[3,0.225,4,0.202,5,0.179,23,0.015,36,0.394,40,0.758,50,0.225,51,0.064,79,0.012,80,0.012,92,2.677,104,2.088,106,2.281,107,2.182,108,2.503,109,2.503,110,2.281,111,3.323,112,2.503,123,3.071,124,2.503,125,2.503,284,4.476,288,4.68,302,4.151,304,4.618,744,3.095,935,4.151,944,4.618,990,5.499,991,4.618,992,5.325,993,5.325]],["title/interfaces/GoogleInterface.html",[81,1.935,682,2.595]],["body/interfaces/GoogleInterface.html",[3,0.231,4,0.207,5,0.184,9,0.382,23,0.015,25,0.594,50,0.231,79,0.012,80,0.012,81,2.697,83,3.616,85,1.885,86,2.917,88,2.044,682,4.393,721,4.922,722,4.08,723,4.922,994,4.736]],["title/classes/GoogleTokenDto.html",[51,0.047,941,2.595]],["body/classes/GoogleTokenDto.html",[3,0.243,4,0.218,5,0.193,9,0.402,20,0.677,23,0.015,25,0.459,36,0.32,50,0.243,51,0.083,59,4.007,79,0.013,80,0.013,85,1.942,88,1.729,95,1.696,656,2.252,673,2.352,703,4.007,941,4.527,995,5.93,996,4.978,997,5.741]],["title/injectables/HashingProvider.html",[38,0.509,282,2.151]],["body/injectables/HashingProvider.html",[3,0.21,4,0.188,5,0.167,9,0.347,10,1.353,20,0.738,22,1.463,23,0.015,24,1.249,25,0.5,26,0.973,31,1.3,32,2.946,36,0.277,38,0.812,40,0.707,50,0.21,51,0.06,79,0.012,80,0.012,88,1.982,181,2.581,196,1.587,206,3.546,282,3.433,306,6.662,326,5.425,327,5.425,328,5.425,329,5.94,331,5.425,332,5.94,334,4.305,335,3.871,998,4.305,999,4.966,1000,4.966,1001,6.257,1002,4.966,1003,4.966]],["title/modules/MailModule.html",[104,1.158,1004,2.595]],["body/modules/MailModule.html",[3,0.18,4,0.162,5,0.144,23,0.015,36,0.429,37,1.478,40,0.608,41,2.217,50,0.18,51,0.052,64,1.364,76,1.748,79,0.011,80,0.011,104,1.881,106,1.827,107,1.748,108,2.005,109,2.005,110,1.827,111,2.994,112,2.994,123,2.666,124,2.005,125,2.005,129,2.341,132,4.421,140,3.7,141,3.754,142,3.047,175,3.7,177,3.7,203,2.217,320,0.887,383,2.217,505,2.005,787,3.296,835,3.7,1004,4.908,1005,3.7,1006,3.7,1007,3.7,1008,5.173,1009,4.267,1010,5.672,1011,3.7,1012,4.267,1013,5.524,1014,3.326,1015,4.267,1016,4.267,1017,5.672,1018,4.267,1019,5.672,1020,4.267,1021,4.267,1022,4.267,1023,4.267,1024,4.267,1025,4.267,1026,4.267,1027,4.267,1028,4.267,1029,4.267,1030,4.267,1031,4.267,1032,4.267,1033,4.267,1034,4.267,1035,4.267,1036,3.7]],["title/injectables/MailProvider.html",[38,0.509,1008,2.595]],["body/injectables/MailProvider.html",[3,0.19,4,0.171,5,0.152,9,0.315,10,1.269,11,1.718,13,1.496,15,1.876,20,0.692,22,1.373,23,0.015,24,1.384,25,0.469,26,0.913,30,2.977,31,0.935,32,1.843,36,0.386,37,1.558,38,0.762,40,0.64,50,0.19,51,0.087,53,1.382,67,1.328,79,0.011,80,0.011,86,2.565,141,2.977,142,3.212,196,1.437,199,2.338,204,2.458,320,1.532,397,2.782,410,1.182,814,4.577,887,5.091,888,4.193,926,5.091,1008,3.887,1013,3.9,1014,3.506,1037,3.9,1038,5.872,1039,6.538,1040,4.498,1041,6.931,1042,4.498,1043,4.498,1044,4.498,1045,6.931,1046,4.498,1047,4.498,1048,4.498,1049,4.498,1050,4.498,1051,4.498,1052,4.498,1053,3.9,1054,4.498,1055,4.498,1056,4.498]],["title/classes/MatchPasswordsConstraint.html",[51,0.047,788,2.8]],["body/classes/MatchPasswordsConstraint.html",[3,0.123,4,0.11,5,0.098,9,0.203,10,0.934,11,0.762,20,0.509,22,1.01,23,0.015,24,1.22,25,0.582,26,0.672,31,0.897,36,0.357,50,0.123,51,0.069,52,2.245,57,0.965,62,3.685,75,1.116,76,1.769,79,0.008,80,0.008,86,1.694,88,1.921,89,1.38,181,3.545,261,1.92,320,1.072,343,3.367,351,2.563,371,2.071,382,1.794,391,2.859,396,1.138,410,1.135,443,1.363,446,1.591,449,1.591,472,1.091,494,1.3,572,3.743,656,1.138,660,3.725,665,2.261,668,2.071,669,3.367,671,3.553,673,1.188,674,1.686,693,2.071,703,2.37,716,2.37,717,4.023,718,2.071,719,3.367,720,4.474,721,1.92,722,1.591,723,1.92,724,4.083,726,2.515,729,2.515,730,4.394,733,2.261,734,4.457,736,2.515,740,1.92,743,2.515,744,2.51,745,2.515,746,2.261,749,2.071,750,3.367,751,3.745,752,4.474,753,4.957,754,3.745,755,3.745,757,2.515,758,2.515,759,2.515,760,2.515,761,2.515,762,2.515,763,3.745,765,2.515,766,2.515,767,2.515,771,2.261,772,3.084,773,2.515,774,3.745,775,3.745,776,4.474,777,5.756,778,3.745,779,4.978,780,2.261,781,3.745,782,2.261,783,3.745,784,3.367,785,3.745,786,2.515,787,2.51,788,3.084,789,3.745,790,4.957,791,3.084,792,2.515,793,3.745,794,2.261,795,2.515,796,3.745,797,2.515,798,2.515,799,2.515,800,3.745,801,2.515,802,2.515,803,2.515,804,1.92,805,4.474,806,2.515,807,3.367,808,2.515,809,2.859,810,2.515,1057,4.319,1058,2.9,1059,2.9]],["title/entities/Message.html",[357,2.151,472,1.474]],["body/entities/Message.html",[3,0.139,4,0.125,5,0.217,9,0.23,20,0.814,23,0.015,25,0.602,26,0.945,36,0.339,50,0.139,51,0.04,76,2.487,79,0.009,80,0.009,85,1.345,88,1.694,95,2.04,320,1.469,351,3.227,355,2.564,357,3.331,358,2.349,361,2.177,365,4.107,366,4.812,368,4.326,378,4.733,381,4.812,382,3.755,383,2.462,384,1.805,388,5.265,389,4.733,391,4.019,394,4.812,396,1.291,408,2.722,410,0.864,432,3.331,439,2.753,472,2.895,695,3.964,696,5.047,697,4.576,700,3.383,705,3.383,709,4.107,710,4.107,713,4.107,714,2.853,804,3.135,1060,2.853,1061,4.107,1062,4.326,1063,6.434,1064,4.737,1065,4.737,1066,3.29,1067,4.737,1068,3.29,1069,4.737,1070,6.072,1071,3.29,1072,3.692,1073,3.29,1074,4.737,1075,3.29,1076,3.29,1077,3.29,1078,2.564,1079,3.29]],["title/controllers/MessageController.html",[90,1.538,1080,2.8]],["body/controllers/MessageController.html",[3,0.139,4,0.124,5,0.216,9,0.229,10,1.021,11,1.963,20,0.715,22,1.417,23,0.015,24,1.21,25,0.484,26,0.943,31,1.26,36,0.385,40,0.467,43,2.028,50,0.139,51,0.04,53,1.007,64,1.51,66,1.905,67,1.79,75,1.31,79,0.009,80,0.009,82,3.326,87,1.905,88,1.818,90,1.286,92,1.343,95,1.79,101,2.028,202,2.17,215,2.849,216,3.426,220,2.746,221,2.556,320,1.335,361,2.378,408,2.118,410,0.861,413,2.173,414,2.922,418,3.735,432,2.592,463,3.735,472,2.705,484,2.17,485,1.905,488,1.799,490,2.17,542,3.127,552,2.341,634,4.318,690,4.266,697,2.922,870,2.17,985,4.097,1062,3.683,1080,3.374,1081,2.843,1082,4.725,1083,3.279,1084,3.279,1085,3.279,1086,5.539,1087,2.843,1088,4.725,1089,3.279,1090,5.256,1091,2.843,1092,4.725,1093,3.279,1094,3.683,1095,2.843,1096,4.674,1097,4.725,1098,3.279,1099,4.725,1100,3.22,1101,2.843,1102,2.556,1103,3.374,1104,2.843,1105,3.683,1106,3.279,1107,2.843,1108,3.279,1109,3.279,1110,3.279,1111,3.279,1112,3.279,1113,3.279,1114,3.279,1115,3.279,1116,3.279,1117,3.279,1118,3.279,1119,3.279,1120,3.279,1121,3.279]],["title/modules/MessageModule.html",[104,1.158,118,2.425]],["body/modules/MessageModule.html",[3,0.192,4,0.172,5,0.153,23,0.015,36,0.43,40,0.647,50,0.192,51,0.055,79,0.011,80,0.011,92,2.42,104,1.94,106,1.945,107,1.86,108,2.134,109,2.134,110,1.945,111,3.087,112,3.087,118,4.849,123,2.777,124,2.134,125,2.134,129,3.242,137,3.243,138,1.945,320,1.228,351,2.649,355,3.54,472,1.707,622,4.893,626,4.297,627,3.654,782,3.54,1080,4.69,1100,4.585,1101,3.937,1122,3.937,1123,4.541,1124,3.937,1125,3.937,1126,4.541,1127,3.937,1128,4.541,1129,3.937,1130,4.541,1131,4.541]],["title/injectables/MessageService.html",[38,0.509,1100,2.279]],["body/injectables/MessageService.html",[3,0.105,4,0.094,5,0.219,9,0.173,10,0.827,11,1.849,13,1.752,15,1.223,20,0.672,22,1.332,23,0.015,24,1.138,25,0.455,26,0.886,31,1.095,32,2.659,36,0.386,37,1.824,38,0.497,40,0.352,50,0.105,51,0.03,53,0.759,57,2.159,63,2.974,64,1.925,65,1.356,67,1.917,72,1.356,73,2.31,75,1.012,79,0.007,80,0.007,82,2.89,88,1.721,102,2.532,138,1.059,196,0.79,199,1.285,320,1.095,351,2.817,361,2.067,384,1.356,396,0.97,397,1.529,408,1.108,413,2.364,414,2.366,418,3.502,432,2.099,446,1.356,455,2.89,461,3.258,463,3.062,472,2.646,488,1.356,490,1.637,536,3.538,542,3.098,552,1.766,557,1.927,558,1.927,560,1.437,561,2.144,562,1.529,586,2.144,608,3.317,626,3.652,627,1.529,634,3.648,637,1.766,652,2.732,690,3.886,695,3.342,697,3.258,794,1.927,1062,4.441,1078,1.927,1087,3.317,1090,4.568,1091,3.317,1094,2.982,1095,2.144,1096,4.297,1100,2.224,1102,1.927,1103,1.766,1104,2.144,1105,2.982,1127,2.144,1129,2.144,1132,2.144,1133,2.472,1134,5.268,1135,5.268,1136,2.472,1137,3.826,1138,2.472,1139,2.472,1140,2.472,1141,2.472,1142,2.472,1143,3.826,1144,2.472,1145,2.472,1146,2.472,1147,2.472,1148,2.472,1149,2.472,1150,2.472,1151,2.472,1152,2.472,1153,2.472,1154,5.268,1155,2.472,1156,3.826,1157,2.472,1158,2.472,1159,2.472,1160,2.472,1161,2.472,1162,2.472,1163,2.472,1164,2.472,1165,2.472,1166,2.144,1167,3.317,1168,2.472,1169,4.058,1170,3.826,1171,2.472,1172,2.472,1173,1.927,1174,2.472,1175,2.472,1176,2.472,1177,2.144,1178,3.826,1179,2.472,1180,3.826,1181,2.472,1182,2.472,1183,2.472]],["title/classes/Paginated.html",[51,0.047,1184,2.425]],["body/classes/Paginated.html",[3,0.227,4,0.204,5,0.181,9,0.376,20,0.836,23,0.015,25,0.606,50,0.227,51,0.065,79,0.012,80,0.012,85,1.866,88,1.66,89,1.716,505,3.087,546,4.186,656,2.107,740,3.555,909,4.186,1184,4.062,1185,4.656,1186,6.153,1187,6.153,1188,5.37,1189,4.691,1190,5.37,1191,5.37,1192,5.37,1193,5.37,1194,4.656,1195,5.37,1196,5.37,1197,5.37,1198,5.37,1199,5.37]],["title/modules/PaginationModule.html",[104,1.158,119,2.595]],["body/modules/PaginationModule.html",[3,0.225,4,0.202,5,0.179,23,0.015,36,0.364,40,0.756,50,0.225,51,0.064,79,0.012,80,0.012,92,2.176,104,1.927,106,2.274,107,2.176,108,2.496,109,2.496,110,2.274,111,3.319,112,3.066,119,5.16,122,4.402,123,3.066,124,2.496,125,2.496,129,2.914,1200,4.605,1201,5.311,1202,4.605,1203,5.311,1204,5.311,1205,5.311,1206,5.311]],["title/injectables/PaginationProvider.html",[38,0.509,122,2.151]],["body/injectables/PaginationProvider.html",[3,0.143,4,0.129,5,0.114,9,0.237,10,1.046,11,1.483,13,1.127,15,1.546,20,0.57,22,1.319,23,0.015,24,0.966,25,0.451,26,0.753,31,0.704,32,1.982,34,4.049,36,0.377,37,1.174,38,0.628,40,0.483,43,2.096,50,0.143,51,0.041,53,1.041,57,2.446,64,1.803,67,1.429,75,0.733,79,0.009,80,0.009,89,1.546,122,2.655,149,2.243,196,1.083,204,2.122,220,2.812,396,1.33,413,1.33,505,1.593,508,4.025,536,3.621,546,2.642,652,4.03,700,4.395,740,2.243,749,2.42,857,2.642,909,2.642,1184,2.992,1186,2.939,1187,2.939,1194,4.893,1207,2.939,1208,5.643,1209,3.389,1210,3.389,1211,3.389,1212,4.186,1213,3.389,1214,2.642,1215,2.642,1216,3.389,1217,3.389,1218,3.389,1219,3.389,1220,4.839,1221,4.839,1222,3.389,1223,3.389,1224,2.642,1225,6.155,1226,7.124,1227,3.389,1228,2.939,1229,4.839,1230,3.389,1231,3.389,1232,6.509,1233,3.389,1234,3.389,1235,4.839,1236,4.839,1237,3.389,1238,2.939,1239,3.389,1240,3.389,1241,3.389,1242,3.389,1243,3.389,1244,4.839,1245,3.389,1246,3.389,1247,3.389,1248,3.389,1249,3.389,1250,3.389,1251,5.643,1252,3.389,1253,3.389,1254,3.389,1255,4.839,1256,3.389,1257,3.389,1258,3.389,1259,3.389,1260,3.389,1261,3.389,1262,3.389,1263,3.389]],["title/classes/PaginationQueryDto.html",[51,0.047,1212,2.425]],["body/classes/PaginationQueryDto.html",[3,0.22,4,0.197,5,0.175,9,0.363,20,0.759,23,0.015,25,0.514,26,1.137,36,0.29,50,0.22,51,0.078,79,0.012,80,0.012,85,1.828,89,2.335,95,1.901,339,5.017,383,3.345,508,3.98,656,2.038,671,4.064,673,2.128,809,4.26,1212,3.98,1224,5.451,1264,4.993,1265,4.505,1266,6.063,1267,6.436,1268,5.195,1269,5.195,1270,6.992]],["title/classes/RefreshTokenDto.html",[51,0.047,208,2.425]],["body/classes/RefreshTokenDto.html",[3,0.228,4,0.205,5,0.182,9,0.378,20,0.637,23,0.015,25,0.568,36,0.301,50,0.228,51,0.09,59,4.064,79,0.012,80,0.012,85,1.872,88,1.872,95,1.595,205,5.08,208,4.076,319,5.29,410,1.419,443,3.098,656,2.119,660,3.831,673,2.212,703,3.616,711,4.21,1271,4.683,1272,5.401]],["title/injectables/RefreshTokensProvider.html",[38,0.509,285,2.425]],["body/injectables/RefreshTokensProvider.html",[3,0.167,4,0.15,5,0.133,9,0.276,10,1.162,11,1.608,13,2.186,15,1.718,17,5.847,18,4.77,19,4.694,20,0.634,22,1.257,23,0.015,24,1.073,25,0.429,26,0.836,31,0.819,36,0.405,37,2.276,38,0.698,40,0.561,41,2.048,42,2.437,46,2.437,50,0.167,51,0.048,53,2.019,54,2.815,57,1.788,59,2.95,62,2.815,67,1.807,68,3.417,75,0.852,79,0.01,80,0.01,87,2.291,183,2.162,196,1.259,204,2.301,208,4.254,215,1.852,227,3.072,230,2.609,283,3.606,285,3.325,289,2.162,297,2.609,311,2.609,312,3.476,317,2.609,319,2.815,320,1.117,321,2.437,870,2.609,901,3.072,904,3.417,911,3.417,913,3.072,915,3.072,916,3.417,917,3.417,918,3.417,919,3.417,920,3.417,923,3.839,976,3.417,1273,5.306,1274,5.376,1275,5.699,1276,5.376,1277,3.941,1278,3.941,1279,3.941,1280,3.941,1281,3.417]],["title/interfaces/RequestWithUser.html",[81,1.935,437,2.8]],["body/interfaces/RequestWithUser.html",[3,0.094,4,0.084,5,0.075,9,0.155,11,0.581,23,0.015,25,0.348,26,0.545,31,1.252,34,3.741,36,0.336,40,0.315,43,1.368,50,0.094,51,0.027,53,0.679,57,1.166,64,0.707,67,0.653,75,1.303,79,0.007,80,0.007,81,1.092,83,1.464,85,0.996,86,0.868,87,1.286,88,0.559,89,1.997,90,1.376,101,1.368,216,2.169,218,1.724,219,1.724,220,2.038,233,1.724,261,1.464,320,1.507,348,2.532,350,1.464,354,1.724,361,2.954,383,1.822,407,1.724,408,3.534,409,4.106,410,1.888,411,1.918,412,1.918,413,0.868,414,1.368,416,1.724,417,1.918,418,2.532,420,4.709,422,1.724,424,3.806,425,2.733,427,4.298,428,4.298,431,1.918,432,4.263,433,3.281,435,2.881,436,5.224,437,3.54,438,1.464,439,2.038,442,1.58,443,1.648,444,3.281,445,2.321,446,1.924,447,3.04,449,1.214,450,1.724,453,2.733,455,1.214,458,3.281,461,3.556,463,2.038,464,2.321,465,1.918,466,1.724,470,1.724,471,1.918,472,1.319,474,3.04,478,1.918,480,3.342,483,1.724,484,1.464,485,3.978,486,1.918,487,4.872,488,1.214,489,2.504,490,1.464,491,1.368,492,4.137,493,4.799,494,0.992,495,1.918,496,1.918,497,1.918,498,2.321,499,1.724,500,1.918,501,1.918,502,3.988,503,4.757,504,3.988,505,2.33,506,1.918,507,3.04,508,3.066,509,3.04,510,1.918,511,1.918,512,1.724,513,1.918,514,1.918,515,1.918,516,3.777,517,1.918,518,1.918,519,1.918,520,1.918,521,1.918,522,1.918,523,1.918,524,1.918,525,3.04,526,1.918,527,1.918,528,1.918,1189,2.504]],["title/interfaces/ServerToClientEvents.html",[81,1.935,1282,3.056]],["body/interfaces/ServerToClientEvents.html",[3,0.245,4,0.22,5,0.195,9,0.405,23,0.015,25,0.463,36,0.323,50,0.245,66,4.408,79,0.013,80,0.013,81,2.86,83,3.835,85,1.953,472,2.852,1282,5.36,1283,4.137,1284,5.024,1285,5.024,1286,5.024]],["title/classes/SignInDto.html",[51,0.047,212,2.425]],["body/classes/SignInDto.html",[3,0.217,4,0.195,5,0.173,9,0.359,20,0.754,23,0.015,25,0.511,36,0.287,50,0.217,51,0.088,79,0.012,80,0.012,85,1.816,86,2.938,88,1.977,95,1.888,181,3.892,212,3.953,318,5.543,410,1.35,443,3.004,656,2.016,660,3.715,673,2.105,703,3.818,711,4.006,772,4.565,888,5.199,1287,4.456,1288,5.139,1289,5.139,1290,5.139]],["title/injectables/SignInProvider.html",[38,0.509,286,2.425]],["body/injectables/SignInProvider.html",[3,0.163,4,0.147,5,0.13,9,0.27,10,1.146,11,1.591,13,2.013,15,1.694,20,0.625,22,1.24,23,0.015,24,1.058,25,0.423,26,0.825,31,0.802,36,0.381,37,1.337,38,0.688,39,2.556,40,0.55,50,0.163,51,0.047,53,1.86,63,3.217,64,1.935,65,2.119,67,1.788,72,2.119,73,2.989,75,0.835,79,0.01,80,0.01,181,3.146,183,2.119,196,1.234,204,2.277,206,3.786,211,4.133,212,4.224,215,1.815,224,3.01,230,4.007,282,3.965,283,3.575,286,3.279,289,2.119,297,2.556,311,2.556,312,3.459,317,2.556,320,1.354,321,2.388,335,4.133,410,1.015,606,3.348,787,2.244,791,2.758,822,3.01,839,3.01,845,3.786,913,3.01,923,2.758,1275,5.651,1281,3.348,1291,5.25,1292,3.348,1293,3.862,1294,3.862,1295,3.862,1296,3.862,1297,3.862,1298,3.862,1299,5.302,1300,5.302,1301,3.862,1302,6.054,1303,3.862,1304,3.862,1305,3.862,1306,3.862,1307,3.862]],["title/classes/UpdateChatRoomDto.html",[51,0.047,480,2.425]],["body/classes/UpdateChatRoomDto.html",[3,0.246,4,0.221,5,0.196,23,0.015,36,0.384,50,0.246,51,0.07,79,0.013,80,0.013,260,4.53,408,3.088,413,2.28,435,3.378,480,4.26,489,4.15,498,4.559,656,2.28,658,4.53,873,4.53,880,5.039,1308,5.039,1309,6.888]],["title/classes/UpdateMessageDto.html",[51,0.047,1096,2.595]],["body/classes/UpdateMessageDto.html",[3,0.218,4,0.196,5,0.174,9,0.36,20,0.607,23,0.015,25,0.412,36,0.388,50,0.218,51,0.078,79,0.012,80,0.012,85,1.819,89,2.046,95,1.522,361,2.94,410,1.354,413,2.022,418,3.722,433,4.238,443,3.009,472,2.74,494,2.31,498,4.238,656,2.022,673,2.111,690,3.187,692,4.017,703,3.513,873,4.017,877,4.468,879,4.992,1096,4.238,1105,4.017,1310,5.552,1311,6.403,1312,5.153]],["title/entities/User.html",[320,0.815,357,2.151]],["body/entities/User.html",[3,0.1,4,0.089,5,0.079,9,0.165,20,0.774,23,0.015,24,1.275,25,0.555,26,1.044,36,0.344,50,0.1,51,0.055,76,2.616,79,0.007,80,0.007,85,1.046,86,2.421,88,1.697,89,1.177,95,1.939,181,3.206,320,1.629,351,2.766,357,2.815,358,1.681,361,2.575,368,2.87,370,4.828,371,4.216,372,3.999,378,4.978,382,3.444,383,1.914,384,2.02,389,2.87,391,2.437,392,3.193,393,3.193,396,0.923,408,2.3,409,3.664,410,1.955,449,2.815,472,2.32,494,1.055,508,2.277,601,2.041,671,2.636,673,0.964,674,1.368,705,3.664,719,3.536,721,3.002,722,2.488,723,3.002,724,4.795,725,2.87,730,4.227,740,3.396,744,3.711,746,2.87,749,3.664,750,2.87,768,2.041,771,3.999,779,4.795,780,1.835,787,3.711,804,4.227,807,2.87,872,4.448,1061,3.193,1072,3.999,1078,1.835,1094,4.81,1286,2.041,1313,2.041,1314,5.537,1315,2.354,1316,2.354,1317,2.354,1318,5.904,1319,3.682,1320,5.13,1321,4.536,1322,2.354,1323,3.682,1324,2.354,1325,2.354,1326,3.682,1327,2.354,1328,3.682,1329,2.354,1330,2.354,1331,3.682,1332,2.354,1333,2.354,1334,3.682,1335,2.354,1336,2.354,1337,2.354,1338,3.682,1339,3.682,1340,2.354,1341,2.354,1342,3.682,1343,3.682]],["title/controllers/UserController.html",[90,1.538,128,2.595]],["body/controllers/UserController.html",[3,0.091,4,0.081,5,0.072,9,0.15,10,0.738,20,0.627,22,1.391,23,0.015,24,1.271,25,0.598,26,0.827,31,1.356,32,1.399,36,0.364,40,0.305,50,0.091,51,0.026,53,0.657,64,1.555,75,1.149,76,1.993,79,0.006,80,0.006,89,2.086,90,0.84,92,0.877,95,1.57,101,1.324,128,3.221,202,1.417,203,1.112,204,2.657,216,1.324,217,1.856,220,1.985,221,1.668,225,1.324,232,1.668,234,1.856,249,1.856,312,2.003,320,1.655,361,2.871,364,4.088,402,2.663,410,1.959,413,1.909,418,1.985,421,3.797,424,4.088,433,3.221,438,2.261,439,2.828,446,2.669,449,3.109,458,3.751,461,3.288,463,3.294,464,2.261,472,1.284,484,2.261,485,3.294,487,3.323,488,1.174,491,1.324,492,3.751,493,4.215,494,0.959,502,3.519,503,4.088,504,3.519,505,2.287,512,1.668,532,2.663,545,2.663,716,3.389,733,2.663,787,2.828,815,2.663,817,1.668,823,1.324,824,2.439,826,1.668,868,4.088,871,3.793,892,3.793,1173,3.793,1184,3.288,1212,3.678,1214,2.663,1215,1.668,1224,2.663,1264,1.528,1266,2.962,1314,5.356,1344,1.856,1345,2.962,1346,2.962,1347,3.416,1348,3.416,1349,4.262,1350,3.416,1351,2.14,1352,2.14,1353,2.14,1354,1.856,1355,2.14,1356,4.262,1357,2.14,1358,2.14,1359,2.14,1360,2.14,1361,2.14,1362,3.416,1363,2.14,1364,2.14,1365,3.416,1366,2.14,1367,2.14,1368,2.14,1369,2.14,1370,2.14,1371,2.14,1372,2.14,1373,2.14,1374,2.14,1375,3.416,1376,4.866,1377,3.416,1378,4.262,1379,1.856,1380,1.856,1381,1.856,1382,2.14,1383,2.14,1384,2.14,1385,2.14,1386,2.14,1387,2.14,1388,2.14,1389,2.14,1390,2.14,1391,2.14,1392,2.14,1393,2.14]],["title/modules/UserModule.html",[104,1.158,120,2.425]],["body/modules/UserModule.html",[3,0.169,4,0.152,5,0.135,23,0.015,36,0.431,40,0.571,50,0.169,51,0.049,79,0.01,80,0.01,86,1.572,92,2.228,104,1.823,106,1.716,107,1.642,108,1.883,109,1.883,110,1.716,111,2.901,112,2.901,116,3.363,120,4.94,122,3.915,123,2.556,124,1.883,125,1.883,128,4.085,129,2.983,137,2.862,138,1.716,289,2.983,312,3.637,320,0.833,572,2.983,676,4.413,722,2.199,811,4.413,823,2.478,881,4.413,894,4.413,1004,4.723,1379,3.475,1394,3.475,1395,3.475,1396,3.475,1397,4.007,1398,4.007,1399,4.007,1400,4.007,1401,3.475,1402,5.437,1403,4.007,1404,4.007,1405,4.007,1406,3.475,1407,4.007]],["title/injectables/UserService.html",[38,0.509,312,1.843]],["body/injectables/UserService.html",[3,0.077,4,0.069,5,0.061,9,0.127,10,0.648,11,1.929,13,1.75,15,0.958,20,0.731,22,1.449,23,0.015,24,1.237,25,0.495,26,0.964,31,1.251,32,2.156,36,0.384,37,0.631,38,0.389,40,0.259,50,0.077,51,0.022,53,1.503,57,0.606,63,0.899,64,1.924,67,1.307,75,1.301,76,0.746,79,0.006,80,0.006,86,2.064,88,1.33,89,1.924,95,1.778,122,3.051,138,0.78,196,0.582,199,1.558,204,2.802,215,2.473,312,1.409,320,1.625,361,2.846,364,3.483,396,0.715,410,1.669,413,2.362,414,2.362,421,4.299,424,3.483,438,1.984,439,1.742,445,2.93,449,1.645,455,3.4,456,1.42,458,1.984,461,2.737,463,2.572,464,2.528,488,1,491,1.127,492,4.103,493,3.483,494,0.817,502,3.984,503,3.238,504,3.483,531,2.337,532,2.337,536,2.542,537,1.854,548,1.58,557,1.42,560,1.059,562,1.127,572,2.428,614,1.58,676,3.44,678,2.599,679,1.206,681,2.599,682,2.93,684,1.58,716,2.684,722,1.645,744,3.377,811,3.44,815,2.337,817,2.337,823,1.127,824,2.141,826,1.42,868,3.238,871,3.814,881,3.44,890,2.977,892,3.45,894,3.44,896,2.599,898,2.599,927,1.301,1173,2.337,1184,2.362,1212,3.44,1214,1.42,1215,1.42,1264,1.301,1345,2.599,1346,2.599,1354,2.599,1380,1.58,1381,1.58,1401,1.58,1406,1.58,1408,1.58,1409,2.998,1410,4.426,1411,2.998,1412,1.822,1413,1.822,1414,2.998,1415,1.822,1416,1.822,1417,2.998,1418,1.822,1419,1.822,1420,1.822,1421,2.998,1422,1.822,1423,1.822,1424,4.426,1425,1.822,1426,1.822,1427,2.998,1428,1.822,1429,1.822,1430,1.822,1431,1.822,1432,1.822,1433,1.822,1434,1.822,1435,1.822,1436,1.822,1437,1.822,1438,2.998,1439,1.822,1440,2.998,1441,1.822,1442,2.998,1443,1.822,1444,2.998,1445,1.822,1446,1.822,1447,1.822,1448,1.822]],["title/guards/WebSocketGuardGuard.html",[0,2.595,1449,3.056]],["body/guards/WebSocketGuardGuard.html",[2,3.04,3,0.18,4,0.162,5,0.143,9,0.298,10,1.224,12,5.505,20,0.668,22,1.324,23,0.015,24,1.131,25,0.452,26,0.881,27,3.319,28,4.49,30,3.748,31,1.177,32,2.32,36,0.378,38,0.735,40,0.606,44,4.544,45,2.818,50,0.18,51,0.052,52,2.213,57,2.349,59,2.336,66,3.291,75,1.376,76,1.744,79,0.011,80,0.011,203,2.213,240,3.319,242,5.518,508,3.502,787,2.474,791,4.044,915,3.319,970,3.692,1449,4.415,1450,5.518,1451,5.541,1452,5.518,1453,5.663,1454,4.257,1455,5.663,1456,4.257,1457,4.415,1458,4.257,1459,3.319,1460,4.257,1461,4.257,1462,4.257,1463,4.257,1464,4.257,1465,5.663,1466,4.257,1467,4.257,1468,4.257,1469,4.257,1470,4.257,1471,4.257,1472,4.257]],["title/modules/WebSocketModule.html",[104,1.158,121,2.595]],["body/modules/WebSocketModule.html",[3,0.214,4,0.192,5,0.171,23,0.015,36,0.386,40,0.722,50,0.214,51,0.077,79,0.012,80,0.012,104,2.203,106,2.172,107,2.077,108,2.383,109,2.383,110,2.172,111,2.383,112,3.251,118,4.705,121,5.109,123,2.979,124,2.383,125,2.383,129,3.478,159,5.497,160,4.397,162,4.774,410,1.332,1283,3.621,1451,4.527,1473,4.397,1474,4.397,1475,5.071,1476,5.071,1477,5.071,1478,5.071,1479,5.071,1480,4.397]],["title/classes/WebsocketGateway.html",[51,0.047,162,2.425]],["body/classes/WebsocketGateway.html",[3,0.128,4,0.115,5,0.178,9,0.211,10,0.962,11,1.851,15,0.965,20,0.733,22,1.363,23,0.015,24,1.164,25,0.551,26,0.907,31,1.098,36,0.347,50,0.128,51,0.037,52,2.313,53,0.927,57,1.004,64,1.422,66,3.909,67,0.892,76,1.237,79,0.008,80,0.008,82,2.441,85,1.264,88,1.125,89,0.965,95,1.314,101,1.867,162,3.606,183,1.657,272,3.858,320,1.098,361,1.746,384,1.657,402,5.07,408,1.995,410,1.532,432,2.441,444,2.945,445,2.945,472,2.732,485,3.389,531,3.469,542,2.945,656,1.185,695,2.156,696,3.178,697,3.606,700,3.178,829,3.469,1100,3.78,1102,2.354,1167,2.618,1169,3.858,1189,3.178,1283,4.644,1451,5.427,1457,6.02,1459,2.354,1480,5.056,1481,2.618,1482,4.45,1483,4.45,1484,4.45,1485,4.45,1486,5.284,1487,5.284,1488,5.984,1489,4.45,1490,4.45,1491,5.284,1492,3.019,1493,4.45,1494,5.284,1495,4.45,1496,3.019,1497,5.831,1498,4.45,1499,3.019,1500,4.45,1501,5.284,1502,3.019,1503,4.45,1504,3.019,1505,4.45,1506,4.45,1507,3.019,1508,2.618,1509,2.618,1510,3.019,1511,3.019,1512,4.45,1513,4.45,1514,3.019,1515,3.019,1516,3.019,1517,3.019,1518,3.019,1519,3.019,1520,3.019,1521,3.019,1522,3.019,1523,3.019]],["title/coverage.html",[1524,4.645]],["body/coverage.html",[0,3.32,1,1.711,5,0.093,6,2.398,7,1.831,8,2.398,23,0.015,25,0.333,38,0.991,48,2.156,51,0.089,64,0.884,79,0.008,80,0.008,81,2.756,82,1.517,84,2.398,90,2.47,91,1.975,93,2.398,98,1.711,110,1.185,122,1.517,127,1.831,128,1.831,150,1.975,152,2.156,162,1.711,195,1.975,197,2.398,201,2.398,203,1.437,208,1.711,212,1.711,222,1.711,239,2.398,240,3.249,250,2.156,282,1.517,283,1.517,284,1.608,285,1.711,286,1.711,288,1.831,290,1.975,310,2.398,312,1.3,320,0.575,325,2.398,348,1.608,350,1.831,351,1.24,357,2.752,359,2.398,372,5.626,407,3.249,408,1.869,435,1.608,437,1.975,472,1.04,480,1.711,529,2.398,572,2.287,626,1.608,627,2.578,630,2.398,657,2.398,658,3.249,676,1.711,677,2.398,682,1.831,690,1.711,691,2.398,692,3.249,716,1.517,717,3.249,718,3.582,788,1.975,811,1.711,812,2.398,813,2.398,852,2.398,853,2.398,854,2.398,868,1.831,869,2.398,881,1.711,882,3.249,883,2.398,894,1.711,895,2.398,900,2.156,901,3.249,927,1.975,928,2.398,935,2.156,936,2.398,941,1.831,950,2.398,951,2.398,994,2.398,995,2.398,996,2.398,998,2.398,1008,1.831,1037,2.398,1060,2.398,1072,2.156,1080,1.975,1081,2.398,1096,1.831,1100,1.608,1103,1.975,1132,2.398,1177,6.888,1184,1.711,1185,2.398,1207,2.398,1212,1.711,1264,1.975,1265,2.398,1271,2.398,1273,2.398,1282,2.156,1283,2.977,1284,2.398,1285,2.398,1287,2.398,1291,2.398,1292,2.398,1308,2.398,1310,2.398,1313,2.398,1344,2.398,1408,2.398,1449,2.156,1450,2.398,1451,2.977,1452,2.398,1481,2.398,1524,2.398,1525,2.398,1526,2.766,1527,5.016,1528,5.016,1529,7.012,1530,3.614,1531,6.296,1532,7.012,1533,2.398,1534,2.398,1535,5.016,1536,4.168,1537,5.584,1538,5.016,1539,3.249,1540,3.249,1541,2.398,1542,2.766,1543,2.156,1544,5.991,1545,2.766,1546,2.766,1547,2.766,1548,2.766,1549,2.766,1550,2.398,1551,2.398,1552,2.398,1553,5.016,1554,4.168,1555,2.398,1556,2.766,1557,4.168,1558,4.168,1559,2.766,1560,2.766,1561,2.766,1562,5.016,1563,5.016,1564,2.766,1565,2.766,1566,2.766,1567,2.766,1568,2.766,1569,2.766]],["title/dependencies.html",[107,1.932,1570,2.836]],["body/dependencies.html",[23,0.015,40,0.702,41,2.561,42,3.047,43,3.047,45,3.261,51,0.075,79,0.012,80,0.012,107,2.018,138,2.11,141,3.261,142,3.519,149,3.261,203,2.561,336,4.272,396,1.933,494,2.209,637,3.519,673,2.018,674,2.864,744,2.864,961,4.272,1014,3.841,1107,5.398,1459,4.853,1508,4.272,1571,4.927,1572,4.927,1573,4.927,1574,6.226,1575,4.927,1576,6.226,1577,6.826,1578,4.927,1579,4.927,1580,4.927,1581,4.927,1582,4.927,1583,4.927,1584,4.927,1585,4.927,1586,4.927,1587,4.927,1588,4.927,1589,4.927,1590,4.927,1591,4.927,1592,4.927,1593,4.927,1594,4.927,1595,4.927,1596,4.927,1597,4.927,1598,4.927,1599,4.927,1600,4.927,1601,4.927]],["title/miscellaneous/enumerations.html",[1602,1.795,1603,4.09]],["body/miscellaneous/enumerations.html",[5,0.219,9,0.37,13,2.166,23,0.015,25,0.52,79,0.012,80,0.012,225,4.028,320,1.353,380,4.651,694,5.647,696,4.651,697,4.028,724,4.651,809,5.248,1509,4.592,1602,2.905,1603,4.592,1604,5.296,1605,5.296,1606,5.296,1607,6.512,1608,5.296,1609,5.296,1610,5.296,1611,5.296,1612,5.296,1613,6.512,1614,6.512,1615,5.296,1616,6.512,1617,6.512]],["title/miscellaneous/functions.html",[1602,1.795,1618,4.09]],["body/miscellaneous/functions.html",[9,0.434,23,0.013,79,0.013,80,0.013,110,3.231,1555,5.383,1602,3.406,1618,5.383,1619,6.208]],["title/index.html",[9,0.229,1620,2.836,1621,2.836]],["body/index.html",[4,0.16,23,0.014,34,2.453,41,2.193,51,0.068,64,1.348,79,0.011,80,0.011,90,1.655,104,1.246,107,1.729,133,3.659,138,1.807,141,3.726,183,2.315,199,2.193,305,3.659,383,2.926,396,2.209,413,1.655,536,2.193,673,1.729,674,2.453,701,3.659,730,2.793,784,3.289,819,3.659,829,3.289,870,2.793,1011,3.659,1036,3.659,1053,4.881,1166,3.659,1228,3.659,1238,4.881,1488,3.659,1525,3.659,1620,3.659,1621,3.659,1622,7.041,1623,4.22,1624,4.22,1625,4.22,1626,4.22,1627,4.22,1628,4.22,1629,4.22,1630,7.243,1631,4.22,1632,5.63,1633,5.63,1634,4.22,1635,4.22,1636,4.22,1637,4.22,1638,6.335,1639,5.63,1640,4.22,1641,7.041,1642,4.22,1643,4.22,1644,4.22,1645,4.22,1646,4.22,1647,4.22,1648,4.22,1649,4.22,1650,4.22,1651,4.22,1652,4.22,1653,4.22,1654,4.22,1655,4.22,1656,4.22,1657,4.22,1658,4.22,1659,4.22,1660,4.22,1661,4.22,1662,4.22,1663,5.63,1664,4.22,1665,4.22,1666,4.22,1667,4.22,1668,5.63,1669,5.63,1670,4.22,1671,4.22,1672,4.22,1673,4.22,1674,4.22,1675,5.63,1676,6.335,1677,4.22,1678,4.22,1679,4.22,1680,4.22,1681,4.22,1682,4.22,1683,4.22,1684,5.63,1685,4.22,1686,4.22,1687,4.22,1688,4.22,1689,4.22,1690,5.63,1691,4.22,1692,4.22,1693,4.881,1694,4.22,1695,4.22,1696,4.22]],["title/modules.html",[106,2.294]],["body/modules.html",[23,0.012,79,0.012,80,0.012,105,3.89,106,2.333,116,3.369,117,3.605,118,3.369,119,3.605,120,3.369,121,3.605,622,3.605,990,3.89,1004,3.605,1697,8.012,1698,8.012,1699,8.012,1700,8.012]],["title/overview.html",[1701,4.645]],["body/overview.html",[2,2.362,23,0.015,79,0.009,80,0.009,83,2.189,92,1.355,98,3.442,104,0.977,105,5.602,106,1.416,107,1.355,108,1.554,109,1.554,110,1.416,111,1.554,112,1.554,113,2.867,114,2.867,115,2.867,116,4.737,117,4.578,118,4.581,119,4.443,120,4.813,121,4.443,122,3.955,123,2.234,124,1.554,125,1.554,162,3.764,196,1.057,222,4.277,279,2.867,280,2.867,281,2.867,282,3.339,283,3.054,284,3.537,285,3.442,286,3.442,312,3.251,339,2.578,345,2.867,346,2.867,347,2.867,348,4.02,358,2.362,622,4.443,623,2.867,624,2.867,625,2.867,626,4.113,656,1.297,676,3.442,811,3.442,881,3.442,894,3.442,990,4.346,991,2.867,1004,4.443,1005,2.867,1006,2.867,1007,2.867,1008,4.578,1100,4.02,1122,2.867,1124,2.867,1125,2.867,1200,2.867,1202,2.867,1394,2.867,1395,2.867,1396,2.867,1473,2.867,1474,2.867,1701,2.867,1702,3.307,1703,4.754,1704,3.307,1705,3.307,1706,3.307]],["title/properties.html",[85,1.34,1570,2.836]],["body/properties.html",[23,0.015,79,0.013,80,0.013,85,1.746,410,1.615,1693,5.331,1707,6.148,1708,6.148,1709,6.148,1710,6.148]],["title/miscellaneous/typealiases.html",[1602,1.795,1711,4.717]],["body/miscellaneous/typealiases.html",[9,0.429,23,0.013,25,0.567,79,0.013,80,0.013,1189,4.376,1539,4.777,1540,5.539,1543,5.539,1602,3.362,1712,6.128,1713,5.314]],["title/miscellaneous/variables.html",[1602,1.795,1714,4.09]],["body/miscellaneous/variables.html",[9,0.31,23,0.015,25,0.518,28,2.929,34,2.572,37,1.532,48,4.529,57,1.932,65,2.428,70,3.837,72,2.428,73,2.184,75,1.402,79,0.011,80,0.011,82,3.187,88,1.468,132,5.056,173,3.837,193,3.449,203,3.371,225,4.011,250,4.529,320,1.348,383,3.815,384,2.428,627,2.737,637,3.16,639,3.837,640,3.837,642,3.837,644,3.837,734,4.529,809,4.859,814,3.449,857,3.449,1103,4.149,1457,3.449,1530,3.837,1533,3.837,1534,3.837,1539,3.449,1540,4.529,1541,5.037,1543,3.449,1550,3.837,1551,5.037,1552,5.037,1602,2.428,1713,3.837,1714,3.837,1715,4.425,1716,4.425,1717,5.809,1718,4.425,1719,4.425,1720,4.425,1721,4.425,1722,4.425,1723,4.425,1724,4.425,1725,4.425,1726,4.425,1727,4.425,1728,4.425,1729,4.425]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1177,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1708,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1583,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1532,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1544,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1529,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":508,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"guards/WebSocketGuardGuard.html":{}}}],["1.1.23",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1528,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1563,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/PaginationQueryDto.html":{},"overview.html":{}}}],["10.0.0",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1577,"title":{},"body":{"dependencies.html":{}}}],["10/11",{"_index":1565,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":372,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{},"coverage.html":{}}}],["11.0.0",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":1705,"title":{},"body":{"overview.html":{}}}],["150",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["16.4.7",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1704,"title":{},"body":{"overview.html":{}}}],["1})@isint()@type(undefined",{"_index":930,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["2",{"_index":598,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["2.0.2",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["2.5.1",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":424,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["201",{"_index":438,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["225",{"_index":1326,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":1703,"title":{},"body":{"overview.html":{}}}],["3.1.10",{"_index":1587,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1546,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1562,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":1239,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["4",{"_index":1706,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1575,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":1560,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":427,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":465,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":458,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["5.0.2",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1581,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1559,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1567,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1702,"title":{},"body":{"overview.html":{}}}],["6.9.13",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1557,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1553,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1578,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1545,"title":{},"body":{"coverage.html":{}}}],["8.13.1",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1547,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1566,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["9!@#$%^&*]{8,16",{"_index":762,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["9.15.1",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1561,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1564,"title":{},"body":{"coverage.html":{}}}],["9])[a",{"_index":759,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["_",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["access",{"_index":248,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstoken",{"_index":921,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["activate",{"_index":271,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["active",{"_index":1086,"title":{},"body":{"controllers/MessageController.html":{}}}],["activeuser",{"_index":1103,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":82,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":1034,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":422,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["added",{"_index":425,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["address",{"_index":1320,"title":{},"body":{"entities/User.html":{}}}],["adds",{"_index":431,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["adduser",{"_index":412,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["adduser(id",{"_index":419,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["addusertochatroom",{"_index":533,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["addusertochatroom(chatroomid",{"_index":540,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["admin",{"_index":1616,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alias",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphabets",{"_index":767,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["already",{"_index":576,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["alt",{"_index":1685,"title":{},"body":{"index.html":{}}}],["always",{"_index":1669,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":801,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["aminu'})@isstring()@isoptional()@maxlength(100",{"_index":747,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["api_key",{"_index":642,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["api_secret",{"_index":644,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["apibody",{"_index":1378,"title":{},"body":{"controllers/UserController.html":{}}}],["apioperation",{"_index":492,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apioperation({summary",{"_index":421,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apiparam",{"_index":1377,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":779,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["apiproperty({enum",{"_index":768,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["apiproperty({example",{"_index":1318,"title":{},"body":{"entities/User.html":{}}}],["apiproperty({type",{"_index":725,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"entities/User.html":{}}}],["apiproperty({type:'number",{"_index":932,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["apiquery",{"_index":1376,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":493,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apitags",{"_index":491,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apitags('chatrooms",{"_index":499,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('users",{"_index":826,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["apiversrion:'0.0.1",{"_index":866,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["app.controller",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1656,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1652,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1657,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["app_interceptor",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appcontroller",{"_index":91,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":1070,"title":{},"body":{"entities/Message.html":{}}}],["application",{"_index":1638,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":105,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":98,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":790,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["args.object",{"_index":792,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":261,"title":{},"body":{"guards/AuthGuardGuard.html":{},"controllers/ChatRoomController.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"interfaces/RequestWithUser.html":{}}}],["array.isarray(authorisation",{"_index":1469,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["array.isarray(guard",{"_index":265,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["assert",{"_index":1018,"title":{},"body":{"modules/MailModule.html":{}}}],["associated",{"_index":729,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["attached",{"_index":1069,"title":{},"body":{"entities/Message.html":{}}}],["attachment",{"_index":702,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["audience",{"_index":917,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["audio",{"_index":694,"title":{},"body":{"classes/CreateMessageDto.html":{},"miscellaneous/enumerations.html":{}}}],["auth",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UserController.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtypes.none",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["auth.controller",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":497,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.controller",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/authconfig/jwt.config",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":937,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guard/access",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/auth",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":496,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/social/interfaces/user.interface",{"_index":686,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["auth_type_key",{"_index":250,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig/jwt.config",{"_index":911,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["authcontroller",{"_index":127,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":939,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":948,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":956,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(googltokendto",{"_index":940,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticated",{"_index":447,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["authentication",{"_index":938,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":304,"title":{},"body":{"modules/AuthModule.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.controller.ts",{"_index":936,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":942,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":302,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.service.ts",{"_index":951,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:11",{"_index":955,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:30",{"_index":958,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:36",{"_index":957,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authguardguard",{"_index":150,"title":{"guards/AuthGuardGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["authguardguard.defaultauthtype",{"_index":258,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authmodule",{"_index":116,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1710,"title":{},"body":{"properties.html":{}}}],["authorisation",{"_index":1467,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authorisation.split",{"_index":1471,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authorisation[0].split",{"_index":1470,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["authservice",{"_index":222,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtication.module.ts",{"_index":993,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["authtypeguardmap",{"_index":241,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtypes.bearer",{"_index":251,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.map((type",{"_index":262,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.none",{"_index":254,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authurisation",{"_index":1464,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["auto",{"_index":651,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["autogenerated",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["autoloadentities",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":401,"title":{},"body":{"entities/ChatRoom.html":{}}}],["await",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["badrequestexception",{"_index":558,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"injectables/MessageService.html":{}}}],["badrequestexception('cannot",{"_index":615,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('file",{"_index":1161,"title":{},"body":{"injectables/MessageService.html":{}}}],["badrequestexception('no",{"_index":1181,"title":{},"body":{"injectables/MessageService.html":{}}}],["badrequestexception('one",{"_index":595,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('private",{"_index":599,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('user",{"_index":844,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["base",{"_index":1245,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["baseurl",{"_index":1232,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":344,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(inppassword",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":290,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1610,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["before",{"_index":1166,"title":{},"body":{"injectables/MessageService.html":{},"index.html":{}}}],["belongs",{"_index":1067,"title":{},"body":{"entities/Message.html":{}}}],["bind",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{}}}],["blog",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":791,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["bootstrap",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1623,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1668,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1700,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1697,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1690,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":858,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["cascade",{"_index":389,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["catch((err",{"_index":276,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["cause",{"_index":840,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["cd",{"_index":1636,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1670,"title":{},"body":{"index.html":{}}}],["character",{"_index":763,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["character.'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":756,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chat",{"_index":408,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["chatmodule",{"_index":117,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatroom",{"_index":351,"title":{"entities/ChatRoom.html":{}},"body":{"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatroom.controller",{"_index":353,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.entity",{"_index":352,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{}}}],["chatroom.id",{"_index":1065,"title":{},"body":{"entities/Message.html":{}}}],["chatroom.name",{"_index":604,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.ownerid",{"_index":609,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.type",{"_index":596,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users",{"_index":601,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatroom.users)@jointable",{"_index":1316,"title":{},"body":{"entities/User.html":{}}}],["chatroom.users.filter(user",{"_index":620,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.length",{"_index":619,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.push(user",{"_index":616,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomcontroller",{"_index":350,"title":{"controllers/ChatRoomController.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["chatroomid",{"_index":542,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["chatroomrepository",{"_index":539,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms",{"_index":719,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["chatrooms/chatroom.entity",{"_index":1078,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["chatrooms/chatrooms.module",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["chatroomservice",{"_index":348,"title":{"injectables/ChatRoomService.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["chatroomsrepo",{"_index":1134,"title":{},"body":{"injectables/MessageService.html":{}}}],["chatroomtype",{"_index":380,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatroomtype.group",{"_index":400,"title":{},"body":{"entities/ChatRoom.html":{}}}],["chatroomtype.private",{"_index":597,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["check",{"_index":606,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/SignInProvider.html":{}}}],["checks",{"_index":553,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["class",{"_index":51,"title":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"classes/WebsocketGateway.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{}}}],["classes",{"_index":656,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"classes/WebsocketGateway.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["cleanup",{"_index":404,"title":{},"body":{"entities/ChatRoom.html":{}}}],["cli",{"_index":1625,"title":{},"body":{"index.html":{}}}],["client",{"_index":1457,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["client.handshake.headers",{"_index":1465,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["client.id",{"_index":1513,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["client_id",{"_index":962,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_secret",{"_index":964,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clients",{"_index":1522,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["clone",{"_index":1632,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":640,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["cloudinary",{"_index":637,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/MessageService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cloudinary.config",{"_index":639,"title":{},"body":{"injectables/CloudinaryService.html":{},"miscellaneous/variables.html":{}}}],["cloudinary.service",{"_index":629,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["cloudinary.uploader",{"_index":648,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinarymodule",{"_index":622,"title":{"modules/CloudinaryModule.html":{}},"body":{"modules/CloudinaryModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["cloudinaryprovider",{"_index":1552,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cloudinaryservice",{"_index":626,"title":{"injectables/CloudinaryService.html":{}},"body":{"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":345,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":346,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule",{"_index":623,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule_exports",{"_index":625,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_cloudinarymodule_providers",{"_index":624,"title":{},"body":{"modules/CloudinaryModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule",{"_index":991,"title":{},"body":{"modules/GoogleAuthticationModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule_providers",{"_index":992,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["cluster_mailmodule",{"_index":1005,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1006,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1007,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":1122,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":1124,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_imports",{"_index":1123,"title":{},"body":{"modules/MessageModule.html":{}}}],["cluster_messagemodule_providers",{"_index":1125,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1200,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1202,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1201,"title":{},"body":{"modules/PaginationModule.html":{}}}],["cluster_usermodule",{"_index":1394,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1395,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1397,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1396,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_websocketmodule",{"_index":1473,"title":{},"body":{"modules/WebSocketModule.html":{},"overview.html":{}}}],["cluster_websocketmodule_exports",{"_index":1474,"title":{},"body":{"modules/WebSocketModule.html":{},"overview.html":{}}}],["cluster_websocketmodule_imports",{"_index":1475,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["code",{"_index":1648,"title":{},"body":{"index.html":{}}}],["column",{"_index":391,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["column('varchar",{"_index":370,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["column({name",{"_index":377,"title":{},"body":{"entities/ChatRoom.html":{}}}],["column({type",{"_index":381,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["commands",{"_index":1689,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1676,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":1683,"title":{},"body":{"index.html":{}}}],["common/pagination.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/provider/pagination.provider",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":343,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["comparepasswords",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(password",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparison",{"_index":1003,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1571,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{}}}],["config",{"_index":1011,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["config.get('mail_host",{"_index":1025,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_port",{"_index":1027,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_password",{"_index":1030,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_username",{"_index":1028,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_api_key",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_api_secret",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('cloudinary_cloud_name",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database.autoload",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.blog",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":1660,"title":{},"body":{"index.html":{}}}],["configurations",{"_index":1655,"title":{},"body":{"index.html":{}}}],["confirm",{"_index":797,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["confirmation",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{}}}],["confirmpassword",{"_index":720,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["conflictexception",{"_index":685,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":689,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["connected",{"_index":1497,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["connecting",{"_index":839,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["connection",{"_index":829,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["conpare",{"_index":1301,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["console.error(\"google",{"_index":988,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.error('file",{"_index":1160,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log(\"google",{"_index":974,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"instance",{"_index":273,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(\"received",{"_index":968,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log('base",{"_index":1247,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log('before",{"_index":864,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('cloudinary",{"_index":1158,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('incoming",{"_index":1155,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('message",{"_index":1165,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('new",{"_index":1248,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log('received",{"_index":1514,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["console.log('saved",{"_index":1171,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log('show",{"_index":259,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(`client",{"_index":1512,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["console.log(baseurl",{"_index":1237,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(canactivate",{"_index":278,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["console.log(newurl",{"_index":1243,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(payload",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["console.log(sender",{"_index":1151,"title":{},"body":{"injectables/MessageService.html":{}}}],["console.log(user",{"_index":1114,"title":{},"body":{"controllers/MessageController.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["construct",{"_index":1244,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["constructor(@injectrepository(user",{"_index":889,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["constructor(chatroomrepository",{"_index":535,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(mailerservice",{"_index":1040,"title":{},"body":{"injectables/MailProvider.html":{}}}],["constructor(messageservice",{"_index":1492,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["constructor(messagesrepo",{"_index":1133,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(private",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["constructor(reflector",{"_index":244,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["constructor(request",{"_index":1209,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":679,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":765,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["containing",{"_index":444,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/WebsocketGateway.html":{}}}],["contains",{"_index":701,"title":{},"body":{"classes/CreateMessageDto.html":{},"index.html":{}}}],["content",{"_index":713,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["context.getclass",{"_index":257,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gethandler",{"_index":256,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gettype",{"_index":1461,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["context.switchtows().getclient",{"_index":1463,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["controller",{"_index":90,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":947,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('chat",{"_index":500,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('message",{"_index":1108,"title":{},"body":{"controllers/MessageController.html":{}}}],["controller('users",{"_index":1383,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["correctly",{"_index":1168,"title":{},"body":{"injectables/MessageService.html":{}}}],["cors",{"_index":1511,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["coverage",{"_index":1524,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":413,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":506,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["create(createchatroomdto",{"_index":434,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["create(createmessagedto",{"_index":1138,"title":{},"body":{"injectables/MessageService.html":{}}}],["create(user",{"_index":1083,"title":{},"body":{"controllers/MessageController.html":{}}}],["createchatroomdto",{"_index":435,"title":{"classes/CreateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["createchatroomdto.name",{"_index":582,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.type",{"_index":583,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.includes(currentuserid",{"_index":574,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.length",{"_index":567,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.map(id",{"_index":564,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["created",{"_index":439,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"entities/Message.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdat",{"_index":360,"title":{},"body":{"entities/ChatRoom.html":{}}}],["createdatecolumn",{"_index":366,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["creategoogleuser",{"_index":678,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":681,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":676,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createmessagedto",{"_index":690,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.chatroomid",{"_index":1147,"title":{},"body":{"injectables/MessageService.html":{}}}],["createmessagedto.text",{"_index":1164,"title":{},"body":{"injectables/MessageService.html":{}}}],["createparamdecorator",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":442,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"interfaces/RequestWithUser.html":{}}}],["createuserdto",{"_index":716,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":833,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":848,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto})@apiresponse({status",{"_index":1351,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserprovider",{"_index":811,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":815,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createusers(@body",{"_index":1388,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":817,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["creating",{"_index":693,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["creation",{"_index":820,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["ctx",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":546,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1257,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["currentpage:number",{"_index":1195,"title":{},"body":{"classes/Paginated.html":{}}}],["currentuser",{"_index":578,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["currentuserid",{"_index":543,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["custom",{"_index":783,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["data",{"_index":505,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"modules/MailModule.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["data.'})@apiresponse({status",{"_index":475,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["data.'})@post",{"_index":440,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["data.'})@post(':id/users/:userid",{"_index":429,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["data.length",{"_index":867,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["data:t",{"_index":1192,"title":{},"body":{"classes/Paginated.html":{}}}],["database",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["databaseconfig",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":195,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":365,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["db",{"_index":1296,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["declarations",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["decorator",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["decorators",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["decorators/auth.decorator",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["deeppartial",{"_index":1143,"title":{},"body":{"injectables/MessageService.html":{}}}],["default",{"_index":383,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"modules/MailModule.html":{},"entities/Message.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":243,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["defaultmessage",{"_index":1057,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["defaultmessage(args",{"_index":796,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["delete",{"_index":463,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":519,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["delete(':id/users/:userid",{"_index":527,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["delete(':messageid",{"_index":1088,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(@param('messageid",{"_index":1118,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(messageid",{"_index":1087,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["deleted",{"_index":464,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletes",{"_index":470,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["deleteuser",{"_index":1346,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":1390,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1354,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["denied",{"_index":518,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["denied.'})@apiresponse({status",{"_index":467,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["dependencies",{"_index":107,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1295,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["description",{"_index":410,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"classes/GetuserParamDto.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"properties.html":{}}}],["details",{"_index":445,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["development",{"_index":1640,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1032,"title":{},"body":{"modules/MailModule.html":{}}}],["directly",{"_index":1667,"title":{},"body":{"index.html":{}}}],["disconnected",{"_index":1501,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["disconnection",{"_index":1500,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["documentation",{"_index":1525,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1331,"title":{},"body":{"entities/User.html":{}}}],["doesnt",{"_index":1297,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["dotenv",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["double",{"_index":1678,"title":{},"body":{"index.html":{}}}],["dto",{"_index":443,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{}}}],["dtos/create",{"_index":488,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/getuserparamdto",{"_index":1429,"title":{},"body":{"injectables/UserService.html":{}}}],["dtos/google",{"_index":945,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1380,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/refreshtokendto",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/update",{"_index":490,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{}}}],["dtos/userdto",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["during",{"_index":1001,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["e.g",{"_index":709,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{}}}],["each",{"_index":665,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["edit",{"_index":871,"title":{},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["edit.email",{"_index":1444,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.firstname",{"_index":1438,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.lastname",{"_index":1440,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.password",{"_index":1442,"title":{},"body":{"injectables/UserService.html":{}}}],["editedpost",{"_index":1347,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(@body",{"_index":1392,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(edituserdto",{"_index":1360,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":1409,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser(edituserdto",{"_index":1417,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto",{"_index":868,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto.email",{"_index":1445,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.firstname",{"_index":1439,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.id",{"_index":1437,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.lastname",{"_index":1441,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.password",{"_index":1443,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto})@apiresponse({status",{"_index":1361,"title":{},"body":{"controllers/UserController.html":{}}}],["ejs",{"_index":1014,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":1019,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.ts",{"_index":883,"title":{},"body":{"injectables/FindOneByEmail.html":{},"coverage.html":{}}}],["email.ts:16",{"_index":886,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["email.ts:9",{"_index":884,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["emit",{"_index":1520,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["encrypassword",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end(file.buffer",{"_index":655,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["enforced",{"_index":1629,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":794,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{}}}],["entities",{"_index":358,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":357,"title":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}},"body":{"entities/ChatRoom.html":{},"injectables/CreateUserProvider.html":{},"entities/Message.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('chat_rooms",{"_index":399,"title":{},"body":{"entities/ChatRoom.html":{}}}],["entry",{"_index":1650,"title":{},"body":{"index.html":{}}}],["enum",{"_index":382,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["enum/message",{"_index":714,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{}}}],["enumerations",{"_index":1603,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtypes.enum",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/chatroomtype",{"_index":398,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{}}}],["enums/userrole.enum",{"_index":780,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["env.development",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":277,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["error",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["etc",{"_index":710,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{}}}],["everything",{"_index":875,"title":{},"body":{"classes/EditUserDto.html":{}}}],["exactly",{"_index":600,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["example",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"index.html":{}}}],["example:1",{"_index":933,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["exception",{"_index":987,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["exchanges",{"_index":1485,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["exclude",{"_index":1342,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":1338,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":845,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["existing",{"_index":1365,"title":{},"body":{"controllers/UserController.html":{}}}],["existinguser",{"_index":832,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":828,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expiresin",{"_index":908,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["exports",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":1206,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":634,"title":{},"body":{"injectables/CloudinaryService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["extends",{"_index":498,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{}}}],["extract",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["failed",{"_index":1162,"title":{},"body":{"injectables/MessageService.html":{}}}],["fails",{"_index":984,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["false",{"_index":787,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"guards/WebSocketGuardGuard.html":{}}}],["false})@column('varchar",{"_index":1325,"title":{},"body":{"entities/User.html":{}}}],["false})@exclude()@column('varchar",{"_index":1336,"title":{},"body":{"entities/User.html":{}}}],["false})@isoptional()@manytomany(undefined",{"_index":1315,"title":{},"body":{"entities/User.html":{}}}],["false})@isoptional()@onetomany(undefined",{"_index":1333,"title":{},"body":{"entities/User.html":{}}}],["family_name",{"_index":978,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fatima",{"_index":799,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatima'})@isstring()@isnotempty()@maxlength(100",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fatimaaminu@mail.com",{"_index":802,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatimaaminu@mail.com'})@isemail()@maxlength(150)@column({unique",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fetch",{"_index":892,"title":{},"body":{"injectables/FindOneByEmail.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["field",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":602,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["fileinterceptor",{"_index":1106,"title":{},"body":{"controllers/MessageController.html":{}}}],["fileurl",{"_index":695,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["finalresponse",{"_index":1255,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":455,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":414,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"injectables/UserService.html":{}}}],["findall(@param('chatroomid",{"_index":1116,"title":{},"body":{"controllers/MessageController.html":{}}}],["findall(chatroomid",{"_index":1091,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["findall(paginationquerydto",{"_index":1419,"title":{},"body":{"injectables/UserService.html":{}}}],["finding",{"_index":587,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["findone",{"_index":415,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findone(@param('id",{"_index":513,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["findone(id",{"_index":454,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findonebyemail",{"_index":881,"title":{"injectables/FindOneByEmail.html":{}},"body":{"injectables/FindOneByEmail.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemail(email",{"_index":885,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["findonebygoogleid",{"_index":896,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":898,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":894,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1410,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1424,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":550,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["fire",{"_index":270,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["first",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["firstname",{"_index":721,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["flat",{"_index":267,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["folder",{"_index":1654,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":559,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["forbiddenexception('you",{"_index":610,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["form",{"_index":1012,"title":{},"body":{"modules/MailModule.html":{}}}],["forwardref",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UserModule.html":{}}}],["found",{"_index":461,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["found'})@apiresponse({status",{"_index":548,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/UserService.html":{}}}],["found'})@delete",{"_index":1358,"title":{},"body":{"controllers/UserController.html":{}}}],["found'})@get(':id",{"_index":1368,"title":{},"body":{"controllers/UserController.html":{}}}],["found'})@patch",{"_index":1363,"title":{},"body":{"controllers/UserController.html":{}}}],["found.'})@apiresponse({status",{"_index":457,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["found.'})@delete(':id')@httpcode(httpstatus.ok",{"_index":468,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["found.'})@get(':id",{"_index":459,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["found.'})@patch(':id",{"_index":481,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["function",{"_index":1556,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1618,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateway",{"_index":1482,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["generate",{"_index":923,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1275,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":902,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":905,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":283,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1384,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':chatroomid",{"_index":1092,"title":{},"body":{"controllers/MessageController.html":{}}}],["get(':id",{"_index":512,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["gethello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":1411,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":1427,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1620,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserbyid",{"_index":1348,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(@param('id",{"_index":1386,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyid(id",{"_index":1366,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserparamdto",{"_index":927,"title":{"classes/GetuserParamDto.html":{}},"body":{"classes/GetuserParamDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getusers",{"_index":1349,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(paginationquerydto",{"_index":1370,"title":{},"body":{"controllers/UserController.html":{}}}],["git",{"_index":1634,"title":{},"body":{"index.html":{}}}],["give",{"_index":1240,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["given_name",{"_index":977,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":1010,"title":{},"body":{"modules/MailModule.html":{}}}],["google",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":288,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":284,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthticationmodule",{"_index":990,"title":{"modules/GoogleAuthticationModule.html":{}},"body":{"modules/GoogleAuthticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleid",{"_index":722,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["googleid.ts",{"_index":895,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["googleid.ts:17",{"_index":899,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleid.ts:7",{"_index":897,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleinterface",{"_index":682,"title":{"interfaces/GoogleInterface.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["googletokendto",{"_index":941,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":969,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":684,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["googleuserprovider",{"_index":1430,"title":{},"body":{"injectables/UserService.html":{}}}],["googltokendto",{"_index":943,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["grab",{"_index":1279,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["group",{"_index":1613,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["guard.guard.ts",{"_index":240,"title":{},"body":{"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:22",{"_index":1456,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["guard.guard.ts:24",{"_index":246,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:31",{"_index":247,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:8",{"_index":1454,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["guard/access",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard/auth",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard/web",{"_index":1452,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{},"overview.html":{}}}],["handle",{"_index":1153,"title":{},"body":{"injectables/MessageService.html":{}}}],["handleconnection",{"_index":1489,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handleconnection(client",{"_index":1495,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect",{"_index":1490,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handledisconnect(client",{"_index":1498,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage",{"_index":1491,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage(client",{"_index":1502,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handles",{"_index":402,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["handling",{"_index":531,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["hash",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashedpassword",{"_index":846,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashing",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":282,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(inppassword",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["having",{"_index":841,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["header",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":200,"title":{},"body":{"injectables/AppService.html":{}}}],["helpdesk",{"_index":1050,"title":{},"body":{"injectables/MailProvider.html":{}}}],["host",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hot",{"_index":1642,"title":{},"body":{"index.html":{}}}],["http",{"_index":1230,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["http://localhost:3000",{"_index":1056,"title":{},"body":{"injectables/MailProvider.html":{}}}],["http://localhost:3000/resource",{"_index":1229,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpcode",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["httpcode(httpstatus.ok",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["https://github.com/phertyameen/realtimechat.git",{"_index":1635,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["httpstatus.ok",{"_index":523,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["i.e",{"_index":1228,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["id",{"_index":361,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["id'})@apiparam({name",{"_index":1367,"title":{},"body":{"controllers/UserController.html":{}}}],["id'})@apiresponse({status",{"_index":456,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/UserService.html":{}}}],["id?:number",{"_index":934,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["identifier",{"_index":1072,"title":{},"body":{"entities/Message.html":{},"entities/User.html":{},"coverage.html":{}}}],["idtoken",{"_index":973,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":1614,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["implementation",{"_index":309,"title":{},"body":{"modules/AuthModule.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["imports",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{}}}],["in.provider",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1292,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":1293,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:32",{"_index":1294,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":751,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["included",{"_index":577,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["incoming",{"_index":1505,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["incorrect",{"_index":1300,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["initialusercount",{"_index":618,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["inject",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["inject(forwardref",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":1218,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["injectrepository",{"_index":560,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["injectrepository(chatroom",{"_index":561,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["injectrepository(message",{"_index":1145,"title":{},"body":{"injectables/MessageService.html":{}}}],["injectrepository(user",{"_index":562,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":1035,"title":{},"body":{"modules/MailModule.html":{}}}],["inppassword",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["install",{"_index":1633,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1631,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1658,"title":{},"body":{"index.html":{}}}],["instance",{"_index":272,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["instance.canactivate(context",{"_index":275,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instead",{"_index":1677,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1662,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":855,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":856,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":81,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["interface/activeinterface",{"_index":912,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces",{"_index":83,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"overview.html":{}}}],["interfaces/paginatedinterface",{"_index":1217,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["invalid",{"_index":428,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["isarray",{"_index":669,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isarray()@isnumber",{"_index":664,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["ischeckedpassword",{"_index":1302,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isemail",{"_index":772,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1288,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":668,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(chatroomtype",{"_index":675,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(chatroomtype)@isoptional",{"_index":662,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(messagetype",{"_index":715,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isenum(userrole",{"_index":808,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isglobal",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":879,"title":{},"body":{"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isint()@isnotempty",{"_index":877,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isnotempty",{"_index":703,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{}}}],["isnumber",{"_index":672,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isoptional",{"_index":671,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{}}}],["isoptional()@isenum(messagetype",{"_index":707,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isoptional()@ispositive",{"_index":1267,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":1270,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":660,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":711,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isoptional",{"_index":698,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["issue",{"_index":830,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["issuer",{"_index":919,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["issues",{"_index":843,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["isuuid",{"_index":670,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["items",{"_index":726,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["itemsperpage",{"_index":1256,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["itemsperpage:number",{"_index":1193,"title":{},"body":{"classes/Paginated.html":{}}}],["john",{"_index":1323,"title":{},"body":{"entities/User.html":{}}}],["johndoe@mail.com",{"_index":1319,"title":{},"body":{"entities/User.html":{}}}],["join",{"_index":1015,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":1033,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":395,"title":{},"body":{"entities/ChatRoom.html":{}}}],["jointable",{"_index":393,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["jsonwebtoken",{"_index":1460,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["jwt",{"_index":976,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtauthguard",{"_index":495,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfigurattion",{"_index":954,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["keyboard",{"_index":1681,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":749,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["last:string",{"_index":1197,"title":{},"body":{"classes/Paginated.html":{}}}],["lastname",{"_index":723,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["later",{"_index":838,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["legend",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["length",{"_index":371,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["letter",{"_index":753,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["library",{"_index":961,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1693,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1694,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1266,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["line",{"_index":1238,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["link",{"_index":1186,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":449,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":1189,"title":{},"body":{"classes/Paginated.html":{},"interfaces/RequestWithUser.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":1458,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["logger.log({authorisation",{"_index":1468,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["logger.log({authurisation",{"_index":1466,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["login",{"_index":1307,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":971,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":975,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":1055,"title":{},"body":{"injectables/MailProvider.html":{}}}],["loop",{"_index":268,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["lowercase",{"_index":754,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["lts",{"_index":1628,"title":{},"body":{"index.html":{}}}],["lts.1",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["mac",{"_index":1687,"title":{},"body":{"index.html":{}}}],["made",{"_index":405,"title":{},"body":{"entities/ChatRoom.html":{}}}],["mail",{"_index":1038,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailer",{"_index":1046,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailermodule",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1022,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1041,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailerservice:mailerservice",{"_index":1047,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailmodule",{"_index":1004,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprovider",{"_index":1008,"title":{"injectables/MailProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1647,"title":{},"body":{"index.html":{}}}],["main.ts",{"_index":1649,"title":{},"body":{"index.html":{}}}],["make",{"_index":570,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["makes",{"_index":874,"title":{},"body":{"classes/EditUserDto.html":{}}}],["management",{"_index":1661,"title":{},"body":{"index.html":{}}}],["managing",{"_index":411,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["manytomany",{"_index":392,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":386,"title":{},"body":{"entities/ChatRoom.html":{}}}],["manytoone",{"_index":394,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["manytoone(undefined",{"_index":1064,"title":{},"body":{"entities/Message.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":374,"title":{},"body":{"entities/ChatRoom.html":{}}}],["map",{"_index":861,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((type",{"_index":264,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["match",{"_index":798,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches",{"_index":774,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matching",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchpasswords",{"_index":786,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matchpasswordsconstraint",{"_index":788,"title":{"classes/MatchPasswordsConstraint.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["math.ceil(totalitems",{"_index":1252,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":773,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(100",{"_index":800,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(150",{"_index":803,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(225",{"_index":805,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["members",{"_index":575,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["merging",{"_index":1674,"title":{},"body":{"index.html":{}}}],["message",{"_index":472,"title":{"entities/Message.html":{}},"body":{"controllers/ChatRoomController.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["message.dto",{"_index":1105,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":692,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":704,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:14",{"_index":1312,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:19",{"_index":712,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:26",{"_index":699,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:33",{"_index":706,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:40",{"_index":708,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.entity",{"_index":1127,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["message.interface.ts",{"_index":1285,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["message.sender",{"_index":1334,"title":{},"body":{"entities/User.html":{}}}],["message.text",{"_index":1183,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagecontroller",{"_index":1080,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"coverage.html":{}}}],["messageid",{"_index":1090,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["messagemodule",{"_index":118,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["messagerepo",{"_index":1144,"title":{},"body":{"injectables/MessageService.html":{}}}],["messages",{"_index":1094,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["messages.controller",{"_index":1128,"title":{},"body":{"modules/MessageModule.html":{}}}],["messages/messages.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["messageservice",{"_index":1100,"title":{"injectables/MessageService.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"overview.html":{}}}],["messagesmodule",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["messagesrepo",{"_index":1137,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagetype",{"_index":696,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["messagetype.file",{"_index":1518,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["messagetype.text",{"_index":1079,"title":{},"body":{"entities/Message.html":{}}}],["meta",{"_index":1187,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["miscellaneous",{"_index":1602,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1696,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":1617,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":104,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"index.html":{},"overview.html":{}}}],["module,forwardref",{"_index":1204,"title":{},"body":{"modules/PaginationModule.html":{}}}],["modules",{"_index":106,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":1020,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":836,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":569,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["multer",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["multi",{"_index":1675,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["nest",{"_index":1624,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":860,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":880,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["nestjs/platform",{"_index":1107,"title":{},"body":{"controllers/MessageController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":494,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":1508,"title":{},"body":{"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["network",{"_index":842,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["new",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"index.html":{}}}],["newurl",{"_index":1235,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&${totalpage",{"_index":1259,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${nextpage",{"_index":1261,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${paginationquerydto.page",{"_index":1260,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${prevpage",{"_index":1263,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=1",{"_index":1258,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.tostring",{"_index":1249,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":849,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["next",{"_index":857,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["next(error",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["next.handle().pipe(map((data",{"_index":865,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next:string",{"_index":1199,"title":{},"body":{"classes/Paginated.html":{}}}],["nextpage",{"_index":1253,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1627,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1611,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["normalize",{"_index":266,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["notfoundexception",{"_index":557,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('chat",{"_index":1148,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('message",{"_index":1178,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('one",{"_index":568,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception('sender",{"_index":1152,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception(`chat",{"_index":589,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`user",{"_index":614,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/UserService.html":{}}}],["now",{"_index":509,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["npm",{"_index":1630,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":378,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["number",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["number(id",{"_index":565,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["number(userid",{"_index":613,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["numbers",{"_index":766,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["number})@apiquery({name",{"_index":1372,"title":{},"body":{"controllers/UserController.html":{}}}],["number})@apiresponse({status",{"_index":1356,"title":{},"body":{"controllers/UserController.html":{}}}],["oauth2client",{"_index":960,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(client_id",{"_index":967,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":952,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":446,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["object.password",{"_index":793,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["objectliteral",{"_index":1216,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{}}}],["occurs",{"_index":831,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["ondelete",{"_index":388,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["one",{"_index":572,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1343,"title":{},"body":{"entities/User.html":{}}}],["ongatewayconnection",{"_index":1486,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["ongatewaydisconnect",{"_index":1487,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["onmoduleinit",{"_index":953,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1671,"title":{},"body":{"index.html":{}}}],["operations",{"_index":532,"title":{},"body":{"injectables/ChatRoomService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["option",{"_index":1036,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["out",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["override",{"_index":1110,"title":{},"body":{"controllers/MessageController.html":{}}}],["overview",{"_index":1701,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":362,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["owner_id",{"_index":375,"title":{},"body":{"entities/ChatRoom.html":{}}}],["ownerid",{"_index":363,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["package",{"_index":1570,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1659,"title":{},"body":{"index.html":{}}}],["page",{"_index":1224,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["paginated",{"_index":1184,"title":{"classes/Paginated.html":{}},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":1208,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(paginationquerydto",{"_index":1211,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1214,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pagination'})@apiresponse({status",{"_index":1420,"title":{},"body":{"injectables/UserService.html":{}}}],["pagination/provider/pagination.provider",{"_index":1205,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":119,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":122,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":1212,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1225,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto.page",{"_index":1226,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["param",{"_index":485,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["param('id",{"_index":516,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["param('messageid",{"_index":1120,"title":{},"body":{"controllers/MessageController.html":{}}}],["param('userid",{"_index":525,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":888,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MailProvider.html":{},"classes/SignInDto.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["parseintpipe",{"_index":487,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["part",{"_index":872,"title":{},"body":{"classes/EditUserDto.html":{},"entities/User.html":{}}}],["partialtype",{"_index":873,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{}}}],["partialtype(createchatroomdto",{"_index":1309,"title":{},"body":{"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createmessagedto",{"_index":1311,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["partialtype(createuserdto",{"_index":876,"title":{},"body":{"classes/EditUserDto.html":{}}}],["participants",{"_index":573,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["pass",{"_index":1029,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password123",{"_index":750,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["password123'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["passwords",{"_index":785,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":484,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"controllers/MessageController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":515,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["patch(':messageid",{"_index":1097,"title":{},"body":{"controllers/MessageController.html":{}}}],["path",{"_index":1016,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"interfaces/ServerToClientEvents.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["payload.chatroomid",{"_index":1517,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["payload.text",{"_index":1516,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["payload.user",{"_index":1519,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["per",{"_index":1223,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["permission",{"_index":466,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions",{"_index":607,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["pg",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":862,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["please",{"_index":837,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["point",{"_index":1651,"title":{},"body":{"index.html":{}}}],["poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm",{"_index":810,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]'})@isstring()@isoptional()@maxlength(225",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["port",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{}}}],["post('/refreshtoken",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@auth(authtypes.none)@httpcode(httpstatus.ok)@useinterceptors(classserializerinterceptor",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/users/:userid",{"_index":524,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@useinterceptors(undefined",{"_index":1084,"title":{},"body":{"controllers/MessageController.html":{}}}],["postgres",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["prerequisites",{"_index":1626,"title":{},"body":{"index.html":{}}}],["present",{"_index":795,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["previous",{"_index":1262,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["previous:string",{"_index":1198,"title":{},"body":{"classes/Paginated.html":{}}}],["prevpage",{"_index":1254,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":368,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":835,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["process.env.cloudinary_api_key",{"_index":643,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":645,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":641,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["project",{"_index":1622,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{}}}],["promise((resolve",{"_index":646,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":922,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":274,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"properties.html":{}}}],["property",{"_index":1113,"title":{},"body":{"controllers/MessageController.html":{}}}],["provide",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":608,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["provider",{"_index":814,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/MailProvider.html":{},"miscellaneous/variables.html":{}}}],["provider.ts",{"_index":1551,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provider/cloudinary",{"_index":1550,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["provider/cloudinary.module",{"_index":1130,"title":{},"body":{"modules/MessageModule.html":{}}}],["provider/cloudinary.module.ts",{"_index":628,"title":{},"body":{"modules/CloudinaryModule.html":{}}}],["provider/cloudinary.service",{"_index":1129,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["provider/cloudinary.service.ts",{"_index":630,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["provider/cloudinary.service.ts:15",{"_index":635,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["provider/cloudinary.service.ts:6",{"_index":632,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["provider/create",{"_index":1400,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/find",{"_index":1402,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/googleuserprovider",{"_index":1404,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/message.service",{"_index":1101,"title":{},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{}}}],["provider/user.service",{"_index":1379,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/chatrooms/chatrooms.service",{"_index":354,"title":{},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["providers/generate",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":944,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["providers/hashing",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.provider",{"_index":1021,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/refresh",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers:[websocketgateway",{"_index":1479,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["public",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pull",{"_index":1672,"title":{},"body":{"index.html":{}}}],["push",{"_index":1666,"title":{},"body":{"index.html":{}}}],["query",{"_index":1375,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":1215,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["query.dto.ts",{"_index":1265,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1269,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":1268,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["real",{"_index":1483,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["realtimechat",{"_index":1053,"title":{},"body":{"injectables/MailProvider.html":{},"index.html":{}}}],["realtimechat.com",{"_index":1051,"title":{},"body":{"injectables/MailProvider.html":{}}}],["record",{"_index":252,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["reflect",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":245,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["refresh",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtoken",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtoken",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":208,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1278,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokenprovider",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1274,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1276,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":285,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["reject",{"_index":647,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":653,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["related",{"_index":1345,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":586,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["relationship",{"_index":403,"title":{},"body":{"entities/ChatRoom.html":{}}}],["reload",{"_index":1643,"title":{},"body":{"index.html":{}}}],["remove",{"_index":416,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["remove(@param('id",{"_index":520,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["remove(id",{"_index":462,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["removed",{"_index":474,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["removes",{"_index":478,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["removeuser",{"_index":417,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["removeuser(id",{"_index":473,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuserfromchatroom",{"_index":534,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removeuserfromchatroom(chatroomid",{"_index":554,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removing",{"_index":617,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["reply",{"_index":1031,"title":{},"body":{"modules/MailModule.html":{}}}],["repo",{"_index":913,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["repository",{"_index":536,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1250,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1219,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["representing",{"_index":1061,"title":{},"body":{"entities/Message.html":{},"entities/User.html":{}}}],["req",{"_index":436,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user?.sub",{"_index":507,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"interfaces/RequestWithUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":822,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception('could",{"_index":891,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["requesttimeoutexception(error",{"_index":1306,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["requesturl",{"_index":1227,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["requestwithuser",{"_index":437,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["required",{"_index":1314,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}],["resolve(result",{"_index":654,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resolving",{"_index":821,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["resource_type",{"_index":650,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["response.interceptor.ts",{"_index":854,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":859,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":853,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":530,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["result",{"_index":652,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{}}}],["result.affected",{"_index":1176,"title":{},"body":{"injectables/MessageService.html":{}}}],["results",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":450,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["retrieves",{"_index":453,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1421,"title":{},"body":{"injectables/UserService.html":{}}}],["returning",{"_index":1172,"title":{},"body":{"injectables/MessageService.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["review",{"_index":1673,"title":{},"body":{"index.html":{}}}],["role",{"_index":771,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["room",{"_index":432,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/WebsocketGateway.html":{}}}],["room'})@apiresponse({status",{"_index":423,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["room.'})@delete(':id/users/:userid",{"_index":476,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["room.dto",{"_index":489,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{}}}],["room.dto.ts",{"_index":658,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:10",{"_index":661,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:15",{"_index":663,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:21",{"_index":667,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["rooms",{"_index":409,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["rooms'})@apiresponse({status",{"_index":448,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["root",{"_index":1653,"title":{},"body":{"index.html":{}}}],["routes",{"_index":1082,"title":{},"body":{"controllers/MessageController.html":{}}}],["rules",{"_index":1665,"title":{},"body":{"index.html":{}}}],["run",{"_index":1641,"title":{},"body":{"index.html":{}}}],["running",{"_index":1637,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"guards/WebSocketGuardGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["saltrounds",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1167,"title":{},"body":{"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["saved",{"_index":1521,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["savedmessage",{"_index":1169,"title":{},"body":{"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["secret",{"_index":915,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["secure",{"_index":1026,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":985,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{}}}],["sender",{"_index":1062,"title":{},"body":{"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["senderid",{"_index":1111,"title":{},"body":{"controllers/MessageController.html":{}}}],["sending",{"_index":1506,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["sent",{"_index":705,"title":{},"body":{"classes/CreateMessageDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["serialization",{"_index":1339,"title":{},"body":{"entities/User.html":{}}}],["server",{"_index":1488,"title":{},"body":{"classes/WebsocketGateway.html":{},"index.html":{}}}],["servertoclientevents",{"_index":1282,"title":{"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["service",{"_index":199,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["setmetadata(auth_type_key",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shift",{"_index":1684,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":1682,"title":{},"body":{"index.html":{}}}],["show",{"_index":1222,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sign",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":1328,"title":{},"body":{"entities/User.html":{}}}],["signin",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":212,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1304,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signing",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["signinprovider",{"_index":286,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":903,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":907,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signup",{"_index":1002,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["single",{"_index":1173,"title":{},"body":{"injectables/MessageService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["skip",{"_index":1220,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slash",{"_index":1679,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":303,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":301,"title":{},"body":{"modules/AuthModule.html":{}}}],["socket",{"_index":1451,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket.io",{"_index":1459,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["socket.middleware.ts",{"_index":1540,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["socket.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["socket.module.ts",{"_index":1476,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["socket/interfaces/websockets",{"_index":1284,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["socket/web",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{}}}],["socket/websocketevents/websocket.gateway",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["socket/websocketevents/websocket.gateway.ts",{"_index":1481,"title":{},"body":{"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket/websocketevents/websocket.gateway.ts:22",{"_index":1493,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:29",{"_index":1496,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:37",{"_index":1499,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socket/websocketevents/websocket.gateway.ts:47",{"_index":1504,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["socketauthmiddleware",{"_index":1541,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["socketiomiddleware",{"_index":1543,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["special",{"_index":755,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["src",{"_index":1646,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constant.ts",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtypes.enum.ts",{"_index":1604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../chatroomtype.ts",{"_index":1605,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cloudinary",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1619,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../message",{"_index":1606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../userrole.enum.ts",{"_index":1608,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../web",{"_index":1713,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":197,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:8",{"_index":198,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:22",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1405,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/authconfig/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constant",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator",{"_index":1104,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1382,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1534,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refreshtokendto.ts",{"_index":1271,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refreshtokendto.ts:9",{"_index":1272,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dtos/userdto.ts",{"_index":1287,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/userdto.ts:13",{"_index":1290,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/userdto.ts:8",{"_index":1289,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtypes.enum",{"_index":249,"title":{},"body":{"guards/AuthGuardGuard.html":{},"controllers/UserController.html":{}}}],["src/auth/enums/authtypes.enum.ts",{"_index":1609,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guard/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth",{"_index":239,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["src/auth/guard/web",{"_index":1450,"title":{},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["src/auth/interface/activeinterface",{"_index":1102,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{}}}],["src/auth/interface/activeinterface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/middlewares/web",{"_index":1539,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:32",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.ts",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.ts:16",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.ts:8",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":900,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing",{"_index":825,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.ts",{"_index":998,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.ts:6",{"_index":1000,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.ts:9",{"_index":999,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1273,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1291,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":995,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":935,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["src/auth/social/interfaces/user.interface",{"_index":1431,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/social/interfaces/user.interface.ts",{"_index":994,"title":{},"body":{"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":950,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts",{"_index":407,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts:108",{"_index":469,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:127",{"_index":430,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:145",{"_index":477,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:49",{"_index":441,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:61",{"_index":452,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:74",{"_index":460,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:89",{"_index":482,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.entity",{"_index":782,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"modules/MessageModule.html":{}}}],["src/chatrooms/chatroom.entity.ts",{"_index":359,"title":{},"body":{"entities/ChatRoom.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.entity.ts:11",{"_index":373,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:18",{"_index":385,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:23",{"_index":390,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:27",{"_index":376,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:30",{"_index":379,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:33",{"_index":367,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:8",{"_index":369,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatrooms.module.ts",{"_index":349,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chatrooms/dtos/create",{"_index":657,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/dtos/update",{"_index":1308,"title":{},"body":{"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/enums/chatroomtype.ts",{"_index":1612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts",{"_index":529,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:107",{"_index":556,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:141",{"_index":551,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:167",{"_index":541,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:18",{"_index":538,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:194",{"_index":555,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:34",{"_index":544,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:70",{"_index":547,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:85",{"_index":549,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/cloudinary",{"_index":627,"title":{},"body":{"modules/CloudinaryModule.html":{},"injectables/CloudinaryService.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptor/data",{"_index":852,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination.module.ts",{"_index":1203,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/interfaces/paginatedinterface",{"_index":1381,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts",{"_index":1185,"title":{},"body":{"classes/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:11",{"_index":1190,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:4",{"_index":1188,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:5",{"_index":1191,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/pagination",{"_index":1264,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider",{"_index":1406,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/common/pagination/provider/pagination.provider.ts",{"_index":1207,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:15",{"_index":1213,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:9",{"_index":1210,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module",{"_index":1403,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":1009,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.provider.ts",{"_index":1037,"title":{},"body":{"injectables/MailProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mail.provider.ts:16",{"_index":1044,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/mail/providers/mail.provider.ts:8",{"_index":1042,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/main.ts",{"_index":1555,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/dtos/create",{"_index":691,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/messages/dtos/update",{"_index":1310,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/messages/enum/message",{"_index":1509,"title":{},"body":{"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["src/messages/message.entity",{"_index":1286,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"entities/User.html":{}}}],["src/messages/message.entity.ts",{"_index":1060,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/messages/message.entity.ts:21",{"_index":1071,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:27",{"_index":1066,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:33",{"_index":1075,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:39",{"_index":1073,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:45",{"_index":1076,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:51",{"_index":1068,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:57",{"_index":1077,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/messages.controller.ts",{"_index":1081,"title":{},"body":{"controllers/MessageController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:30",{"_index":1085,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:45",{"_index":1093,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:53",{"_index":1089,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:61",{"_index":1098,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.module",{"_index":1477,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["src/messages/messages.module.ts",{"_index":1126,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/messages/provider/message.service",{"_index":1510,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["src/messages/provider/message.service.ts",{"_index":1132,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/messages/provider/message.service.ts:103",{"_index":1140,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:113",{"_index":1142,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:18",{"_index":1136,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:43",{"_index":1139,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:93",{"_index":1141,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/users/dtos/create",{"_index":717,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts",{"_index":928,"title":{},"body":{"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts:14",{"_index":931,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["src/users/dtos/patch",{"_index":869,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1615,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/provider/create",{"_index":812,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/find",{"_index":882,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts",{"_index":677,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts:19",{"_index":683,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/googleuserprovider.ts:8",{"_index":680,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/user.service",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/provider/user.service.ts",{"_index":1408,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/provider/user.service.ts:100",{"_index":1416,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:109",{"_index":1418,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:126",{"_index":1423,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:134",{"_index":1413,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:23",{"_index":1412,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:47",{"_index":1422,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:62",{"_index":1425,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:75",{"_index":1415,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:83",{"_index":1426,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:91",{"_index":1428,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.controller.ts",{"_index":1344,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:101",{"_index":1364,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:42",{"_index":1374,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:58",{"_index":1369,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:73",{"_index":1353,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:87",{"_index":1359,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.entitly",{"_index":397,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{}}}],["src/users/user.entitly.ts",{"_index":1313,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entitly.ts:19",{"_index":1330,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:26",{"_index":1324,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:33",{"_index":1332,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:40",{"_index":1322,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:48",{"_index":1337,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:55",{"_index":1341,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:62",{"_index":1327,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:71",{"_index":1317,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:79",{"_index":1335,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.module",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/user.module.ts",{"_index":1398,"title":{},"body":{"modules/UserModule.html":{}}}],["src/web",{"_index":1283,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["start",{"_index":1639,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1644,"title":{},"body":{"index.html":{}}}],["started",{"_index":1621,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":1526,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":242,"title":{},"body":{"guards/AuthGuardGuard.html":{},"guards/WebSocketGuardGuard.html":{}}}],["status",{"_index":503,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["statuscode",{"_index":522,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["step",{"_index":983,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["strict",{"_index":1017,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"classes/RefreshTokenDto.html":{},"interfaces/RequestWithUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1645,"title":{},"body":{"index.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/ChatRoomController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{}}}],["subject",{"_index":1052,"title":{},"body":{"injectables/MailProvider.html":{}}}],["subscribemessage",{"_index":1507,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage('sendmessage",{"_index":1503,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["success",{"_index":471,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":504,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["successfully'})@apiresponse({status",{"_index":1357,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully.'})@apiresponse({status",{"_index":426,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["successfully.'})@get",{"_index":451,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["summary",{"_index":502,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["support",{"_index":1698,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":571,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["svg",{"_index":1699,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":819,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["t",{"_index":909,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1569,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1568,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1221,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["takes",{"_index":887,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/MailProvider.html":{}}}],["tap",{"_index":863,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":1013,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{}}}],["temporarily",{"_index":406,"title":{},"body":{"entities/ChatRoom.html":{}}}],["terminal",{"_index":1242,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1691,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1692,"title":{},"body":{"index.html":{}}}],["text",{"_index":697,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{}}}],["this.accesstokenguard",{"_index":253,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.appservice.gethello",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":263,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.chatroomrepository.create",{"_index":581,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.find",{"_index":585,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.findone",{"_index":588,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.remove(chatroom",{"_index":611,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.save(chatroom",{"_index":584,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomservice.addusertochatroom(id",{"_index":526,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.create(createchatroomdto",{"_index":510,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.findall",{"_index":511,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.findone(id",{"_index":514,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.remove(id",{"_index":521,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.removeuserfromchatroom(id",{"_index":528,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomservice.update(id",{"_index":517,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.chatroomsrepo.findone",{"_index":1146,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.cloudinaryservice.uploadfile(file",{"_index":1157,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1448,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createusers(createuserdto",{"_index":1434,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extractrequestfromheader(request",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findone(chatroomid",{"_index":612,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findone(id",{"_index":591,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findonebyemail.findonebyemail(email",{"_index":1435,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1447,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1281,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":982,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":980,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googltokendto",{"_index":949,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":1303,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":847,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.audience",{"_index":918,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":920,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":916,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.ttl",{"_index":925,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfigurattion.googleclient_id",{"_index":963,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfigurattion.googleclient_secret",{"_index":965,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":914,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":1049,"title":{},"body":{"injectables/MailProvider.html":{}}}],["this.messageservice.create",{"_index":1515,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.messageservice.create(createmessagedto",{"_index":1115,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.delete(messageid",{"_index":1119,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findall(chatroomid",{"_index":1117,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.update(messageid",{"_index":1121,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messagesrepo.create",{"_index":1163,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.delete(messageid",{"_index":1175,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.find",{"_index":1174,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.findone",{"_index":1179,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.save(message",{"_index":1170,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.oauthclient",{"_index":966,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":972,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatedquery",{"_index":1432,"title":{},"body":{"injectables/UserService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":255,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1234,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1233,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol}://${this.request.get('host",{"_index":1246,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.requestprotocol",{"_index":1231,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.server.emit('receivemessage",{"_index":1523,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["this.signinprovider.signin(signindto",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":924,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository",{"_index":1433,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create",{"_index":850,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":687,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.delete(id",{"_index":1436,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findbyids",{"_index":563,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findone",{"_index":579,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":890,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(edit",{"_index":1446,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":851,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":688,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userservice.creategoogleuser",{"_index":981,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createusers(createuserdto",{"_index":1389,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1391,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituser(edituserdto",{"_index":1393,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(paginationquerydto",{"_index":1385,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":979,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(id",{"_index":1387,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1280,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.getonebyemail(signindto.email",{"_index":1298,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersrepo.findone",{"_index":1149,"title":{},"body":{"injectables/MessageService.html":{}}}],["through",{"_index":269,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["throw",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["throws",{"_index":827,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["time",{"_index":1484,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["timestamp",{"_index":1063,"title":{},"body":{"entities/Message.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"guards/WebSocketGuardGuard.html":{}}}],["token.dto",{"_index":946,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["token.dto.ts",{"_index":996,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":997,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:24",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:47",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["tokens.provider",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":901,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:10",{"_index":904,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":910,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:34",{"_index":1277,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:45",{"_index":906,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":1194,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":1251,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpage:number",{"_index":1196,"title":{},"body":{"classes/Paginated.html":{}}}],["transfer",{"_index":545,"title":{},"body":{"injectables/ChatRoomService.html":{},"classes/CreateMessageDto.html":{},"controllers/UserController.html":{}}}],["transform",{"_index":781,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["transformation",{"_index":1664,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":674,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transport",{"_index":1024,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{}}}],["true})@type(undefined",{"_index":666,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1607,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"guards/WebSocketGuardGuard.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1711,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":396,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessageModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([chatroom",{"_index":356,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":1131,"title":{},"body":{"modules/MessageModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1407,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":260,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["types/bcrypt",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":1241,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["unable",{"_index":834,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorised",{"_index":986,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('email",{"_index":1299,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('failed",{"_index":989,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":893,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["unauthorizedexception(error",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["undefined",{"_index":384,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["undefined})@get('/:id",{"_index":1373,"title":{},"body":{"controllers/UserController.html":{}}}],["undefined})@isenum(userrole)@isoptional()@transform",{"_index":769,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":727,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["under",{"_index":1695,"title":{},"body":{"index.html":{}}}],["unique",{"_index":804,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["unknown",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1709,"title":{},"body":{"properties.html":{}}}],["up",{"_index":746,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["update",{"_index":418,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":479,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["update(messageid",{"_index":1095,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["updatechatroomdto",{"_index":480,"title":{"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["updatechatroomdto.name",{"_index":603,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.type",{"_index":605,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids",{"_index":592,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.length",{"_index":594,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.map(id",{"_index":593,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updated",{"_index":433,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateMessageDto.html":{},"controllers/UserController.html":{}}}],["updatemessagedto",{"_index":1096,"title":{"classes/UpdateMessageDto.html":{}},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto.text",{"_index":1180,"title":{},"body":{"injectables/MessageService.html":{}}}],["updates",{"_index":483,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"interfaces/RequestWithUser.html":{}}}],["updating",{"_index":590,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["upload",{"_index":1154,"title":{},"body":{"injectables/MessageService.html":{}}}],["upload_stream",{"_index":649,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadapiresponse",{"_index":638,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadedfile",{"_index":1099,"title":{},"body":{"controllers/MessageController.html":{}}}],["uploadfile",{"_index":631,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadfile(file",{"_index":633,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadresult",{"_index":1156,"title":{},"body":{"injectables/MessageService.html":{}}}],["uploadresult.secure_url",{"_index":1159,"title":{},"body":{"injectables/MessageService.html":{}}}],["uppercase",{"_index":752,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["uproper",{"_index":1680,"title":{},"body":{"index.html":{}}}],["url",{"_index":700,"title":{},"body":{"classes/CreateMessageDto.html":{},"entities/Message.html":{},"injectables/PaginationProvider.html":{},"classes/WebsocketGateway.html":{}}}],["url(this.request.url",{"_index":1236,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":305,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["useclass",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory:async(config:configservice",{"_index":1023,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":1688,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":486,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["useguards(jwtauthguard",{"_index":501,"title":{},"body":{"controllers/ChatRoomController.html":{},"interfaces/RequestWithUser.html":{}}}],["useinterceptors",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1109,"title":{},"body":{"controllers/MessageController.html":{}}}],["user",{"_index":320,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/RequestWithUser.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1112,"title":{},"body":{"controllers/MessageController.html":{}}}],["user'})@apibody({type",{"_index":1350,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apiquery({name",{"_index":1355,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apiresponse({status",{"_index":1414,"title":{},"body":{"injectables/UserService.html":{}}}],["user'})@column('varchar",{"_index":1321,"title":{},"body":{"entities/User.html":{}}}],["user'})@column({type",{"_index":1340,"title":{},"body":{"entities/User.html":{}}}],["user'})@primarygeneratedcolumn",{"_index":1329,"title":{},"body":{"entities/User.html":{}}}],["user.chatrooms",{"_index":387,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.controller",{"_index":1399,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":824,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":718,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["user.dto.ts:107",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:11",{"_index":878,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:119",{"_index":770,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:131",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:144",{"_index":728,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1059,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:33",{"_index":1058,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:52",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:64",{"_index":748,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:95",{"_index":764,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":926,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["user.entitly",{"_index":823,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.firstname",{"_index":1054,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user.id",{"_index":621,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["user.messages",{"_index":1074,"title":{},"body":{"entities/Message.html":{}}}],["user.password",{"_index":1305,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1401,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":813,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:20",{"_index":816,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:41",{"_index":818,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.sub",{"_index":1150,"title":{},"body":{"injectables/MessageService.html":{}}}],["user:user):promise",{"_index":1048,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user?.[field",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":128,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":420,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{},"interfaces/RequestWithUser.html":{}}}],["userids",{"_index":659,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["usermodule",{"_index":120,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["userparamdto",{"_index":929,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["userrepository",{"_index":537,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":724,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":807,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["users",{"_index":364,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users'})@apiquery({name",{"_index":1371,"title":{},"body":{"controllers/UserController.html":{}}}],["users.length",{"_index":566,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users.push(currentuser",{"_index":580,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users/user.controller",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["users/user.entitly",{"_index":355,"title":{},"body":{"modules/ChatModule.html":{},"entities/Message.html":{},"modules/MessageModule.html":{}}}],["users/user.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":312,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersrepo",{"_index":1135,"title":{},"body":{"injectables/MessageService.html":{}}}],["user})@apiresponse({status",{"_index":1362,"title":{},"body":{"controllers/UserController.html":{}}}],["user})@auth(authtypes.none)@useinterceptors(classserializerinterceptor)@post",{"_index":1352,"title":{},"body":{"controllers/UserController.html":{}}}],["using",{"_index":870,"title":{},"body":{"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["utilities",{"_index":1663,"title":{},"body":{"index.html":{}}}],["v2",{"_index":636,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["validate",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/RefreshTokensProvider.html":{}}}],["validate(confirmpassword",{"_index":789,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(matchpasswordsconstraint",{"_index":806,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatenested",{"_index":778,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatetoken",{"_index":1453,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["validatetoken(client",{"_index":1455,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["validation",{"_index":784,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["validationarguments",{"_index":777,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validator",{"_index":673,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateMessageDto.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":775,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":776,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["value",{"_index":809,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1182,"title":{},"body":{"injectables/MessageService.html":{}}}],["variable",{"_index":1531,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1714,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":970,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"guards/WebSocketGuardGuard.html":{}}}],["verify(token",{"_index":1472,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["version",{"_index":1707,"title":{},"body":{"properties.html":{}}}],["void",{"_index":959,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["web",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{}}}],["websocket",{"_index":1480,"title":{},"body":{"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["websocketevents/websocket.gateway",{"_index":1478,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["websocketgateway",{"_index":162,"title":{"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"overview.html":{}}}],["websocketguardguard",{"_index":1449,"title":{"guards/WebSocketGuardGuard.html":{}},"body":{"guards/WebSocketGuardGuard.html":{},"coverage.html":{}}}],["websocketguardguard.validatetoken(client",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["websocketmodule",{"_index":121,"title":{"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["websocketserver",{"_index":1494,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["welcome",{"_index":1045,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail",{"_index":1039,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail(user",{"_index":1043,"title":{},"body":{"injectables/MailProvider.html":{}}}],["windows/linux",{"_index":1686,"title":{},"body":{"index.html":{}}}],["ws",{"_index":1462,"title":{},"body":{"guards/WebSocketGuardGuard.html":{}}}],["yes",{"_index":552,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["z0",{"_index":761,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[0",{"_index":758,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[a",{"_index":757,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["za",{"_index":760,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["zoom",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/CloudinaryModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Inject,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { ConfigType } from '@nestjs/config';\n  import { JwtService } from '@nestjs/jwt';\n  import { Request } from 'express';\n  import { Observable } from 'rxjs';\n  import jwtConfig from 'src/auth/authConfig/jwt.config';\n  import { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AccessTokenGuard implements CanActivate {\n    constructor(\n      private readonly jwtService: JwtService,\n  \n      @Inject(jwtConfig.KEY)\n      private readonly jwtConfiguration: ConfigType,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      //Extract the request from the execution context\n      const request = context.switchToHttp().getRequest();\n      // Extract the token from the header\n      const token = this.extractRequestFromHeader(request);\n      // Validate the token\n      if (!token) {\n        throw new UnauthorizedException();\n      }\n      try {\n        const payload = await this.jwtService.verifyAsync(\n          token,\n          this.jwtConfiguration,\n        );\n  \n        request[REQUEST_USER_KEY] = payload;\n        console.log(payload);\n      } catch (error) {\n        throw new UnauthorizedException(error);\n      }\n      return true;\n    }\n  \n    private extractRequestFromHeader(request: Request) {\n      const [_, token] = request.headers.authorization?.split(' ') ?? [];\n      return token;\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/activeInterface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    sub: number,\n    email?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:13\n                        \n                    \n\n\n            \n                \n                        get decorator\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\n/**app controller class */\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  /**get decorator */\n  @Get()\n\n  /**get method */\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nAppModule -->\n\nPaginationProvider->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WebSocketModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './users/user.module';\n// import { MailerModule } from '@nestjs-modules/mailer';\nimport { PaginationModule } from './common/pagination.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './users/user.controller';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuardGuard } from './auth/guard/auth-guard/auth-guard.guard';\nimport { AccessTokenGuard } from './auth/guard/access-token/access-token.guard';\n// import { MessagesModule } from './messages/messages.module';\nimport { ChatModule } from './chatrooms/chatrooms.module';\nimport { MessageModule } from './messages/messages.module';\nimport { WebSocketModule } from './web-socket/web-socket.module';\nimport { WebsocketGateway } from './web-socket/websocketEvents/websocket.gateway';\nimport { PaginationProvider } from './common/pagination/Provider/pagination.provider';\nimport jwtConfig from './auth/authConfig/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        blog: configService.get('database.blog'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoload'),\n      }),\n    }),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    AuthModule,\n    UserModule,\n    PaginationModule,\n    ChatModule,\n    MessageModule,\n    // MessagesModule,\n    ChatModule,\n    WebSocketModule,\n  ],\n  controllers: [AppController, AuthController, UserController],\n  providers: [\n    AppService,\n    WebsocketGateway,\n    PaginationProvider,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuardGuard,\n    },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: DataResponseInterceptor\n    // },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:8\n                        \n                    \n\n\n            \n                \n                        App service method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\n/**App service class */\nexport class AppService {\n\n  /**App service method */\n  getHello(): string {\n    return 'Hello';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                RefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        RefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    RefreshToken(refreshToken: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Auth(authTypes.None)@HttpCode(HttpStatus.OK)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, HttpCode, HttpStatus, Post, UseInterceptors } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/userDto';\nimport { authTypes } from './enums/authTypes.enum';\nimport { RefreshTokenDto } from './dtos/refreshTokenDto';\nimport { Auth } from './decorators/auth.decorator';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        // injecting auth service\n        private readonly authservice: AuthService,\n    ) {}\n    @Post('/signIn')\n    @Auth(authTypes.None)\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(ClassSerializerInterceptor)\n    public async SignIn(@Body() signInDto: SignInDto) {\n       return await this.authservice.SignIn(signInDto)\n    }\n    @Post('/refreshToken')\n    public RefreshToken(@Body() refreshToken: RefreshTokenDto) {\n        return this.authservice.refreshToken(refreshToken)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardGuard.html":{"url":"guards/AuthGuardGuard.html","title":"guard - AuthGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { Reflector } from '@nestjs/core';\n  import { Observable } from 'rxjs';\n  import { AccessTokenGuard } from '../access-token/access-token.guard';\n  import { authTypes } from 'src/auth/enums/authTypes.enum';\n  import { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n  \n  @Injectable()\n  export class AuthGuardGuard implements CanActivate {\n  \n    private static readonly defaultAuthType = authTypes.Bearer;\n  \n    private readonly authTypeGuardMap: Record = {\n      [authTypes.Bearer]: this.accessTokenGuard,\n      [authTypes.None]: { canActivate: () => true },\n    };\n  \n    constructor(\n      private readonly reflector: Reflector,\n      private readonly accessTokenGuard: AccessTokenGuard,\n    ) {}\n  \n    async canActivate(context: ExecutionContext): Promise {\n      // get authTypes from the reflector\n      const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ])  ?? [AuthGuardGuard.defaultAuthType];\n      // console.log('show all types', authTypes);\n  \n      // get array of guards\n      const guards = authTypes.map((type) => this.authTypeGuardMap[type])\n      // const guards = authTypes\n      //   .map((type) => {\n      //     const guard = this.authTypeGuardMap[type];\n      //     return Array.isArray(guard) ? guard : [guard]; // Normalize to an array\n      //   })\n      //   .flat();\n  \n      // loop through the guard and fire the can activate method\n      for (const instance of guards) {\n        // console.log(\"instance of\", instance)\n        const canActivate = await Promise.resolve(\n          instance.canActivate(context),\n        ).catch((err) => {\n          error: err;\n        });\n        // console.log(canActivate)\n  \n        if (canActivate) {\n          return true;\n        }\n      }\n      throw new UnauthorizedException();\n    }\n  }\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt';\nimport { HashingProvider } from './providers/hashing';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './guard/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { UserModule } from 'src/users/user.module';\nimport { AuthController } from './auth.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // Use the abstract class as a token\n      useClass: BcryptProvider, // Bind it to the concrete implementation\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { UserService } from 'src/users/provider/user.service';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        /* \n         * injecting user service\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n         * inject signInProvider\n         */\n        private readonly signInProvider: SignInProvider,\n\n        /* \n         *inject refreshTokenProvider\n         */\n         private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n    public async SignIn(signInDto: SignInDto) {\n        return await this.signInProvider.SignIn(signInDto)\n    }\n\n    public refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }    \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    // hash\n    public async hashPassword(inpPassword: string | Buffer): Promise {\n        const saltRounds = 10\n        const salt = await bcrypt.genSalt(saltRounds)\n        \n        return await bcrypt.hash(inpPassword, salt) \n    }\n\n    // compare\n    public async comparePasswords(password: string, encryPassword: string): Promise {\n        return await bcrypt.compare(password, encryPassword)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nChatRoomService \n\nChatRoomService \n\n\n\nChatModule\n\nChatModule\n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chatrooms/chatrooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatRoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatRoom } from './chatroom.entity'; \nimport { ChatRoomController } from './chatroom.controller';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { User } from '../users/user.entitly'; \n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatRoom, User]),\n  ],\n  controllers: [ChatRoomController],\n  providers: [ChatRoomService],\n  exports: [ChatRoomService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatRoom.html":{"url":"entities/ChatRoom.html","title":"entity - ChatRoom","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                owner\n                            \n                            \n                                    \n                                ownerId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'owner_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ownerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'owner_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ChatRoomType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chatRooms, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, CreateDateColumn, JoinTable, ManyToOne, JoinColumn } from 'typeorm';\nimport { User } from 'src/users/user.entitly'; \nimport { ChatRoomType } from './enums/chatroomType';\n\n@Entity('chat_rooms')\nexport class ChatRoom {\n  @PrimaryGeneratedColumn() \n  id: number;\n\n  @Column('varchar', { length: 100 })\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: ChatRoomType,\n    default: ChatRoomType.GROUP\n  })\n  type: ChatRoomType;\n\n  @ManyToMany(() => User, (user) => user.chatRooms, {\n    onDelete: 'CASCADE' // Automatically handles the relationship cleanup\n  })\n  users: User[];\n\n  @ManyToOne(() => User)\n  @JoinColumn({ name: 'owner_id' })\n  owner: User;\n\n  @Column({ name: 'owner_id', nullable: true }) // Made nullable temporarily\n  ownerId: number;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatRoomController.html":{"url":"controllers/ChatRoomController.html","title":"controller - ChatRoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatRoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat-rooms\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing chat rooms.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                addUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Add a user to a chat room'})@ApiResponse({status: 200, description: 'User added successfully.'})@ApiResponse({status: 400, description: 'Invalid request data.'})@Post(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:127\n                        \n                    \n\n\n            \n                \n                        Adds a user to a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to be added.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a chat room'})@ApiResponse({status: 201, description: 'Chat room created successfully.'})@ApiResponse({status: 400, description: 'Invalid request data.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Creates a new chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing chat room details.\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Request object containing the authenticated user.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all chat rooms'})@ApiResponse({status: 200, description: 'List of chat rooms retrieved successfully.'})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Retrieves all chat rooms.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                An array of chat rooms.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find a chat room by ID'})@ApiResponse({status: 200, description: 'Chat room found.'})@ApiResponse({status: 404, description: 'Chat room not found.'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves a chat room by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The found chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a chat room'})@ApiResponse({status: 200, description: 'Chat room deleted successfully.'})@ApiResponse({status: 403, description: 'Permission denied.'})@ApiResponse({status: 404, description: 'Chat room not found.'})@Delete(':id')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:108\n                        \n                    \n\n\n            \n                \n                        Deletes a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Request object containing the authenticated user.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A success message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove a user from a chat room'})@ApiResponse({status: 200, description: 'User removed successfully.'})@ApiResponse({status: 400, description: 'Invalid request data.'})@ApiResponse({status: 404, description: 'User not found in chat room.'})@Delete(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:145\n                        \n                    \n\n\n            \n                \n                        Removes a user from a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to be removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a chat room'})@ApiResponse({status: 200, description: 'Chat room updated successfully.'})@ApiResponse({status: 400, description: 'Invalid request data.'})@ApiResponse({status: 404, description: 'Chat room not found.'})@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        Updates a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing update details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated chat room.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe,\n  HttpCode,\n  HttpStatus,\n  Req\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\nimport { Request } from 'express';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user?: {\n    sub: number;\n    email: string;\n  };\n}\n\n/**\n * Controller for managing chat rooms.\n */\n@ApiTags('ChatRooms')\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n  /**\n   * Creates a new chat room.\n   * @param createChatRoomDto DTO containing chat room details.\n   * @param req Request object containing the authenticated user.\n   * @returns The created chat room.\n   */\n  @ApiOperation({ summary: 'Create a chat room' })\n  @ApiResponse({ status: 201, description: 'Chat room created successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    return this.chatRoomService.create(createChatRoomDto, userId);\n  }\n\n  /**\n   * Retrieves all chat rooms.\n   * @returns An array of chat rooms.\n   */\n  @ApiOperation({ summary: 'Get all chat rooms' })\n  @ApiResponse({ status: 200, description: 'List of chat rooms retrieved successfully.' })\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  /**\n   * Retrieves a chat room by ID.\n   * @param id Chat room ID.\n   * @returns The found chat room.\n   */\n  @ApiOperation({ summary: 'Find a chat room by ID' })\n  @ApiResponse({ status: 200, description: 'Chat room found.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  /**\n   * Updates a chat room.\n   * @param id Chat room ID.\n   * @param updateChatRoomDto DTO containing update details.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Update a chat room' })\n  @ApiResponse({ status: 200, description: 'Chat room updated successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  /**\n   * Deletes a chat room.\n   * @param id Chat room ID.\n   * @param req Request object containing the authenticated user.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Delete a chat room' })\n  @ApiResponse({ status: 200, description: 'Chat room deleted successfully.' })\n  @ApiResponse({ status: 403, description: 'Permission denied.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    await this.chatRoomService.remove(id, userId);\n    return {\n      statusCode: HttpStatus.OK,\n      message: `Chat room with ID ${id} has been successfully deleted`\n    };\n  }\n\n  /**\n   * Adds a user to a chat room.\n   * @param id Chat room ID.\n   * @param userId User ID to be added.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Add a user to a chat room' })\n  @ApiResponse({ status: 200, description: 'User added successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  /**\n   * Removes a user from a chat room.\n   * @param id Chat room ID.\n   * @param userId User ID to be removed.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Remove a user from a chat room' })\n  @ApiResponse({ status: 200, description: 'User removed successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @ApiResponse({ status: 404, description: 'User not found in chat room.' })\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatRoomService.html":{"url":"injectables/ChatRoomService.html","title":"injectable - ChatRoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatRoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/providers/chatrooms/chatrooms.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling chat room operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                addUserToChatRoom\n                            \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                removeUserFromChatRoom\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatRoomRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatRoomRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        addUserToChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserToChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find a user in the chat room by ID'})@ApiResponse({status: 200, description: 'User added to the chat room successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Add a user to the chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The found chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto, currentUserId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new chat room'})@ApiResponse({status: 201, description: 'Chat room created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Creates a new chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data transfer object containing chat room details.\n\n                                            \n                                        \n                                        \n                                                currentUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the current user.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created chat room.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all chat rooms'})@ApiResponse({status: 200, description: 'List of chat rooms retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Retrieves all chat rooms.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                List of chat rooms.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find a chat room by ID'})@ApiResponse({status: 200, description: 'Chat room found'})@ApiResponse({status: 404, description: 'Chat room not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Finds a chat room by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number, userId?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a chat room'})@ApiResponse({status: 200, description: 'Chat room deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Deletes a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user ID for permission checks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        removeUserFromChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserFromChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a user from a chat room'})@ApiResponse({status: 200, description: 'user deleted from Chat room successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Deletes a user from chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Optional user ID for permission checks.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update a chat room'})@ApiResponse({status: 200, description: 'Chat room updated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Updates a chat room.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Chat room ID.\n\n                                            \n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    DTO containing updated data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The updated chat room.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException, ForbiddenException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ChatRoom } from '../../chatroom.entity';\nimport { CreateChatRoomDto } from '../../DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from '../../DTOs/update-chat-room.dto';\nimport { User } from 'src/users/user.entitly';\nimport { ChatRoomType } from '../../enums/chatroomType';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n\n/**\n * Service responsible for handling chat room operations.\n */\n@Injectable()\n@ApiTags('ChatRooms')\nexport class ChatRoomService {\n  constructor(\n    @InjectRepository(ChatRoom)\n    private chatRoomRepository: Repository,\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new chat room.\n   * @param createChatRoomDto Data transfer object containing chat room details.\n   * @param currentUserId ID of the current user.\n   * @returns The created chat room.\n   */\n  @ApiOperation({ summary: 'Create a new chat room' })\n  @ApiResponse({ status: 201, description: 'Chat room created successfully' })\n  async create(createChatRoomDto: CreateChatRoomDto, currentUserId: number): Promise {\n    // Find users\n    const users = await this.userRepository.findByIds(\n      createChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== createChatRoomDto.userIds.length) {\n      throw new NotFoundException('One or more users not found');\n    }\n\n    // Make sure the current user is one of the chat participants\n    if (!createChatRoomDto.userIds.includes(currentUserId)) {\n      // Add the current user to the chat members if not already included\n      const currentUser = await this.userRepository.findOne({ where: { id: currentUserId } });\n      if (currentUser) {\n        users.push(currentUser);\n      }\n    }\n\n    // Create new chat room\n    const chatRoom = this.chatRoomRepository.create({\n      name: createChatRoomDto.name,\n      type: createChatRoomDto.type,\n      users: users,\n      ownerId: currentUserId\n    });\n\n    return await this.chatRoomRepository.save(chatRoom);\n  }\n\n  /**\n   * Retrieves all chat rooms.\n   * @returns List of chat rooms.\n   */\n  @ApiOperation({ summary: 'Get all chat rooms' })\n  @ApiResponse({ status: 200, description: 'List of chat rooms retrieved successfully' })\n  async findAll(): Promise {\n    return this.chatRoomRepository.find({\n      relations: ['users'],\n    });\n  }\n\n/** Method for finding a chat room by ID*/\n/**\n   * Finds a chat room by ID.\n   * @param id Chat room ID.\n   * @returns The found chat room.\n   */\n@ApiOperation({ summary: 'Find a chat room by ID' })\n@ApiResponse({ status: 200, description: 'Chat room found' })\n@ApiResponse({ status: 404, description: 'Chat room not found' })\nasync findOne(id: number): Promise {\n  const chatRoom = await this.chatRoomRepository.findOne({\n    where: { id: Number(id) },\n    relations: ['users', 'owner']\n  });\n\n  if (!chatRoom) {\n    throw new NotFoundException(`Chat room with ID ${id} not found`);\n  }\n\n  return chatRoom;\n}\n\n// Method for updating a chat room\n/**\n   * Updates a chat room.\n   * @param id Chat room ID.\n   * @param updateChatRoomDto DTO containing updated data.\n   * @returns The updated chat room.\n   */\n@ApiOperation({ summary: 'Update a chat room' })\n@ApiResponse({ status: 200, description: 'Chat room updated successfully' })\nasync update(id: number, updateChatRoomDto: UpdateChatRoomDto): Promise {\n  const chatRoom = await this.findOne(id);\n  \n  if (updateChatRoomDto.userIds) {\n    const users = await this.userRepository.findByIds(\n      updateChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== updateChatRoomDto.userIds.length) {\n      throw new BadRequestException('One or more users not found');\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE && users.length !== 2) {\n      throw new BadRequestException('Private chat rooms must have exactly 2 users');\n    }\n\n    chatRoom.users = users;\n  }\n\n  // Update other fields\n  if (updateChatRoomDto.name) chatRoom.name = updateChatRoomDto.name;\n  if (updateChatRoomDto.type) chatRoom.type = updateChatRoomDto.type;\n\n  return this.chatRoomRepository.save(chatRoom);\n}\n\n\n/**\n   * Deletes a chat room.\n   * @param id Chat room ID.\n   * @param userId Optional user ID for permission checks.\n   */\n@ApiOperation({ summary: 'Delete a chat room' })\n@ApiResponse({ status: 200, description: 'Chat room deleted successfully' })\nasync remove(id: number, userId?: number): Promise {\n  const chatRoom = await this.chatRoomRepository.findOne({\n    where: { id: Number(id) }\n  });\n  \n  if (!chatRoom) {\n    throw new NotFoundException(`Chat room with ID ${id} not found`);\n  }\n\n  // Check owner permissions if userId is provided\n  if (userId && chatRoom.ownerId && chatRoom.ownerId !== userId) {\n    throw new ForbiddenException('You do not have permission to delete this chat room');\n  }\n  \n  // Remove the chat room\n  await this.chatRoomRepository.remove(chatRoom);\n}\n\n  /**\n   * Add a user to the chat room.\n   * @param id user ID.\n   * @returns The found chat room.\n   */\n@ApiOperation({ summary: 'Find a user in the chat room by ID' })\n@ApiResponse({ status: 200, description: 'User added to the chat room successfully' })\n\n  async addUserToChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n    const user = await this.userRepository.findOne({ \n      where: { id: Number(userId) }\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found`);\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot add users to private chat rooms');\n    }\n\n    chatRoom.users.push(user);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n// Method for removing a user from a chat room\n\n/**\n   * Deletes a user from chat room.\n   * @param id Chat room ID.\n   * @param userId Optional user ID for permission checks.\n   */\n@ApiOperation({ summary: 'Delete a user from a chat room' })\n@ApiResponse({ status: 200, description: 'user deleted from Chat room successfully' })\nasync removeUserFromChatRoom(chatRoomId: number, userId: number): Promise {\n  const chatRoom = await this.findOne(chatRoomId);\n\n  if (chatRoom.type === ChatRoomType.PRIVATE) {\n    throw new BadRequestException('Cannot remove users from private chat rooms');\n  }\n\n  // Check if user is the owner\n  if (chatRoom.ownerId === userId) {\n    throw new BadRequestException('Cannot remove the owner from the chat room');\n  }\n\n  const initialUserCount = chatRoom.users.length;\n  chatRoom.users = chatRoom.users.filter(user => user.id !== userId);\n\n  if (chatRoom.users.length === initialUserCount) {\n    throw new NotFoundException(`User with ID ${userId} not found in chat room ${chatRoomId}`);\n  }\n\n  return this.chatRoomRepository.save(chatRoom);\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CloudinaryModule.html":{"url":"modules/CloudinaryModule.html","title":"module - CloudinaryModule","body":"\n                   \n\n\n\n\n    Modules\n    CloudinaryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\ncluster_CloudinaryModule_exports\n\n\n\n\nCloudinaryService \n\nCloudinaryService \n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nCloudinaryService  -->\n\nCloudinaryModule->CloudinaryService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cloudinary-provider/cloudinary.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CloudinaryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary.service';\n\n@Module({\n  providers: [CloudinaryService],\n  exports: [CloudinaryService], \n})\nexport class CloudinaryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cloudinary-provider/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/cloudinary-provider/cloudinary.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cloudinary-provider/cloudinary.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport { UploadApiResponse } from 'cloudinary';\n\n@Injectable()\nexport class CloudinaryService {\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadFile(file: Express.Multer.File): Promise {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload_stream({ resource_type: 'auto' }, (error, result) => {\n          if (error) reject(error);\n          else resolve(result);\n        })\n        .end(file.buffer);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatRoomDto.html":{"url":"classes/CreateChatRoomDto.html","title":"class - CreateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/create-chat-room.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create chatroom dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:10\n                        \n                    \n\n            \n                \n                    The name of the chatroom of type string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChatRoomType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:15\n                        \n                    \n\n            \n                \n                    The type of chatroom of type enum\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsArray, IsUUID, IsOptional, IsNumber } from 'class-validator';\nimport { ChatRoomType } from '../enums/chatroomType'; \nimport { Type } from 'class-transformer';\n\n/**create chatroom dto class */\nexport class CreateChatRoomDto {\n\n  /**The name of the chatroom of type string */\n  @IsString()\n  name: string;\n\n  /**The type of chatroom of type enum */\n  @IsEnum(ChatRoomType)\n  @IsOptional()\n  type?: ChatRoomType;\n\n\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number)\n  userIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/googleUserProvider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/googleUserProvider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/googleUserProvider.ts:19\n                        \n                    \n\n\n            \n                \n                        Create googleuser class of type googleuser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { GoogleInterface } from '../../auth/social/interfaces/user.interface';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /*\n     * inject userRepository\n     */\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n\n  /**Create googleuser class of type googleuser */\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    try {\n      const user = this.userRepository.create(googleUser);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dtos/create-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object (DTO) for creating a message.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                audio\n                            \n                            \n                                    \n                                chatRoomId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                fileUrl\n                            \n                            \n                                    \n                                    \n                                messageType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        audio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:26\n                        \n                    \n\n            \n                \n                    The URL of the audio file if the message contains an audio attachment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoomId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:12\n                        \n                    \n\n            \n                \n                    The ID of the chat room where the message is sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the file if the message contains an attachment.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        messageType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessageType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(MessageType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:40\n                        \n                    \n\n            \n                \n                    The type of the message (e.g., text, audio, file, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/create-message.dto.ts:19\n                        \n                    \n\n            \n                \n                    The text content of the message.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { MessageType } from '../enum/message-type ';\n\n/**\n * Data Transfer Object (DTO) for creating a message.\n */\nexport class CreateMessageDto {\n  /**\n   * The ID of the chat room where the message is sent.\n   */\n  @IsNotEmpty()\n  chatRoomId: number;\n\n  /**\n   * The text content of the message.\n   */\n  @IsString()\n  @IsNotEmpty()\n  text?: string;\n  \n  /**\n   * The URL of the audio file if the message contains an audio attachment.\n   */\n  @IsString()\n  @IsOptional()\n  audio?: string;\n\n  /**\n   * The URL of the file if the message contains an attachment.\n   */\n  @IsString()\n  @IsOptional()\n  fileUrl?: string;\n\n  /**\n   * The type of the message (e.g., text, audio, file, etc.).\n   */\n  @IsOptional()\n  @IsEnum(MessageType)\n  messageType: MessageType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:144\n                        \n                    \n\n            \n                \n                    List of chatrooms associated with the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:107\n                        \n                    \n\n            \n                \n                    Password confirmation field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    Email field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    First name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:131\n                        \n                    \n\n            \n                \n                    Autogenerated from Google when signing up with Google\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:64\n                        \n                    \n\n            \n                \n                    Last name field\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:95\n                        \n                    \n\n            \n                \n                    Password should contain numbers, alphabets, and uppercase\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: userRole, example: undefined})@IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:119\n                        \n                    \n\n            \n                \n                    User role\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n/**\n * Custom validation to compare passwords\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user\n */\nexport class CreateUserDto {\n  /**\n   * First name field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password should contain numbers, alphabets, and uppercase\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Password confirmation field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role\n   */\n  @ApiProperty({\n    enum: userRole,\n    example: userRole.USER,\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) \n  userRole?: userRole;\n\n  /**\n   * Autogenerated from Google when signing up with Google\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]'\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  /**\n   * List of chatrooms associated with the user\n   */\n  @ApiProperty({\n    type: 'array',\n    items: { type: 'Chatroom' },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/create-user.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service provider for creating users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/create-user.provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/create-user.provider.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO containing user creation data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A Promise resolving to the created User entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Service provider for creating users\n */\n@ApiTags('Users')\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * Inject userRepository\n     */\n    @InjectRepository(User) private userRepository: Repository,\n\n    /**\n     * Inject hashingProvider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  /**\n   * Creates a new user in the system.\n   * @param createUserDto - The DTO containing user creation data.\n   * @returns A Promise resolving to the created User entity.\n   * @throws BadRequestException if the user already exists.\n   * @throws RequestTimeoutException if a database connection issue occurs.\n   */\n  public async createUsers(createUserDto: CreateUserDto): Promise {\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exist');\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      createUserDto.password,\n    );\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    try {\n      this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'the user is having network issues',\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/data-response/data-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, \n  ExecutionContext, \n  Injectable, \n  NestInterceptor \n} from '@nestjs/common';\nimport { map, Observable, pipe, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('before')\n    return next.handle().pipe(map((data) => ({\n      apiversrion:'0.0.1',\n      result: data.length,\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                using the patch to edit part of the data, the partialtype makes everything optional\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/patch-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsInt, IsNotEmpty, IsString } from \"class-validator\";\nimport { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n \n/**using the patch to edit part of the data, the partialtype makes everything optional */ \nexport class EditUserDto extends PartialType(CreateUserDto) {\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmail.html":{"url":"injectables/FindOneByEmail.html","title":"injectable - FindOneByEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-email.ts\n        \n\n\n            \n                Description\n            \n            \n                find one by email class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-email.ts:9\n                            \n                        \n\n                \n                    \n                            inject user Repository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-email.ts:16\n                        \n                    \n\n\n            \n                \n                        find one by email class that takes email as parameter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n\n/**find one by email class */\n@Injectable()\nexport class FindOneByEmail {\n\n    /**inject user Repository */\n    constructor(@InjectRepository(User) private userRepository: Repository) {}\n\n\n    /**find one by email class that takes email as parameter */\n    public async findOneByEmail(email: string): Promise {\n        let user: User | undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({ email });\n        } catch (error) {\n            throw new RequestTimeoutException('Could not fetch user', {\n                description: 'Error connecting to database',\n            });\n        }\n\n        if (!user) {\n            throw new UnauthorizedException('User does not exist');\n        }\n\n        return user; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-googleId.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-googleId.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-googleId.ts:17\n                        \n                    \n\n\n            \n                \n                        find one by googleid class with googleid as parameter of type string\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /*\n     *inject userRepository\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  /**find one by googleid class with googleid as parameter of type string */\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userRepository.findOneBy({ googleId })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interface/activeInterface';\nimport { UserService } from 'src/users/provider/user.service';\nimport { User } from 'src/users/user.entitly';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     *injecting jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * injecting jwtConfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      } as ActiveUserData,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n    // generate access token\n    this.signToken(user.id, this.jwtConfiguration.ttl, {email: user.email}),\n\n    // generate refresh token\n    this.signToken(user.id, this.jwtConfiguration.ttl)\n    ])\n    \n    return {'accessToken': accessToken, 'refreshToken': refreshToken, user}\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetuserParamDto.html":{"url":"classes/GetuserParamDto.html","title":"class - GetuserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetuserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/getUserparamdto.ts\n        \n\n\n            \n                Description\n            \n            \n                Get userParamdto  class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', example: 1})@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/getUserparamdto.ts:14\n                        \n                    \n\n            \n                \n                    A unique id that is optional and of type number\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from \"@nestjs/swagger\";\n\n/**Get userParamdto  class */\nexport class GetuserParamDto {\n\n    /**A unique id that is optional and of type number */\n   @ApiProperty({type:'number',\n    example:1,\n   })\n    @IsInt()\n    @Type (() => Number )\n    id?:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googlTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googlTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { authTypes } from '../enums/authTypes.enum';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Auth(authTypes.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n    constructor(\n        /* \n         * inject googleAuthenticationService \n         */\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) {}\n\n    @Post()\n    public authenticate(@Body() googlTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googlTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtConfigurattion: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfigurattion\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oAuthClient: OAuth2Client;\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * inject jwtconfig\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigurattion: ConfigType,\n    /**\n     * inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const client_id = this.jwtConfigurattion.googleClient_id;\n    const client_secret = this.jwtConfigurattion.googleClient_secret;\n\n    this.oAuthClient = new OAuth2Client(client_id, client_secret);\n  }\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      console.log(\"Received Token:\", googleTokenDto.token);\n\n      // verify the google token sent by user\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      console.log(\"Google Token Payload:\", loginTicket.getPayload());\n\n      // extract the payload from google jwt token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the database using googleId\n      const user = await this.userService.findOneByGoogleId(googleId);\n\n      // if user exist, generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      // else generate the user and create the token\n      const newUser = await this.userService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      // if any of the step fails, send an unauthorised exception\n      console.error(\"Google Auth Error:\", error);\n      throw new UnauthorizedException('failed to authenticate with google');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthticationModule.html":{"url":"modules/GoogleAuthticationModule.html","title":"module - GoogleAuthticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_GoogleAuthticationModule_providers\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/social/google-authtication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Module({\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleInterface.html":{"url":"interfaces/GoogleInterface.html","title":"interface - GoogleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/interfaces/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleInterface {\n    email: string\n    firstName: string\n    lastName: string\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n    // hashing during signUp\n    abstract hashPassword(inpPassword: string | Buffer): Promise\n\n    // comparison during signIn\n    abstract comparePasswords(password: string, encryPassword: string): Promise\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { config } from 'process';\nimport { from } from 'form-data';\nimport { Template } from 'ejs';\nimport { join } from 'path';\nimport { strict } from 'assert';\nimport {EjsAdapter} from '@nestjs-modules/mailer/dist/adapters/ejs.adapter'\nimport { MailProvider } from './providers/mail.provider';\n\n\n@Global()\n@Module({\n    imports: [MailerModule.forRootAsync({\n        inject: [ConfigService],\n        useFactory:async(config:ConfigService) => ({\n            transport: {\n                host: config.get('MAIL_HOST'),\n                secure: false,\n                port: config.get('MAIL_PORT'),\n                auth: {\n                    user: config.get('SMTP_USERNAME'),\n                    pass: config.get('SMTP_PASSWORD'),\n                },\n                default: {\n                    from: `no-reply-`\n                },\n                template: {\n                    dir: join(__dirname, 'template'),\n                    adapter: new EjsAdapter({\n                    inlineCssEnabled: true,\n                    }),\n                    Option : {\n                        strict: false,\n                    }\n\n                }\n            }\n        })\n    })],\n    providers: [MailProvider],\n    exports: [MailProvider]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailProvider.html":{"url":"injectables/MailProvider.html","title":"injectable - MailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Mail provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                WelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        WelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    WelcomeEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.provider.ts:16\n                        \n                    \n\n\n            \n                \n                        Welcome email class that takes a user as parameter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { name } from 'ejs';\nimport { User } from 'src/users/user.entitly';\n\n/**Mail provider class */\n@Injectable()\nexport class MailProvider {\n    constructor (\n        /**inject the mailer Service*/\n        private readonly mailerService:MailerService,\n    ) {}\n\n\n    /**Welcome email class that takes a user as parameter */\n    public async WelcomeEmail (user:User):Promise {\n        await this.mailerService.sendMail({\n         to: user.email,\n         from: `helpdesk from realTimeChat.com`,\n         subject: `welcome to realTimeChat`,\n         template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000/',\n        }\n        })\n\n\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validation to compare passwords\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n/**\n * Custom validation to compare passwords\n */\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nclass MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user\n */\nexport class CreateUserDto {\n  /**\n   * First name field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password should contain numbers, alphabets, and uppercase\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Password confirmation field\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role\n   */\n  @ApiProperty({\n    enum: userRole,\n    example: userRole.USER,\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER) \n  userRole?: userRole;\n\n  /**\n   * Autogenerated from Google when signing up with Google\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]'\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  /**\n   * List of chatrooms associated with the user\n   */\n  @ApiProperty({\n    type: 'array',\n    items: { type: 'Chatroom' },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms?: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/message.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a message in a chat room.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chatRoom\n                            \n                            \n                                    \n                                    Optional\n                                fileUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                messageType\n                            \n                            \n                                    \n                                sender\n                            \n                            \n                                    \n                                    Optional\n                                text\n                            \n                            \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, chatRoom => chatRoom.id, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:27\n                        \n                    \n\n            \n                \n                    The chat room to which this message belongs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:51\n                        \n                    \n\n            \n                \n                    The URL of an attached file (if applicable).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the message.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messageType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MessageType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: MessageType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:39\n                        \n                    \n\n            \n                \n                    The type of the message (e.g., text, file, etc.).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:33\n                        \n                    \n\n            \n                \n                    The user who sent the message.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:45\n                        \n                    \n\n            \n                \n                    The text content of the message (if applicable).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:57\n                        \n                    \n\n            \n                \n                    Timestamp when the message was created.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToOne,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { User } from '../users/user.entitly';\nimport { MessageType } from './enum/message-type ';\n\n/**\n * Entity representing a message in a chat room.\n */\n@Entity()\nexport class Message {\n  /**\n   * Unique identifier for the message.\n   */\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  /**\n   * The chat room to which this message belongs.\n   */\n  @ManyToOne(() => ChatRoom, (chatRoom) => chatRoom.id, { onDelete: 'CASCADE' })\n  chatRoom: ChatRoom;\n\n  /**\n   * The user who sent the message.\n   */\n  @ManyToOne(() => User, (user) => user.messages, { onDelete: 'CASCADE' })\n  sender: User;\n\n  /**\n   * The type of the message (e.g., text, file, etc.).\n   */\n  @Column({ type: 'enum', enum: MessageType, default: MessageType.TEXT })\n  messageType: MessageType;\n\n  /**\n   * The text content of the message (if applicable).\n   */\n  @Column({ type: 'text', nullable: true })\n  text?: string;\n  \n  /**\n   * The URL of an attached file (if applicable).\n   */\n  @Column({ type: 'text', nullable: true }) \n  fileUrl?: string;\n\n  /**\n   * Timestamp when the message was created.\n   */\n  @CreateDateColumn()\n  timestamp: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n            \n                Description\n            \n            \n                message routes\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: ActiveUserData, createMessageDto: CreateMessageDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Send a new message with the active user as the sender\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Delete a message by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':chatRoomId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Get all messages in a chat room\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        Update a message text by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Get,\n  Delete,\n  Patch,\n  Body,\n  Param,\n  UploadedFile, UseInterceptors \n} from '@nestjs/common';\nimport { MessageService } from './provider/message.service';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { ActiveUser } from 'src/auth/decorators/activeUser.decorator';\nimport { CreateMessageDto } from './dtos/create-message.dto';\nimport { UpdateMessageDto } from './dtos/update-message.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n/**\n * message routes\n */\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) {}\n\n  /**\n   * Send a new message with the active user as the sender\n   */\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async create(\n    @ActiveUser() user: ActiveUserData,\n    @Body() createMessageDto: CreateMessageDto,\n    @UploadedFile() file?: Express.Multer.File,\n    \n  ) {\n    // Override senderId from payload using the active user's sub property.\n    console.log(user);\n    return await this.messageService.create(createMessageDto, user, file);\n  }\n\n  /**\n   * Get all messages in a chat room\n   */\n  @Get(':chatRoomId')\n  async findAll(@Param('chatRoomId') chatRoomId: string) {\n    return await this.messageService.findAll(chatRoomId);\n  }\n\n  /**\n   * Delete a message by ID\n   */\n  @Delete(':messageId')\n  async delete(@Param('messageId') messageId: string) {\n    return await this.messageService.delete(messageId);\n  }\n\n  /**\n   * Update a message text by ID\n   */\n  @Patch(':messageId')\n  async update(\n    @Param('messageId') messageId: string,\n    @Body() updateMessageDto: UpdateMessageDto,\n  ) {\n    return await this.messageService.update(messageId, updateMessageDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_imports\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\n\n\nMessageModule\n\nMessageModule\n\nMessageModule -->\n\nCloudinaryModule->MessageModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nMessageModule -->\n\nCloudinaryService->MessageModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CloudinaryModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Message } from './message.entity';\nimport { MessageService } from './provider/message.service';\nimport { MessageController } from './messages.controller';\nimport { User } from '../users/user.entitly';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\nimport { CloudinaryService } from 'src/cloudinary-provider/cloudinary.service';\nimport { CloudinaryModule } from 'src/cloudinary-provider/cloudinary.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message, User, ChatRoom]), CloudinaryModule],\n  providers: [MessageService, CloudinaryService],\n  controllers: [MessageController],\n  exports: [MessageService],\n})\nexport class MessageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/provider/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepo: Repository, chatRoomsRepo: Repository, usersRepo: Repository, cloudinaryService: CloudinaryService)\n                    \n                \n                        \n                            \n                                Defined in src/messages/provider/message.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatRoomsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cloudinaryService\n                                                  \n                                                        \n                                                                        CloudinaryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMessageDto: CreateMessageDto, user: ActiveUserData, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Create method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Delete a message\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:93\n                        \n                    \n\n\n            \n                \n                        find all messages in a chatroom\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:113\n                        \n                    \n\n\n            \n                \n                        Update a message text\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMessageDto\n                                            \n                                                            UpdateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeepPartial, Repository } from 'typeorm';\nimport { Message } from '../message.entity';\nimport { ChatRoom } from '../../chatrooms/chatroom.entity';\nimport { User } from 'src/users/user.entitly';\nimport { UpdateMessageDto } from '../dtos/update-message.dto';\nimport { CreateMessageDto } from '../dtos/create-message.dto';\nimport { ActiveUser } from 'src/auth/decorators/activeUser.decorator';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { CloudinaryService } from 'src/cloudinary-provider/cloudinary.service';\n\n@Injectable()\nexport class MessageService {\n  constructor(\n    /**\n     * inject messageRepo\n     */\n    @InjectRepository(Message)\n    private messagesRepo: Repository,\n\n    /**\n     * inject chatRoomsRepo\n     */\n    @InjectRepository(ChatRoom)\n    private chatRoomsRepo: Repository,\n\n    /**\n     * inject usersRepo\n     */\n    @InjectRepository(User)\n    private usersRepo: Repository,\n\n    /**inject cloudinary service */\n    private readonly cloudinaryService: CloudinaryService,\n  ) {}\n\n  /**Create method */\n  async create(\n    createMessageDto: CreateMessageDto,\n    user: ActiveUserData,\n    file?: Express.Multer.File,\n  ): Promise {\n    const { chatRoomId, text } = createMessageDto;\n\n    //  Find the chat room\n    const chatRoom = await this.chatRoomsRepo.findOne({\n      where: { id: createMessageDto.chatRoomId },\n    });\n    if (!chatRoom) throw new NotFoundException('Chat room not found');\n\n    //  Find the sender\n    const sender = await this.usersRepo.findOne({ where: { id: user.sub } });\n    console.log(sender);\n    if (!sender) throw new NotFoundException('Sender not found');\n\n    //  Handle file upload if provided\n    let fileUrl: string | undefined;\n    if (file) {\n      console.log('Incoming File:', file);\n      try {\n        const uploadResult = await this.cloudinaryService.uploadFile(file);\n        console.log('Cloudinary Upload Result:', uploadResult);\n        fileUrl = uploadResult.secure_url;\n      } catch (error) {\n        console.error('File upload error:', error);\n        throw new BadRequestException('File upload failed');\n      }\n    }\n\n    //  Create message\n    const message = this.messagesRepo.create({\n      chatRoom,\n      sender,\n      text: createMessageDto.text,\n      fileUrl,\n    } as DeepPartial);\n    console.log('Message Before Save:', message);\n\n    //Save message correctly\n    const savedMessage = await this.messagesRepo.save(message);\n    console.log('Saved Message:', savedMessage);\n    return savedMessage; // Ensure returning a single object\n  }\n\n  /**\n   * find all messages in a chatroom\n   */\n  async findAll(chatRoomId: string): Promise {\n    return await this.messagesRepo.find({\n      where: { chatRoom: { id: chatRoomId as any } },\n      relations: ['sender'],\n    });\n  }\n\n  /**\n   * Delete a message\n   */\n  async delete(messageId: string): Promise {\n    const result = await this.messagesRepo.delete(messageId);\n    if (result.affected === 0) {\n      throw new NotFoundException('Message not found');\n    }\n  }\n\n  /**\n   * Update a message text\n   */\n  async update(\n    messageId: string,\n    updateMessageDto: UpdateMessageDto,\n  ): Promise {\n    const message = await this.messagesRepo.findOne({\n      where: { id: messageId },\n    });\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    if (!updateMessageDto || !updateMessageDto.text) {\n      throw new BadRequestException('No update values provided');\n    }\n\n    message.text = updateMessageDto.text;\n    return await this.messagesRepo.save(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paginated.html":{"url":"classes/Paginated.html","title":"class - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Interfaces/paginatedInterface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                link\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Paginated   {\n    data:T[];\n    meta: {\n        itemsPerPage:number,\n        totalItems: number,\n        currentPage:number,\n        totalPage:number,\n    };\n    link: \n    {\n        first: string,\n        last:string,\n        current: string,\n        previous:string,\n        next:string,\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module,forwardRef } from '@nestjs/common';\nimport { PaginationProvider } from './pagination/Provider/pagination.provider';\n\n\n@Module({\n  imports:[],\n  providers: [PaginationProvider],\n  controllers: [],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Provider/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/Provider/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(paginationQueryDto: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/Provider/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../Interfaces/paginatedInterface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  public async paginatedQuery(\n    paginationQueryDto: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const result = await repository.find({\n      //skip: number of post\n      //take: number of post to show per page\n      skip: paginationQueryDto.limit * (paginationQueryDto.page - 1),\n      take: paginationQueryDto.limit,\n    });\n\n    // // create a requestUrl\n    // // i.e http://localhost:3000/resource\n    // // the http is this.requestprotocol\n    // const baseUrl = this.request.protocol; + \"://\" + this.request.headers.host + \"/\"\n\n    // const newUrl = new URL(this.request.url, baseUrl)\n\n    // console.log(baseUrl);\n    // // line 34 give u http://localhost:3000/resource  as result on your terminal\n    // console.log(newUrl)\n\n    // Construct the base URL\n    const baseUrl = `${this.request.protocol}://${this.request.get('host')}/`;\n    console.log('Base URL:', baseUrl);\n\n    // Construct the new URL\n    const newUrl = new URL(this.request.url, baseUrl);\n    console.log('New URL:', newUrl.toString());\n\n    const totalItems = await repository.count();\n\n    const totalpage = Math.ceil(totalItems / paginationQueryDto.limit);\n\n    const nextpage =\n      paginationQueryDto.page === 1\n        ? paginationQueryDto.page\n        : paginationQueryDto.page + 1;\n\n    const prevpage =\n      paginationQueryDto.page === 1\n        ? paginationQueryDto.page\n        : paginationQueryDto.page - 1;\n\n    const finalResponse: Paginated = {\n      data: result,\n      meta: {\n        itemsPerPage: paginationQueryDto.limit,\n        totalItems: totalItems,\n        currentPage: paginationQueryDto.page,\n        totalPage: totalpage,\n      },\n      link: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=1`,\n\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&${totalpage}`,\n\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${paginationQueryDto.page}`,\n\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${nextpage}`,\n\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${prevpage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refreshTokenDto.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refreshTokenDto.ts:9\n                        \n                    \n\n            \n                \n                    refresh token of type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, } from \"class-validator\";\n\n/**Refresh token dto class */\nexport class RefreshTokenDto {\n\n    /**refresh token of type string */\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     * inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n     * inject jwtService\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /* \n     * inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider\n  ) {}\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // validate the refresh token using jwt\n   const { sub } = await this.jwtService.verifyAsync(\n        refreshTokenDto.refreshToken, \n        {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n    })\n\n    // grab the user from the database\n    const user = await this.userService.FindOneById(sub)\n\n    // generate the token\n    return await this.generateTokenProvider.generateTokens(user)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe,\n  HttpCode,\n  HttpStatus,\n  Req\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\nimport { Request } from 'express';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user?: {\n    sub: number;\n    email: string;\n  };\n}\n\n/**\n * Controller for managing chat rooms.\n */\n@ApiTags('ChatRooms')\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n  /**\n   * Creates a new chat room.\n   * @param createChatRoomDto DTO containing chat room details.\n   * @param req Request object containing the authenticated user.\n   * @returns The created chat room.\n   */\n  @ApiOperation({ summary: 'Create a chat room' })\n  @ApiResponse({ status: 201, description: 'Chat room created successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    return this.chatRoomService.create(createChatRoomDto, userId);\n  }\n\n  /**\n   * Retrieves all chat rooms.\n   * @returns An array of chat rooms.\n   */\n  @ApiOperation({ summary: 'Get all chat rooms' })\n  @ApiResponse({ status: 200, description: 'List of chat rooms retrieved successfully.' })\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  /**\n   * Retrieves a chat room by ID.\n   * @param id Chat room ID.\n   * @returns The found chat room.\n   */\n  @ApiOperation({ summary: 'Find a chat room by ID' })\n  @ApiResponse({ status: 200, description: 'Chat room found.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  /**\n   * Updates a chat room.\n   * @param id Chat room ID.\n   * @param updateChatRoomDto DTO containing update details.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Update a chat room' })\n  @ApiResponse({ status: 200, description: 'Chat room updated successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  /**\n   * Deletes a chat room.\n   * @param id Chat room ID.\n   * @param req Request object containing the authenticated user.\n   * @returns A success message.\n   */\n  @ApiOperation({ summary: 'Delete a chat room' })\n  @ApiResponse({ status: 200, description: 'Chat room deleted successfully.' })\n  @ApiResponse({ status: 403, description: 'Permission denied.' })\n  @ApiResponse({ status: 404, description: 'Chat room not found.' })\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  async remove(@Param('id', ParseIntPipe) id: number, @Req() req: RequestWithUser) {\n    const userId = req.user?.sub || 1; // Default to user ID 1 for now\n    await this.chatRoomService.remove(id, userId);\n    return {\n      statusCode: HttpStatus.OK,\n      message: `Chat room with ID ${id} has been successfully deleted`\n    };\n  }\n\n  /**\n   * Adds a user to a chat room.\n   * @param id Chat room ID.\n   * @param userId User ID to be added.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Add a user to a chat room' })\n  @ApiResponse({ status: 200, description: 'User added successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  /**\n   * Removes a user from a chat room.\n   * @param id Chat room ID.\n   * @param userId User ID to be removed.\n   * @returns The updated chat room.\n   */\n  @ApiOperation({ summary: 'Remove a user from a chat room' })\n  @ApiResponse({ status: 200, description: 'User removed successfully.' })\n  @ApiResponse({ status: 400, description: 'Invalid request data.' })\n  @ApiResponse({ status: 404, description: 'User not found in chat room.' })\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerToClientEvents.html":{"url":"interfaces/ServerToClientEvents.html","title":"interface - ServerToClientEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerToClientEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/interfaces/websockets-message.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Payload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Payload:         Message\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Message\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Message } from \"src/messages/message.entity\";\n\nexport interface ServerToClientEvents {\n  Payload: Message;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/userDto.ts\n        \n\n\n            \n                Description\n            \n            \n                Sign in dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:8\n                        \n                    \n\n            \n                \n                    email parameter this string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:13\n                        \n                    \n\n            \n                \n                    password parameter that is string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n/**Sign in dto class */\nexport class SignInDto {\n\n  /**email parameter this string */\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**password parameter that is string */\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { HashingProvider } from './hashing';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    /*\n     * injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     * injecting hashing dependency\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /*\n     * injecting generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n  public async SignIn(signInDto: SignInDto) {\n    // check if user exist in db\n    // throw error if user doesnt exist\n    let user = await this.userService.GetOneByEmail(signInDto.email);\n\n    if (!user) {\n      throw new UnauthorizedException('email or password is incorrect');\n    }\n\n    // conpare password\n    let isCheckedPassword: boolean = false;\n\n    try {\n      isCheckedPassword = await this.hashingProvider.comparePasswords(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'error  connecting to the database',\n      });\n    }\n\n    if (!isCheckedPassword) {\n      throw new UnauthorizedException('email or password is incorrect');\n    }\n    // login\n    return await this.generateTokenProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatRoomDto.html":{"url":"classes/UpdateChatRoomDto.html","title":"class - UpdateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/update-chat-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateChatRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatRoomDto } from './create-chat-room.dto';\n\nexport class UpdateChatRoomDto extends PartialType(CreateChatRoomDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/dtos/update-message.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                update message dto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateMessageDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/dtos/update-message.dto.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the message to be updated.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreateMessageDto } from \"./create-message.dto\";\n\n/**\n   * update message dto\n   */\nexport class UpdateMessageDto extends PartialType(CreateMessageDto) {\n     /**\n   * The ID of the message to be updated.\n   */\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entitly.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                chatRooms\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                messages\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => , description: 'List of chat rooms the user is part of', required: false})@IsOptional()@ManyToMany(undefined, chatRoom => chatRoom.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:71\n                        \n                    \n\n            \n                \n                    List of chat rooms the user is part of.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'johndoe@mail.com', description: 'Email address of the user'})@Column('varchar', {unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:40\n                        \n                    \n\n            \n                \n                    Email address of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'First name of the user'})@Column('varchar', {length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:26\n                        \n                    \n\n            \n                \n                    First name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'google-unique-id', description: 'Google ID of the user', required: false})@Column('varchar', {length: 225, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:62\n                        \n                    \n\n            \n                \n                    Google ID (if signed up with Google).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Unique identifier for the user'})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:19\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'Last name of the user'})@Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:33\n                        \n                    \n\n            \n                \n                    Last name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => , description: 'Messages sent by the user', required: false})@IsOptional()@OneToMany(undefined, message => message.sender, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:79\n                        \n                    \n\n            \n                \n                    Messages sent by the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '@Password123', description: 'Password of the user', required: false})@Exclude()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:48\n                        \n                    \n\n            \n                \n                    Password of the user (excluded from serialization).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: userRole, example: undefined, description: 'Role of the user'})@Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:55\n                        \n                    \n\n            \n                \n                    Role of the user.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable, OneToMany } from 'typeorm';\nimport { userRole } from './Enums/userRole.enum';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { Message } from 'src/messages/message.entity';\nimport { IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Entity representing a user.\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for the user.\n   */\n  @ApiProperty({ example: 1, description: 'Unique identifier for the user' })\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({ example: 'John', description: 'First name of the user' })\n  @Column('varchar', { length: 100, nullable: false })\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({ example: 'Doe', description: 'Last name of the user' })\n  @Column('varchar', { length: 100 })\n  lastName: string;\n\n  /**\n   * Email address of the user.\n   */\n  @ApiProperty({ example: 'johndoe@mail.com', description: 'Email address of the user' })\n  @Column('varchar', { unique: true, nullable: false })\n  email: string;\n\n  /**\n   * Password of the user (excluded from serialization).\n   */\n  @ApiProperty({ example: '@Password123', description: 'Password of the user', required: false })\n  @Exclude()\n  @Column('varchar', { nullable: true })\n  password?: string;\n\n  /**\n   * Role of the user.\n   */\n  @ApiProperty({ enum: userRole, example: userRole.USER, description: 'Role of the user' })\n  @Column({ type: 'enum', enum: userRole, default: userRole.USER })\n  userRole?: userRole;\n\n  /**\n   * Google ID (if signed up with Google).\n   */\n  @ApiProperty({ example: 'google-unique-id', description: 'Google ID of the user', required: false })\n  @Column('varchar', { length: 225, nullable: true })\n  googleId?: string;\n\n  /**\n   * List of chat rooms the user is part of.\n   */\n  @ApiProperty({ type: () => [ChatRoom], description: 'List of chat rooms the user is part of', required: false })\n  @IsOptional()\n  @ManyToMany(() => ChatRoom, (chatRoom) => chatRoom.users)\n  @JoinTable()\n  chatRooms?: ChatRoom[];\n\n  /**\n   * Messages sent by the user.\n   */\n  @ApiProperty({ type: () => [Message], description: 'Messages sent by the user', required: false })\n  @IsOptional()\n  @OneToMany(() => Message, (message) => message.sender, { cascade: true })\n  messages?: Message[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                UserController handles all user-related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                editedPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiBody({type: CreateUserDto})@ApiResponse({status: 201, description: 'User created successfully', type: User})@Auth(authTypes.None)@UseInterceptors(ClassSerializerInterceptor)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Create a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data transfer object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a user'})@ApiQuery({name: 'id', required: true, type: Number})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        Delete a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        editedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    editedPost(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Edit a user'})@ApiBody({type: EditUserDto})@ApiResponse({status: 200, description: 'User updated successfully', type: User})@ApiResponse({status: 404, description: 'User not found'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:101\n                        \n                    \n\n\n            \n                \n                        Edit an existing user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get a user by ID'})@ApiParam({name: 'id', required: true, type: Number})@ApiResponse({status: 200, description: 'User found', type: User})@ApiResponse({status: 404, description: 'User not found'})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Fetch a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A single user object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(paginationQueryDto: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users'})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiResponse({status: 200, description: 'List of users', type: undefined})@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Fetch a paginated list of users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPagination parameters.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                A paginated list of users.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery, ApiParam, ApiBody } from '@nestjs/swagger';\nimport { UserService } from './provider/user.service';\nimport { CreateUserDto } from './DTOs/create-user.dto';\nimport { EditUserDto } from './DTOs/patch-user.dto';\nimport { PaginationQueryDto } from 'src/common/pagination/pagination-query.dto';\nimport { Paginated } from 'src/common/pagination/Interfaces/paginatedInterface';\nimport { User } from './user.entitly';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { authTypes } from 'src/auth/enums/authTypes.enum';\n\n/**\n * UserController handles all user-related operations.\n */\n@ApiTags('Users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * Fetch a paginated list of users.\n   * @param paginationQueryDto - Pagination parameters.\n   * @returns A paginated list of users.\n   */\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({ status: 200, description: 'List of users', type: [User] })\n  @Get('/:id?')\n  public getUsers(\n    @Query() paginationQueryDto: PaginationQueryDto,\n  ): Promise> {\n    return this.userService.findAll(paginationQueryDto);\n  }\n\n  /**\n   * Fetch a single user by ID.\n   * @param id - User ID.\n   * @returns A single user object.\n   */\n  @ApiOperation({ summary: 'Get a user by ID' })\n  @ApiParam({ name: 'id', required: true, type: Number })\n  @ApiResponse({ status: 200, description: 'User found', type: User })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  @Get(':id')\n  public getUserById(@Param('id', ParseIntPipe) id: number) {\n    return this.userService.findOneById(id);\n  }\n\n  /**\n   * Create a new user.\n   * @param createUserDto - User data transfer object.\n   * @returns The created user.\n   */\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiBody({ type: CreateUserDto })\n  @ApiResponse({ status: 201, description: 'User created successfully', type: User })\n  @Auth(authTypes.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUsers(createUserDto);\n  }\n\n  /**\n   * Delete a user by ID.\n   * @param id - User ID.\n   * @returns A confirmation message.\n   */\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiQuery({ name: 'id', required: true, type: Number })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  @Delete()\n  public deleteUser(@Query('id', ParseIntPipe) id: number) {\n    return this.userService.deleteUser(id);\n  }\n\n  /**\n   * Edit an existing user.\n   * @param edituserDto - User data to update.\n   * @returns The updated user.\n   */\n  @ApiOperation({ summary: 'Edit a user' })\n  @ApiBody({ type: EditUserDto })\n  @ApiResponse({ status: 200, description: 'User updated successfully', type: User })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  @Patch()\n  public editedPost(@Body() edituserDto: EditUserDto) {\n    return this.userService.editUser(edituserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nUserModule -->\n\nPaginationProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmail\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            PaginationProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entitly';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { FindOneByEmail } from './provider/find-one-by-email';\nimport { MailModule } from 'src/mail/mail.module';\nimport { FindOneByGoogleIdProvider } from './provider/find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './provider/googleUserProvider';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PaginationProvider } from 'src/common/pagination/Provider/pagination.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    MailModule,\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    FindOneByEmail,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider,\n    PaginationProvider,\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                editUser\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    \n                                    Public\n                                FindOneById\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                GetOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, createUserProvider: CreateUserProvider, findOneByemail: FindOneByEmail, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/user.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByemail\n                                                  \n                                                        \n                                                                        FindOneByEmail\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new Google user'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Create a new Google user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Create a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a user'})@ApiResponse({status: 200, description: 'User deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Delete a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Edit user details'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Edit user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(paginationQueryDto: PaginationQueryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get all users with pagination'})@ApiResponse({status: 200, description: 'List of users returned successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Fetch paginated users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find a user by Google ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Find a user by Google ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get a user by ID'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Fetch a single user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find a user by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:83\n                        \n                    \n\n\n            \n                \n                        Find one user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        GetOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetOneByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get a user by email'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Get user by email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entitly';\nimport { Repository } from 'typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { FindOneByEmail } from './find-one-by-email';\nimport { EditUserDto } from '../DTOs/patch-user.dto';\nimport { GetuserParamDto } from '../DTOs/getUserparamdto';\nimport { FindOneByGoogleIdProvider } from './find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './googleUserProvider';\nimport { GoogleInterface } from 'src/auth/social/interfaces/user.interface';\nimport { PaginationProvider } from 'src/common/pagination/Provider/pagination.provider';\nimport { PaginationQueryDto } from 'src/common/pagination/pagination-query.dto';\nimport { Paginated } from 'src/common/pagination/Interfaces/paginatedInterface';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n/**\n * Service for handling user-related operations.\n */\n@ApiTags('Users')\n@Injectable()\nexport class UserService {\n  constructor(\n    /**\n     * Inject User repository.\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly findOneByemail: FindOneByEmail,\n\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  /**\n   * Fetch paginated users.\n   */\n  @ApiOperation({ summary: 'Get all users with pagination' })\n  @ApiResponse({ status: 200, description: 'List of users returned successfully' })\n  public async findAll(\n    paginationQueryDto: PaginationQueryDto,\n  ): Promise> {\n    return this.paginationProvider.paginatedQuery(\n      paginationQueryDto,\n      this.userRepository,\n    );\n  }\n\n  /**\n   * Fetch a single user by ID.\n   */\n  @ApiOperation({ summary: 'Get a user by ID' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  public async findOneById(id: number): Promise {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  /**\n   * Create a new user.\n   */\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User created successfully' })\n  public async createUsers(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUsers(createUserDto);\n  }\n\n  /**\n   * Find one user by ID.\n   */\n  @ApiOperation({ summary: 'Find a user by ID' })\n  public FindOneById(id: number): Promise {\n    return this.userRepository.findOneBy({ id });\n  }\n\n  /**\n   * Get user by email.\n   */\n  @ApiOperation({ summary: 'Get a user by email' })\n  public async GetOneByEmail(email: string) {\n    return await this.findOneByemail.findOneByEmail(email);\n  }\n\n  /**\n   * Delete a user by ID.\n   */\n  @ApiOperation({ summary: 'Delete a user' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  public async deleteUser(id: number) {\n    await this.userRepository.delete(id);\n    return { deleted: true, id };\n  }\n\n  /**\n   * Edit user details.\n   */\n  @ApiOperation({ summary: 'Edit user details' })\n  public async editUser(edituserDto: EditUserDto) {\n    let edit = await this.userRepository.findOneBy({\n      id: edituserDto.id,\n    });\n\n    edit.firstName = edituserDto.firstName ?? edit.firstName;\n    edit.lastName = edituserDto.lastName ?? edit.lastName;\n    edit.password = edituserDto.password ?? edit.password;\n    edit.email = edituserDto.email ?? edit.email;\n\n    return this.userRepository.save(edit);\n  }\n\n  /**\n   * Find a user by Google ID.\n   */\n  @ApiOperation({ summary: 'Find a user by Google ID' })\n  public async findOneByGoogleId(googleId: string) {\n    return this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  /**\n   * Create a new Google user.\n   */\n  @ApiOperation({ summary: 'Create a new Google user' })\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    return this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WebSocketGuardGuard.html":{"url":"guards/WebSocketGuardGuard.html","title":"guard - WebSocketGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    WebSocketGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/web-socket-guard/web-socket-guard.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Static\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/web-socket-guard/web-socket-guard.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/web-socket-guard/web-socket-guard.guard.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Socket } from 'socket.io';\nimport { verify } from 'jsonwebtoken';\n\n@Injectable()\nexport class WebSocketGuardGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    if (context.getType() !== 'ws') {\n      return true;\n    }\n\n    const client: Socket = context.switchToWs().getClient();\n    const { authurisation } = client.handshake.headers;\n\n    Logger.log({authurisation}, 'i have the auth')\n    return false;\n  }\n\n  static validateToken(client: Socket) {\n    const {authorisation} = client.handshake.headers\n    Logger.log({authorisation})\n\n    const token = Array.isArray(authorisation) ? authorisation[0].split(' ')[1] : authorisation.split(' ')[1];\n\n    const payload = verify(token, 'secret')\n\n    return payload\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebSocketModule.html":{"url":"modules/WebSocketModule.html","title":"module - WebSocketModule","body":"\n                   \n\n\n\n\n    Modules\n    WebSocketModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WebSocketModule\n\n\n\ncluster_WebSocketModule_exports\n\n\n\ncluster_WebSocketModule_imports\n\n\n\n\nMessageModule\n\nMessageModule\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nWebSocketModule -->\n\nMessageModule->WebSocketModule\n\n\n\n\n\nWebsocketGateway \n\nWebsocketGateway \n\nWebsocketGateway  -->\n\nWebSocketModule->WebsocketGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web-socket/web-socket.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            web socket module\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            MessageModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WebsocketGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessageModule } from 'src/messages/messages.module';\nimport { WebsocketGateway } from './websocketEvents/websocket.gateway';\n\n/**web socket module */\n@Module({\n    imports: [MessageModule],\n    providers:[WebsocketGateway],\n    exports: [WebsocketGateway],\n})\n\n/**websocket class */\nexport class WebSocketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketGateway.html":{"url":"classes/WebsocketGateway.html","title":"class - WebsocketGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/websocketEvents/websocket.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                WebSocket gateway handling real-time message exchanges.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageService: MessageService)\n                    \n                \n                        \n                            \n                                Defined in src/web-socket/websocketEvents/websocket.gateway.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageService\n                                                  \n                                                        \n                                                                        MessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/web-socket/websocketEvents/websocket.gateway.ts:22\n                        \n                    \n\n            \n                \n                    websocket server instance\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:29\n                        \n                    \n\n\n            \n                \n                        Handles a new client connection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The connected client socket.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles client disconnection.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The disconnected client socket.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('sendMessage')\n                \n            \n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:47\n                        \n                    \n\n\n            \n                \n                        Handles an incoming message from a client.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The client socket sending the message.\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The message payload containing text, file URL, chat room ID, and user details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { ActiveUserData } from 'src/auth/interface/activeInterface';\nimport { MessageType } from 'src/messages/enum/message-type ';\nimport { MessageService } from 'src/messages/provider/message.service';\n\n/**\n * WebSocket gateway handling real-time message exchanges.\n */\n@WebSocketGateway({ cors: true })\nexport class WebsocketGateway\n  implements OnGatewayConnection, OnGatewayDisconnect\n{\n  /**websocket server instance */\n  @WebSocketServer()\n  server: Server;\n\n  constructor(private readonly messageService: MessageService) {}\n  /**\n   * Handles a new client connection.\n   * @param client The connected client socket.\n   */\n  async handleConnection(client: Socket) {\n    console.log(`Client connected: ${client.id}`);\n  }\n\n  /**\n   * Handles client disconnection.\n   * @param client The disconnected client socket.\n   */\n  async handleDisconnect(client: Socket) {\n    console.log(`Client disconnected: ${client.id}`);\n  }\n\n  /**\n   * Handles an incoming message from a client.\n   * @param client The client socket sending the message.\n   * @param payload The message payload containing text, file URL, chat room ID, and user details.\n   */\n  @SubscribeMessage('sendMessage')\n  async handleMessage(\n    client: Socket,\n    payload: {\n      text?: string;\n      fileUrl?: string;\n      chatRoomId: number;\n      user: ActiveUserData;\n    },\n  ) {\n    console.log('Received message:', payload);\n\n    // Save the message to the database\n    const savedMessage = await this.messageService.create(\n      {\n        text: payload.text,\n        chatRoomId: payload.chatRoomId,\n        messageType: MessageType.FILE,\n      },\n      payload.user,\n      undefined,\n    );\n\n    // Emit the saved message to all connected clients\n    this.server.emit('receiveMessage', savedMessage);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refreshTokenDto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/userDto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n            guard\n            AuthGuardGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/web-socket-guard/web-socket-guard.guard.ts\n            \n            guard\n            WebSocketGuardGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interface/activeInterface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/middlewares/web-socket.middleware.ts\n            \n            variable\n            SocketAuthMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/middlewares/web-socket.middleware.ts\n            \n            type alias\n            SocketIoMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/interfaces/user.interface.ts\n            \n            interface\n            GoogleInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/create-chat-room.dto.ts\n            \n            class\n            CreateChatRoomDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/update-chat-room.dto.ts\n            \n            class\n            UpdateChatRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            controller\n            ChatRoomController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.entity.ts\n            \n            entity\n            ChatRoom\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/providers/chatrooms/chatrooms.service.ts\n            \n            injectable\n            ChatRoomService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                        src/cloudinary-provider/cloudinary-provider.ts\n            \n            variable\n            CloudinaryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cloudinary-provider/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptor/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/Interfaces/paginatedInterface.ts\n            \n            class\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/Provider/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.provider.ts\n            \n            injectable\n            MailProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/dtos/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/messages/dtos/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/messages/message.entity.ts\n            \n            entity\n            Message\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessageController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/messages/provider/message.service.ts\n            \n            injectable\n            MessageService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/getUserparamdto.ts\n            \n            class\n            GetuserParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/users/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-email.ts\n            \n            injectable\n            FindOneByEmail\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-googleId.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/provider/googleUserProvider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/provider/user.service.ts\n            \n            injectable\n            UserService\n            \n                90 %\n                (10/11)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/user.entitly.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/web-socket/interfaces/websockets-message.interface.ts\n            \n            interface\n            ServerToClientEvents\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/web-socket/websocketEvents/websocket.gateway.ts\n            \n            class\n            WebsocketGateway\n            \n                83 %\n                (5/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.4.15\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.7\n        \n            cloudinary : ^2.5.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.1\n        \n            multer : ^1.4.5-lts.1\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authTypes   (src/.../authTypes.enum.ts)\n                        \n                        \n                            ChatRoomType   (src/.../chatroomType.ts)\n                        \n                        \n                            MessageType   (src/.../message-type .ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        authTypes\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/chatrooms/enums/chatroomType.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatRoomType\n                    \n                \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n\n    src/messages/enum/message-type .ts\n    \n        \n            \n                \n                    \n                        \n                        MessageType\n                    \n                \n                        \n                            \n                                 TEXT\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 AUDIO\n                            \n                        \n                        \n                            \n                                Value : audio\n                            \n                        \n                        \n                            \n                                 FILE\n                            \n                        \n                        \n                            \n                                Value : file\n                            \n                        \n            \n        \n\n    src/users/Enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nrealTimeChat (NestJS Project)\nThis is a NestJS project bootstrapped using the Nest CLI.\nGetting Started\nPrerequisites\n\nNode.js (LTS enforced)\nnpm\n\nInstallation\nClone the repository and install dependencies:\nExample :git clone https://github.com/phertyameen/realTimeChat.git\ncd realTimeChat\nnpm install\n\n# Running the Application\n\nStart the development server:\n```npm run start\n\nFor hot reload:\n```npm run start:dev\n\n# Project Structure\n\nsrc/ - Main application source code\nmain.ts - Entry point of the application\napp.module.ts - Root module with TypeORM connection\nconfig folder - contains appConfig and database configurations\napp.controller.ts - Default controller\napp.service.ts - Default service\n\n# Installed Packages\n\n@nestjs/config - Configuration management\n@nestjs/typeorm - TypeORM integration\nclass-validator - Validation utilities\nclass-transformer - Transformation utilities\n\n#Rules\n\nDo not push directly to any branch.\nAlways create a new branch for your changes.\nOpen a pull request for review before merging.\nAlways use multi-line comment i.e (/**...*/) comment system instead of the double slash (//) for uproper documentation\n\n#The keyboard shortcut for commenting\nMulti-line comment: Shift + Alt + A (Windows/Linux) or Shift + Option + A (Mac)\n\n#Useful Commands\nnpm run build - Build the project\nnpm run test - Run tests\n\n#License\nThis project is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CloudinaryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebSocketModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_CloudinaryModule\n\n\n\ncluster_CloudinaryModule_exports\n\n\n\ncluster_CloudinaryModule_providers\n\n\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_WebSocketModule\n\n\n\ncluster_WebSocketModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatRoomService \n\nChatRoomService \n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nWebSocketModule -->\n\nMessageModule->WebSocketModule\n\n\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nWebsocketGateway \n\nWebsocketGateway \n\nWebsocketGateway  -->\n\nWebSocketModule->WebsocketGateway \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\nUserModule -->\n\nPaginationProvider->UserModule\n\n\n\nAppModule -->\n\nPaginationProvider->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\nCloudinaryService \n\nCloudinaryService \n\n\n\nCloudinaryModule\n\nCloudinaryModule\n\nMessageModule -->\n\nCloudinaryModule->MessageModule\n\n\n\nCloudinaryService  -->\n\nCloudinaryModule->CloudinaryService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nMessageModule -->\n\nCloudinaryService->MessageModule\n\n\n\nCloudinaryModule -->\n\nCloudinaryService->CloudinaryModule\n\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SocketIoMiddleware   (src/.../web-socket.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/middlewares/web-socket.middleware.ts\n    \n    \n        \n            \n                \n                    \n                    SocketIoMiddleware\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            CloudinaryProvider   (src/.../cloudinary-provider.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            SocketAuthMiddleware   (src/.../web-socket.middleware.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const user: ActiveUserData = request[REQUEST_USER_KEY]\n    return field ? user?.[field] : user \n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: authTypes[]) => \n    SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/cloudinary-provider/cloudinary-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CloudinaryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: 'Cloudinary',\n  useFactory: (configService: ConfigService) => {\n    return cloudinary.config({\n      cloud_name: configService.get('CLOUDINARY_CLOUD_NAME'),\n      api_key: configService.get('CLOUDINARY_API_KEY'),\n      api_secret: configService.get('CLOUDINARY_API_SECRET'),\n    });\n  },\n  inject: [ConfigService],\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/middlewares/web-socket.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SocketAuthMiddleware\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ():SocketIoMiddleware => {\n    return (client, next) => {\n        try {\n            WebSocketGuardGuard.validateToken(client)\n        } catch (error) {\n            next(error)\n        }\n    }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
