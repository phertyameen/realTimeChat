var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.69,1,2.315]],["body/guards/AccessTokenGuard.html",[1,3.05,2,2.793,3,0.158,4,0.14,5,0.14,6,5.381,7,4.401,8,3.118,9,0.293,10,1.065,11,1.659,12,5.381,13,2.055,14,5.018,15,1.507,16,3.611,17,5.243,18,4.46,19,4.401,20,0.682,21,3.611,22,1.336,23,0.017,24,1.07,25,0.572,26,0.975,27,4.333,28,4.401,29,3.611,30,3.543,31,1.019,32,2.068,33,5.018,34,4.226,35,3.611,36,0.449,37,1.488,38,0.627,39,3.274,40,0.527,41,1.828,42,2.356,43,2.793,44,2.793,45,2.55,46,2.356,47,2.793,48,2.793,49,3.118,50,0.158,51,0.05,52,2.056,53,1.645,54,2.55,55,4.333,56,3.118,57,2.45,58,3.611,59,3.334,60,3.611,61,3.611,62,2.55,63,2.54,64,1.72,65,2.194,66,3.274,67,1.133,68,3.118,69,3.611,70,3.118,71,3.611,72,2.194,73,1.828,74,3.611,75,1.065,76,1.731,77,3.611,78,3.611,79,0.011,80,0.011]],["title/interfaces/ActiveUserData.html",[81,2.169,82,2.485]],["body/interfaces/ActiveUserData.html",[3,0.229,4,0.203,5,0.203,9,0.426,23,0.016,25,0.635,26,1.082,50,0.229,79,0.014,80,0.014,81,3.647,82,4.179,83,3.704,84,4.529,85,0.929,86,4.529,87,0.973,88,2.27,89,2.1,90,3.096,91,5.304,92,1.824,93,7.201,94,2.479]],["title/controllers/AppController.html",[95,1.497,96,2.69]],["body/controllers/AppController.html",[3,0.221,4,0.196,5,0.196,9,0.411,10,1.329,15,1.519,20,0.598,23,0.017,31,1.027,36,0.404,40,0.739,50,0.221,51,0.093,53,1.658,75,1.073,79,0.013,80,0.013,85,0.896,92,1.653,95,2.795,96,4.422,97,1.988,98,4.367,99,6.804,100,6.139,101,1.519,102,5.058,103,2.462,104,4.135,105,4.367,106,1.988,107,3.571,108,5.058]],["title/modules/AppModule.html",[109,1.144,110,2.69]],["body/modules/AppModule.html",[1,1.892,3,0.136,4,0.121,5,0.121,23,0.017,25,0.308,36,0.49,37,1.283,40,0.455,41,1.576,50,0.136,51,0.043,76,1.492,79,0.01,80,0.01,96,3.752,97,1.775,104,3.923,105,2.687,109,1.596,110,5.321,111,1.347,112,1.168,113,1.576,114,1.576,115,1.416,116,2.69,117,1.576,118,2.687,119,2.687,120,2.687,121,3.923,122,4.212,123,4.212,124,4.212,125,3.923,126,4.212,127,2.286,128,1.576,129,1.576,130,3.113,131,3.467,132,3.467,133,3.026,134,3.113,135,3.899,136,5.033,137,3.899,138,3.113,139,4.516,140,3.113,141,2.198,142,1.283,143,3.113,144,2.687,145,1.892,146,2.198,147,3.113,148,3.113,149,3.113,150,3.113,151,3.899,152,4.516,153,2.031,154,3.189,155,3.113,156,2.407,157,3.113,158,4.516,159,4.516,160,3.113,161,4.516,162,2.687,163,3.113,164,3.189,165,3.113,166,3.113,167,3.113,168,3.113,169,3.113,170,3.113,171,3.113,172,3.113,173,3.113,174,2.687,175,3.113,176,2.687,177,3.113,178,3.113,179,3.113,180,1.576,181,3.113,182,1.668,183,3.113,184,3.113,185,3.113,186,3.113,187,3.113,188,3.113,189,3.113,190,3.899,191,3.899,192,2.198]],["title/injectables/AppService.html",[38,0.476,104,2.315]],["body/injectables/AppService.html",[3,0.233,4,0.207,5,0.207,9,0.433,10,1.372,20,0.63,23,0.017,31,1.082,36,0.344,38,0.808,40,0.778,50,0.233,51,0.096,75,1.131,79,0.014,80,0.014,85,0.944,92,1.706,100,6.25,103,2.542,104,4.4,193,1.672,194,4.601,195,5.329,196,6.011]],["title/controllers/AuthController.html",[95,1.497,131,2.485]],["body/controllers/AuthController.html",[3,0.134,4,0.119,5,0.119,9,0.249,10,0.948,11,1.516,13,0.962,15,0.921,20,0.528,22,1.035,23,0.017,24,0.829,25,0.574,26,0.755,31,1.175,36,0.428,40,0.448,50,0.134,51,0.072,53,1.006,59,3.458,64,1.531,67,0.962,75,0.948,79,0.01,80,0.01,85,1.263,87,1.26,95,2.071,97,1.206,101,1.342,103,2.276,106,1.206,131,2.915,197,2.648,198,2.001,199,3.298,200,2.303,201,4.345,202,3.155,203,3.068,204,3.904,205,3.068,206,4.433,207,2.395,208,2.648,209,3.519,210,4.468,211,4.468,212,4.999,213,3.068,214,3.068,215,2.715,216,4.478,217,2.372,218,4.211,219,3.068,220,3.777,221,3.068,222,3.858,223,3.068,224,3.068,225,5.27,226,1.553,227,3.155,228,2.001,229,3.068,230,3.068,231,3.068,232,1.864,233,3.068,234,3.203,235,2.648,236,2.372,237,2.001,238,2.648,239,2.372,240,2.648,241,1.864,242,3.438,243,4.015,244,4.55,245,1.553,246,3.068,247,3.068,248,1.747,249,1.756,250,3.068,251,2.648,252,3.068,253,3.068,254,2.915,255,3.777,256,4.468,257,2.915,258,4.468,259,3.068,260,3.068,261,3.068,262,3.068,263,3.068]],["title/guards/AuthGuardGuard.html",[0,2.69,154,2.69]],["body/guards/AuthGuardGuard.html",[0,2.194,1,4.045,2,4.784,3,0.136,4,0.12,5,0.12,7,2.194,9,0.252,10,0.957,11,1.527,12,6.243,13,2.024,15,1.355,20,0.533,22,1.045,23,0.017,24,0.836,25,0.447,26,0.762,27,3.894,28,4.113,30,4.113,31,0.916,32,1.859,34,2.741,36,0.43,38,0.563,39,3.464,40,0.454,44,2.403,45,2.194,49,2.682,50,0.136,51,0.073,52,1.769,53,2.115,56,3.894,57,2.289,59,1.489,63,1.573,64,1.065,67,0.975,73,1.573,75,0.659,76,2.162,79,0.01,80,0.01,85,0.799,89,1.019,103,2.087,153,2.027,154,3.184,156,4.106,216,4.106,237,4.036,241,1.888,245,1.573,248,3.317,249,1.221,264,4.583,265,2.682,266,4.51,267,4.51,268,5.309,269,4.51,270,4.51,271,3.107,272,7.06,273,3.107,274,3.107,275,3.184,276,3.488,277,3.488,278,4.51,279,2.682,280,3.107,281,2.403,282,3.107,283,2.162,284,2.682,285,4.51,286,3.107,287,3.107,288,3.107,289,2.027,290,3.107,291,3.107,292,3.107,293,3.107,294,3.107,295,2.403,296,3.107,297,3.107,298,3.107,299,3.107,300,3.107,301,3.107,302,3.107,303,3.107,304,3.107,305,3.107]],["title/modules/AuthModule.html",[109,1.144,121,2.315]],["body/modules/AuthModule.html",[1,2.149,3,0.155,4,0.137,5,0.137,7,2.496,23,0.017,36,0.49,40,0.516,41,1.79,42,2.307,46,2.307,47,2.734,50,0.155,51,0.068,59,1.695,79,0.011,80,0.011,97,1.944,109,1.713,111,1.53,112,1.327,113,1.79,114,1.79,115,1.609,116,2.887,117,2.887,121,4.615,125,3.005,127,2.503,128,1.79,129,1.79,131,3.72,133,2.013,135,3.052,151,3.052,153,2.307,190,3.052,191,3.052,234,4.5,235,3.052,279,3.052,306,3.052,307,3.052,308,3.052,309,3.78,310,3.609,311,3.835,312,4.093,313,4.093,314,3.536,315,3.72,316,2.65,317,3.492,318,3.536,319,3.536,320,3.536,321,3.052,322,3.536,323,3.536,324,3.536,325,3.226,326,3.536,327,3.536,328,3.536,329,3.536,330,2.734,331,3.536,332,3.052,333,3.536,334,3.536,335,3.052,336,3.052,337,3.536,338,3.536,339,3.536]],["title/injectables/AuthService.html",[38,0.476,234,2.315]],["body/injectables/AuthService.html",[3,0.165,4,0.146,5,0.146,9,0.306,10,1.098,11,1.698,13,1.852,15,1.554,20,0.698,22,1.367,23,0.017,24,1.094,25,0.585,26,0.997,31,1.05,36,0.443,37,2.432,38,0.646,40,0.551,50,0.165,51,0.081,53,1.935,59,2.479,67,1.184,75,1.098,79,0.011,80,0.011,85,0.668,87,0.7,103,2.496,106,2.32,193,1.184,199,2.772,200,2.463,201,3.652,202,4.483,204,4.043,206,3.85,217,3.999,218,4.276,220,2.461,226,1.909,234,3.143,236,2.917,239,2.917,248,2.148,312,4.276,313,4.355,316,2.022,321,3.257,325,2.461,340,3.257,341,2.461,342,3.202,343,3.772,344,5.172,345,3.772,346,3.772,347,5.172,348,2.461,349,2.292,350,3.772,351,3.772,352,3.772]],["title/injectables/BcryptProvider.html",[38,0.476,317,2.69]],["body/injectables/BcryptProvider.html",[3,0.179,4,0.159,5,0.159,9,0.333,10,1.162,11,2.026,20,0.647,22,1.268,23,0.017,24,1.015,25,0.542,26,0.925,31,1.111,32,2.709,36,0.397,38,0.821,40,0.599,50,0.179,51,0.075,52,3.116,57,2.151,67,1.933,75,1.162,79,0.012,80,0.012,85,0.726,92,1.952,103,2.583,180,3.466,193,1.287,200,2.525,309,2.933,317,4.349,353,3.541,354,4.725,355,4.725,356,4.725,357,4.725,358,5.674,359,4.101,360,5.473,361,4.725,362,5.318,363,4.101,364,5.473,365,3.541,366,3.864,367,4.725,368,2.492,369,4.101,370,4.101,371,5.473,372,4.101,373,4.101,374,4.101]],["title/modules/ChatModule.html",[109,1.144,122,2.485]],["body/modules/ChatModule.html",[3,0.202,4,0.179,5,0.179,23,0.017,36,0.469,40,0.674,50,0.202,51,0.063,79,0.013,80,0.013,85,0.818,87,1.097,97,2.324,109,2.136,111,1.998,112,1.732,113,2.337,114,2.337,115,2.101,116,3.302,117,3.302,122,4.826,127,2.993,128,2.337,129,2.337,133,2.629,141,3.259,142,1.903,375,3.985,376,3.985,377,3.985,378,4.691,379,4.616,380,2.969,381,4.606,382,3.985,383,4.616,384,3.985,385,3.57,386,4.616]],["title/entities/ChatRoom.html",[380,1.734,387,1.649]],["body/entities/ChatRoom.html",[3,0.17,4,0.151,5,0.151,9,0.316,20,0.795,23,0.017,24,1.111,25,0.74,36,0.387,50,0.17,51,0.053,79,0.011,80,0.011,85,0.688,87,1.286,89,1.73,92,1.392,94,1.891,101,2.019,209,2.361,283,2.53,380,2.925,387,2.593,388,2.743,389,3.354,390,5.992,391,2.054,392,3.412,393,5.55,394,5.173,395,3.885,396,2.671,397,3.442,398,4.634,399,3.885,400,3.005,401,3.726,402,4.556,403,3.726,404,4.081,405,3.885,406,5.007,407,3.004,408,4.523,409,3.885,410,3.354,411,5.277,412,4.556,413,4.081,414,3.885,415,3.442,416,4.556,417,3.354,418,1.458,419,2.361,420,3.004,421,3.885,422,3.354,423,3.885,424,3.354,425,3.354,426,3.885]],["title/controllers/ChatRoomController.html",[95,1.497,381,2.69]],["body/controllers/ChatRoomController.html",[3,0.131,4,0.116,5,0.116,9,0.244,10,0.932,20,0.778,22,1.476,23,0.017,24,1.182,25,0.631,26,1.077,31,1.336,36,0.393,40,0.438,50,0.131,51,0.041,53,0.983,75,1.397,79,0.009,80,0.009,94,2.722,95,1.178,97,1.178,101,1.977,107,2.116,198,1.955,228,2.866,232,4,249,1.178,378,3.16,381,3.102,384,2.587,391,2.4,396,3.332,427,3.793,428,3.397,429,5.2,430,2.36,431,3.736,432,3.793,433,3.793,434,5.2,435,3.393,436,2.997,437,5.221,438,4.393,439,2.997,440,2.587,441,3.872,442,2.997,443,4.043,444,2.997,445,2.587,446,4.393,447,2.997,448,2.587,449,4.393,450,2.997,451,3.672,452,2.997,453,4.393,454,2.997,455,2.587,456,4.404,457,4.393,458,2.997,459,2.116,460,2.997,461,5.829,462,1.955,463,3.397,464,2.587,465,2.997,466,2.997,467,2.997,468,2.997,469,2.997,470,2.587,471,2.997,472,2.997,473,2.997,474,2.997,475,5.2,476,2.997,477,2.997,478,2.997,479,4.393,480,2.997,481,2.997]],["title/injectables/ChatRoomService.html",[38,0.476,378,2.315]],["body/injectables/ChatRoomService.html",[3,0.097,4,0.086,5,0.086,9,0.181,10,0.744,11,2.096,13,1.542,15,1.053,20,0.727,22,1.376,23,0.017,24,1.141,25,0.61,26,1.004,31,1.206,32,2.842,36,0.397,38,0.438,40,0.325,50,0.097,51,0.059,57,2.488,63,3.114,64,2.169,67,1.986,75,1.205,79,0.007,80,0.007,85,0.394,87,0.804,94,2.613,106,1.378,142,0.918,193,0.699,378,2.13,380,2.948,382,1.923,391,2.22,392,3.879,396,2.873,406,1.573,418,0.836,419,1.354,420,1.722,422,1.923,428,3.352,430,1.786,431,3.207,432,3.026,433,3.742,435,2.287,437,4.593,440,3.026,441,3.248,443,3.06,445,3.026,448,3.026,455,3.026,456,4.014,462,1.453,463,2.711,464,1.923,482,1.923,483,3.505,484,3.505,485,2.227,486,2.847,487,2.634,488,2.227,489,3.505,490,3.505,491,2.227,492,2.711,493,2.227,494,2.227,495,2.227,496,2.227,497,3.505,498,2.227,499,2.227,500,1.923,501,1.923,502,1.268,503,1.923,504,1.268,505,1.354,506,2.227,507,2.227,508,3.505,509,2.227,510,4.334,511,4.334,512,2.227,513,2.227,514,3.505,515,3.774,516,2.227,517,2.227,518,2.227,519,4.915,520,2.227,521,3.026,522,2.227,523,3.505,524,2.227,525,2.227,526,2.227,527,2.227,528,2.227,529,4.334,530,4.334,531,2.475,532,2.227,533,2.227,534,3.026,535,2.227,536,1.573,537,2.227,538,1.923,539,1.722,540,3.505,541,1.923,542,3.505,543,2.227,544,3.505,545,2.227,546,2.227,547,2.227,548,2.227]],["title/classes/CreateChatRoomDto.html",[51,0.052,441,2.315]],["body/classes/CreateChatRoomDto.html",[3,0.2,4,0.178,5,0.178,9,0.372,20,0.768,23,0.017,24,1.205,25,0.741,26,0.994,36,0.419,50,0.2,51,0.089,76,2.195,79,0.013,80,0.013,89,1.928,92,1.552,94,2.33,101,1.952,396,3.471,406,4.589,420,3.541,441,3.575,549,1.887,550,5.921,551,3.541,552,6.499,553,3.949,554,4.579,555,4.579,556,4.579,557,4.579,558,4.549,559,3.953,560,4.579,561,3.541,562,4.549,563,4.579,564,4.153,565,5.882,566,2.084,567,2.607,568,4.579]],["title/injectables/CreateGoogleUserProvider.html",[38,0.476,569,2.315]],["body/injectables/CreateGoogleUserProvider.html",[3,0.146,4,0.13,5,0.13,9,0.272,10,1.01,11,1.592,13,1.05,15,1.429,20,0.562,22,1.102,23,0.017,24,0.882,25,0.471,26,0.804,31,0.966,32,1.961,36,0.427,38,0.594,40,0.489,50,0.146,51,0.065,53,1.097,57,1.315,63,1.694,64,2.267,65,2.034,67,1.05,72,2.034,73,1.694,75,0.71,79,0.01,80,0.01,85,1.205,87,1.405,88,2.059,101,1.005,103,1.315,106,1.87,142,1.379,193,1.05,200,1.984,207,2.55,241,2.034,242,3.104,243,3.611,245,1.694,249,1.315,254,2.183,255,3.104,257,3.104,289,2.183,368,2.034,387,2.059,392,2.709,397,3.611,418,1.256,419,2.034,430,2.805,486,3.052,487,2.891,502,1.906,504,1.906,569,2.891,570,2.889,571,3.359,572,3.679,573,5.204,574,4.107,575,3.22,576,4.107,577,2.183,578,3.347,579,4.107,580,3.932,581,2.363,582,2.588,583,3.679,584,3.347,585,4.757,586,3.347,587,3.104,588,2.891,589,4.778,590,4.757,591,3.347,592,2.889,593,2.363,594,2.588,595,2.889,596,3.347,597,3.347,598,3.347]],["title/classes/CreateUserDto.html",[51,0.052,599,2.042]],["body/classes/CreateUserDto.html",[3,0.085,4,0.076,5,0.076,9,0.158,11,0.56,20,0.693,23,0.017,24,1.123,25,0.691,26,0.991,31,0.805,36,0.345,50,0.138,51,0.063,52,1.109,57,0.766,62,1.375,73,1.594,75,0.841,76,2.397,79,0.007,80,0.007,85,1.199,87,1.179,89,1.033,90,2.321,92,1.938,94,1.633,101,1.761,180,3.585,207,1.688,215,1.184,220,2.055,245,0.986,249,1.558,275,2.224,276,1.506,277,1.506,283,1.901,295,2.436,380,2.276,391,1.079,400,2.258,403,2.224,408,1.271,415,2.055,418,0.731,549,0.803,553,3.251,558,1.506,559,1.682,561,1.506,562,2.436,564,3.216,566,0.886,567,1.109,572,2.436,575,2.276,599,2.125,600,4.683,601,1.375,602,2.224,603,3.066,604,4.619,605,2.587,606,2.125,607,2.587,608,4.139,609,5.631,610,2.436,611,2.719,612,1.948,613,1.948,614,4.229,615,3.932,616,3.932,617,2.719,618,3.932,619,4.619,620,2.719,621,4.619,622,1.948,623,1.948,624,3.932,625,4.918,626,2.719,627,1.948,628,2.719,629,1.948,630,2.719,631,2.768,632,1.948,633,1.948,634,1.948,635,2.719,636,2.224,637,2.224,638,1.948,639,1.948,640,2.719,641,2.436,642,2.719,643,2.971,644,1.948,645,1.948,646,1.948,647,2.719,648,2.719,649,2.719,650,2.719,651,2.719,652,2.719,653,2.073,654,2.436,655,3.142,656,4.317,657,2.719,658,2.719,659,2.719,660,1.948,661,2.436,662,3.867,663,2.436,664,1.948,665,3.216,666,1.948,667,1.948,668,2.436,669,2.224,670,2.41,671,1.682,672,3.423,673,2.719,674,2.719,675,3.423,676,2.719,677,5.228,678,1.506,679,2.719,680,1.506,681,1.682,682,1.682,683,2.719,684,1.682,685,1.914,686,1.375,687,1.682,688,1.682,689,3.423,690,2.719,691,1.682,692,1.682,693,2.719,694,1.682,695,1.682,696,1.682,697,1.682,698,2.719,699,1.682,700,3.423,701,1.682,702,1.682,703,2.055,704,1.506,705,1.682]],["title/injectables/CreateUserProvider.html",[38,0.476,706,2.315]],["body/injectables/CreateUserProvider.html",[3,0.116,4,0.103,5,0.103,9,0.216,10,0.853,11,1.393,13,1.26,15,1.621,20,0.475,22,0.931,23,0.017,24,0.745,25,0.535,26,0.679,31,0.816,32,1.656,34,2.441,36,0.408,37,2.389,38,0.502,40,0.388,50,0.116,51,0.036,53,0.871,57,1.579,63,2.451,64,2.169,65,3.28,67,1.52,72,2.441,73,2.732,75,0.564,79,0.009,80,0.009,85,1.223,87,1.38,88,1.738,90,1.095,101,0.798,106,2.121,112,1.507,142,1.095,180,2.451,182,3.106,193,0.834,200,1.736,209,1.615,241,1.615,242,2.621,243,3.521,245,1.345,249,1.903,254,1.734,255,3.159,257,2.621,289,2.621,309,3.644,316,1.424,349,1.615,366,2.836,387,1.738,397,3.521,418,0.997,430,1.656,462,1.734,486,2.922,487,3.28,501,3.468,502,1.513,504,1.513,541,2.295,571,2.836,577,1.734,581,1.877,582,2.055,583,3.107,587,2.621,592,2.295,594,3.107,599,3.392,602,2.836,706,2.441,707,4.181,708,2.295,709,3.468,710,3.107,711,2.658,712,3.107,713,2.658,714,3.468,715,5.398,716,2.658,717,4.017,718,3.468,719,4.181,720,2.658,721,3.468,722,3.107,723,3.468,724,4.174,725,1.734,726,1.877,727,2.658,728,4.181,729,3.745,730,4.843,731,2.658,732,4.017,733,3.468,734,4.017,735,4.017,736,4.017,737,4.017,738,4.017,739,4.017,740,4.017,741,2.658,742,4.017,743,2.658,744,2.658,745,3.468,746,2.658,747,2.658]],["title/injectables/DataResponseInterceptor.html",[38,0.476,192,2.69]],["body/injectables/DataResponseInterceptor.html",[3,0.212,4,0.188,5,0.188,9,0.394,10,1.296,20,0.574,22,1.125,23,0.017,24,0.9,25,0.481,26,0.82,28,4.948,30,3.428,31,0.986,36,0.394,38,0.763,40,0.709,44,5.165,45,3.428,50,0.212,51,0.067,52,2.764,75,1.03,79,0.013,80,0.013,88,2.642,192,4.311,193,1.523,536,3.428,748,5.271,749,5.271,750,4.191,751,6.105,752,6.105,753,5.766,754,7.008,755,4.855,756,6.105,757,4.855,758,4.855,759,4.855,760,4.855,761,4.855,762,4.855,763,4.855]],["title/classes/EditUserDto.html",[51,0.052,764,2.485]],["body/classes/EditUserDto.html",[3,0.208,4,0.185,5,0.185,9,0.387,20,0.563,23,0.017,25,0.472,26,1.019,36,0.427,50,0.208,51,0.083,79,0.013,80,0.013,85,0.843,88,2.609,89,1.977,94,2.161,101,1.43,391,2.46,400,3.433,401,4.257,430,1.961,459,4.257,549,1.961,553,2.892,566,2.166,588,3.664,599,2.551,601,3.36,669,3.36,670,3.664,726,3.36,764,3.933,765,5.205,766,4.662,767,5.205,768,5.713,769,6.029,770,6.029,771,5.205,772,6.029,773,4.759,774,4.759,775,5.205,776,4.109,777,4.109]],["title/injectables/FindOneByEmail.html",[38,0.476,778,2.315]],["body/injectables/FindOneByEmail.html",[3,0.157,4,0.139,5,0.139,9,0.291,10,1.059,11,1.651,13,1.123,15,1.499,20,0.59,22,1.156,23,0.017,24,0.925,25,0.494,26,0.843,31,1.013,32,2.366,36,0.401,38,0.623,39,3.255,40,0.523,50,0.157,51,0.049,63,2.525,64,1.71,65,2.176,67,1.123,72,2.176,73,2.525,75,0.76,79,0.011,80,0.011,85,1.1,87,1.432,90,2.962,92,1.638,103,1.961,106,1.961,142,1.476,182,3.328,193,1.123,200,2.058,209,2.176,249,1.961,289,3.255,387,2.159,418,1.343,486,3.446,487,3.489,502,2.039,504,2.039,505,3.774,515,3.522,571,3.522,577,2.336,593,3.522,655,3.077,719,3.091,724,3.858,725,2.336,729,3.858,778,3.774,779,4.44,780,3.091,781,4.307,782,3.581,783,3.522,784,4.307,785,4.989,786,3.581,787,3.858,788,2.769,789,3.581,790,3.581,791,3.581]],["title/injectables/FindOneByGoogleIdProvider.html",[38,0.476,792,2.315]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.187,4,0.166,5,0.166,9,0.348,10,1.194,11,1.809,13,1.342,15,1.69,20,0.665,22,1.304,23,0.017,24,1.044,25,0.558,26,0.951,31,0.868,36,0.431,37,1.763,38,0.703,40,0.625,50,0.187,51,0.059,67,1.342,75,0.908,79,0.012,80,0.012,85,0.758,87,1.287,92,1.659,103,2.212,106,2.212,142,1.763,193,1.342,200,2.254,226,2.165,391,2.29,418,1.605,486,3.203,487,3.822,502,2.436,504,2.436,505,3.42,571,3.974,575,3.041,577,2.791,606,3.016,655,3.371,725,2.791,779,4.864,781,4.859,788,3.308,792,3.42,793,3.693,794,4.859,795,4.278,796,4.859,797,4.278]],["title/injectables/GenerateTokensProvider.html",[38,0.476,310,2.042]],["body/injectables/GenerateTokensProvider.html",[3,0.12,4,0.106,5,0.106,9,0.223,10,0.872,11,1.774,13,1.548,15,1.235,17,5.086,18,3.814,19,3.87,20,0.583,22,1.27,23,0.017,24,0.915,25,0.543,26,0.992,31,1.113,36,0.413,37,1.129,38,0.685,40,0.4,41,1.387,42,1.787,46,2.681,50,0.12,51,0.038,53,1.617,54,1.934,57,1.077,59,3.449,66,4.172,67,1.29,75,0.872,79,0.009,80,0.009,82,2.681,85,0.873,87,1.364,88,1.779,90,1.129,91,1.934,94,2.21,106,1.615,193,0.86,200,2.21,201,2.902,206,3.831,215,2.498,216,4.541,222,3.548,226,2.08,227,2.902,248,2.808,249,2.154,310,2.203,316,1.468,341,1.787,342,2.993,348,1.787,349,1.665,387,1.779,391,1.878,419,1.665,437,3.814,486,1.313,636,2.902,654,3.178,722,3.178,798,4.238,799,2.119,800,4.11,801,5.323,802,4.11,803,4.11,804,2.74,805,4.11,806,2.74,807,4.11,808,4.732,809,4.11,810,5.872,811,4.238,812,2.74,813,3.548,814,5.481,815,5.481,816,2.74,817,4.11,818,3.178,819,2.365,820,2.74,821,2.74,822,2.365,823,2.365,824,2.365,825,2.365,826,2.365,827,2.365,828,4.11,829,2.74,830,2.902,831,4.11,832,4.11,833,2.365]],["title/classes/GetuserParamDto.html",[51,0.052,834,2.485]],["body/classes/GetuserParamDto.html",[3,0.222,4,0.197,5,0.197,9,0.412,20,0.6,23,0.017,25,0.675,26,1.06,36,0.405,50,0.222,51,0.1,79,0.013,80,0.013,85,0.898,89,2.057,94,2.249,101,1.524,391,2.439,392,3.573,400,3.573,401,4.431,549,2.091,566,2.309,567,2.889,775,4.38,834,4.094,835,4.38,836,6.275,837,5.073,838,5.073,839,5.073,840,5.073]],["title/controllers/GoogleAuthenticationController.html",[95,1.497,315,2.485]],["body/controllers/GoogleAuthenticationController.html",[3,0.162,4,0.144,5,0.144,9,0.302,10,1.086,13,1.165,15,1.537,20,0.439,22,0.861,23,0.017,24,0.689,25,0.368,26,0.628,31,1.039,36,0.441,40,0.542,50,0.162,51,0.051,53,1.218,59,3.024,75,0.788,79,0.011,80,0.011,85,1.211,87,1.227,95,2.301,97,1.46,101,1.116,198,2.423,199,1.991,200,2.098,207,3.969,208,3.207,212,4.418,228,2.423,232,3.11,237,2.423,238,3.207,240,3.207,241,2.257,242,3.338,243,3.819,245,1.88,249,2.011,251,3.207,254,2.423,255,3.338,257,3.338,311,3.767,315,3.819,330,2.872,573,4.418,575,3.337,581,2.623,582,2.872,588,3.11,593,2.623,714,4.418,841,3.957,842,3.207,843,3.714,844,5.446,845,3.207,846,4.572,847,4.418,848,3.714,849,3.714,850,4.418,851,5.117,852,3.207,853,3.207,854,3.207,855,3.714,856,3.714,857,3.714,858,3.714]],["title/injectables/GoogleAuthenticationService.html",[38,0.476,311,2.169]],["body/injectables/GoogleAuthenticationService.html",[3,0.111,4,0.098,5,0.098,9,0.206,10,0.823,11,1.354,13,1.879,15,1.583,19,3.722,20,0.623,22,0.899,23,0.017,24,0.719,25,0.467,26,0.655,31,0.956,36,0.402,37,2.648,38,0.485,39,2.531,40,0.371,41,1.285,46,1.656,47,1.963,50,0.111,51,0.035,52,1.445,53,1.544,54,1.792,55,2.191,57,2.353,59,3.156,63,1.285,64,1.329,65,1.542,66,2.531,67,1.477,72,1.542,73,2.383,75,0.823,79,0.008,80,0.008,85,0.834,87,1.267,89,1.272,90,1.94,91,1.792,103,1.525,106,2.353,112,1.455,182,1.36,193,0.796,199,2.079,200,1.688,207,3.6,215,2.357,226,1.285,249,2.072,289,1.656,310,3.529,311,2.209,316,1.36,325,1.656,341,1.656,342,2.996,348,1.656,349,1.542,391,1.329,424,3.349,430,1.046,505,1.542,575,3.153,588,3.203,595,3.349,602,2.739,605,3.072,606,2.825,607,3.072,636,2.739,641,3,709,2.191,722,3,745,2.191,783,2.739,787,1.963,798,1.963,801,5.169,818,4.076,830,3.722,844,4.903,845,3.349,846,3.906,850,2.191,853,2.191,854,2.191,859,4.903,860,2.191,861,5.679,862,5.988,863,5.271,864,3.879,865,3.349,866,3,867,4.065,868,2.538,869,2.538,870,2.538,871,4.708,872,2.191,873,2.538,874,2.191,875,2.538,876,2.538,877,3.879,878,2.538,879,2.538,880,2.538,881,2.538,882,3.879,883,2.538,884,2.538,885,2.538,886,2.538,887,2.538,888,2.538,889,3.879,890,2.538,891,2.538,892,2.538,893,2.538,894,2.538,895,2.538,896,2.538,897,2.191,898,2.538,899,2.538,900,2.538,901,2.538]],["title/modules/GoogleAuthticationModule.html",[109,1.144,902,2.69]],["body/modules/GoogleAuthticationModule.html",[3,0.223,4,0.197,5,0.197,23,0.017,36,0.44,40,0.743,50,0.223,51,0.07,79,0.013,80,0.013,97,2.471,109,2.049,111,2.202,112,1.909,113,2.576,114,2.576,115,2.315,116,3.453,117,2.576,127,3.182,128,2.576,129,2.576,311,4.246,315,4.451,330,3.935,332,4.393,575,2.315,841,3.935,852,4.393,902,5.265,903,4.393,904,5.089,905,5.089]],["title/interfaces/GoogleInterface.html",[81,2.169,580,2.485]],["body/interfaces/GoogleInterface.html",[3,0.21,4,0.186,5,0.186,9,0.39,23,0.017,24,1.294,25,0.692,50,0.21,79,0.013,80,0.013,81,3.451,83,3.389,85,0.85,89,1.987,90,3.029,92,2.087,391,2.077,575,3.023,580,3.954,605,4.553,606,3.74,607,4.553,631,3.683,643,3.954,906,4.144,907,6.061]],["title/classes/GoogleTokenDto.html",[51,0.052,846,2.485]],["body/classes/GoogleTokenDto.html",[3,0.232,4,0.205,5,0.205,9,0.43,20,0.626,23,0.016,25,0.688,36,0.342,50,0.232,51,0.099,59,3.549,79,0.014,80,0.014,85,0.938,89,2.112,92,1.906,101,1.591,549,2.183,566,2.41,670,4.219,846,4.713,908,5.562,909,4.572,910,5.296]],["title/injectables/HashingProvider.html",[38,0.476,309,2.042]],["body/injectables/HashingProvider.html",[3,0.198,4,0.175,5,0.175,9,0.367,10,1.238,20,0.689,22,1.351,23,0.017,24,1.081,25,0.578,26,0.985,31,1.184,32,2.812,36,0.291,38,0.728,40,0.66,50,0.198,51,0.089,79,0.012,80,0.012,85,0.8,92,1.988,180,2.287,193,1.417,202,4.117,309,3.125,336,6.506,355,5.035,356,5.035,357,5.035,358,5.575,361,5.035,362,5.575,365,3.9,366,4.117,368,3.544,911,3.9,912,5.832,913,4.518,914,5.832,915,6.824,916,4.518,917,5.832]],["title/modules/MailModule.html",[109,1.144,918,2.485]],["body/modules/MailModule.html",[3,0.176,4,0.156,5,0.156,23,0.017,36,0.48,37,1.654,40,0.586,41,2.032,50,0.176,51,0.055,64,1.376,76,1.924,79,0.012,80,0.012,87,0.744,88,1.737,109,1.83,111,1.737,112,1.506,113,2.032,114,2.032,115,1.826,116,3.084,117,3.084,127,2.73,128,2.032,129,2.032,133,2.286,136,4.657,144,3.465,145,3.278,146,2.834,174,3.465,176,3.465,199,2.151,283,1.924,685,3.278,733,3.465,918,4.666,919,3.465,920,3.465,921,3.465,922,4.933,923,4.014,924,4.657,925,3.465,926,4.014,927,5.26,928,3.104,929,4.014,930,4.014,931,5.395,932,4.014,933,5.395,934,4.014,935,4.014,936,4.014,937,4.014,938,4.014,939,4.014,940,4.014,941,4.014,942,4.014,943,4.014,944,4.014,945,4.014,946,4.014,947,4.014,948,4.014,949,4.014,950,3.465]],["title/injectables/MailProvider.html",[38,0.476,922,2.485]],["body/injectables/MailProvider.html",[3,0.196,4,0.174,5,0.174,9,0.364,10,1.231,11,1.85,13,1.406,15,1.743,20,0.686,22,1.344,23,0.017,24,1.262,25,0.575,26,0.98,30,3.164,31,0.91,32,1.847,36,0.439,37,1.847,38,0.725,40,0.654,50,0.196,51,0.062,53,1.469,67,1.406,79,0.012,80,0.012,87,1.262,90,1.847,106,1.761,145,2.724,146,3.164,193,1.406,200,2.306,419,2.724,833,5.009,922,3.785,927,3.869,928,3.466,951,3.869,952,6.433,953,4.482,954,6.803,955,4.482,956,4.482,957,4.482,958,4.482,959,4.482,960,4.482,961,4.482,962,4.482,963,4.482,964,4.482,965,5.802,966,3.869,967,4.482,968,4.482,969,4.482]],["title/classes/MatchPasswordsConstraint.html",[51,0.052,686,2.69]],["body/classes/MatchPasswordsConstraint.html",[3,0.102,4,0.091,5,0.091,9,0.19,10,0.774,11,0.673,20,0.431,22,0.845,23,0.017,24,1.122,25,0.674,26,0.616,31,1.177,36,0.374,50,0.159,51,0.069,52,2.076,57,0.92,62,3.16,73,2.557,75,0.95,76,2.146,79,0.008,80,0.008,85,1.138,87,1.075,90,1.845,92,1.916,94,1.307,180,3.597,207,1.255,215,1.423,220,1.528,245,1.185,249,1.759,275,3.566,276,2.819,277,2.819,283,2.146,295,1.811,380,2.298,391,0.802,400,2.076,403,1.653,408,1.528,415,2.378,418,0.878,549,0.965,553,3.522,558,1.811,561,1.811,562,2.819,564,3.566,566,1.065,567,1.333,572,1.811,575,2.037,599,1.953,600,3.461,601,1.653,602,1.653,603,1.811,604,5.004,605,1.528,606,1.255,607,1.528,608,3.566,610,1.811,611,2.021,614,3.781,615,3.147,616,3.147,617,2.021,618,3.147,619,3.864,620,2.021,621,4.725,624,4.361,625,5.082,626,2.021,628,2.021,630,2.021,631,2.215,635,2.021,636,1.653,637,1.653,640,2.021,641,1.811,642,2.021,643,2.378,647,2.021,648,2.021,649,2.021,650,2.021,651,2.021,652,2.021,653,2.491,654,1.811,655,2.707,656,3.864,657,2.021,658,2.021,659,2.021,661,1.811,662,4.482,663,1.811,665,2.574,668,1.811,669,2.574,670,2.72,671,2.021,672,4.361,673,3.147,674,3.864,675,5.224,676,3.147,677,5.55,678,1.811,679,3.147,680,1.811,681,2.021,682,2.021,683,3.864,684,2.021,685,2.215,686,2.574,687,3.147,688,3.147,689,5.004,690,4.361,691,3.147,692,2.021,693,3.147,694,2.021,695,2.021,696,3.147,697,3.147,698,3.147,699,2.021,700,3.864,701,2.021,702,2.021,703,2.378,704,1.811,705,2.021,970,3.645,971,2.342,972,2.342]],["title/entities/Message.html",[387,1.649,653,1.734]],["body/entities/Message.html",[3,0.183,4,0.162,5,0.162,9,0.34,20,0.815,23,0.017,25,0.702,36,0.401,50,0.183,51,0.057,79,0.012,80,0.012,87,1.313,89,1.818,92,1.747,101,2.07,380,3.379,385,3.234,387,2.399,388,2.953,391,2.132,393,4.787,394,5.37,398,4.81,407,3.234,412,5.718,413,5.122,415,3.617,418,1.569,653,2.523,973,3.611,974,5.37,975,5.329,976,6.22,977,5.545,978,5.545,979,4.183,980,4.183,981,5.545,982,4.183,983,4.183,984,4.183,985,6.22,986,3.234]],["title/controllers/MessageController.html",[95,1.497,987,2.69]],["body/controllers/MessageController.html",[3,0.155,4,0.137,5,0.137,9,0.287,10,1.049,11,2.13,20,0.73,22,1.431,23,0.017,24,1.145,25,0.699,26,1.044,31,1.254,36,0.319,40,0.516,50,0.155,51,0.049,53,1.159,64,1.212,67,1.938,75,1.311,79,0.011,80,0.011,92,1.969,95,1.39,97,1.39,101,1.855,107,2.496,198,2.307,226,3.126,228,4.51,232,3.753,249,1.39,391,1.695,396,1.79,430,2.038,431,3.226,435,3.72,443,2.496,451,4.589,459,3.492,470,3.052,492,4.41,653,2.81,897,3.052,975,4.41,987,3.492,988,3.052,989,3.536,990,5.332,991,3.536,992,3.052,993,4.945,994,3.536,995,5.332,996,3.052,997,4.945,998,3.536,999,3.052,1000,4.945,1001,3.536,1002,3.466,1003,3.052,1004,3.536,1005,3.052,1006,3.536,1007,3.536,1008,4.945,1009,2.734,1010,3.536,1011,3.536,1012,3.536,1013,3.536,1014,3.536,1015,3.536]],["title/modules/MessageModule.html",[109,1.144,123,2.485]],["body/modules/MessageModule.html",[3,0.203,4,0.18,5,0.18,23,0.017,36,0.478,40,0.678,50,0.203,51,0.064,79,0.013,80,0.013,87,1.1,97,2.332,109,1.965,111,2.009,112,1.741,113,2.349,114,2.349,115,2.112,116,3.311,117,3.311,123,4.832,127,3.003,128,2.349,129,2.349,133,2.643,141,3.277,142,1.913,380,2.7,385,3.589,653,2.112,680,3.589,987,4.618,1002,4.695,1003,4.007,1016,4.007,1017,4.007,1018,4.007,1019,4.642,1020,4.007,1021,4.642,1022,4.642]],["title/injectables/MessageService.html",[38,0.476,1002,2.315]],["body/injectables/MessageService.html",[3,0.124,4,0.11,5,0.11,9,0.23,10,0.895,11,2.042,13,1.58,15,1.267,20,0.704,22,1.381,23,0.017,24,1.105,25,0.591,26,1.007,31,1.132,32,2.739,36,0.403,38,0.527,40,0.414,50,0.124,51,0.039,57,2.342,63,2.822,64,2.042,67,2.029,75,1.069,79,0.009,80,0.009,87,0.526,92,1.99,142,1.169,193,0.89,380,2.712,391,1.911,396,2.135,418,1.064,419,1.724,430,2.298,431,2.752,435,3.285,443,3.555,451,3.555,486,3.313,492,4.312,500,2.449,502,1.615,503,2.449,504,1.615,505,3.06,515,3.937,521,2.449,531,2.003,536,2.003,538,2.449,539,2.193,653,3.024,974,5.145,975,4.608,986,2.193,992,3.641,995,4.347,996,3.641,999,3.641,1002,2.563,1005,4.814,1009,2.193,1020,2.449,1023,2.449,1024,2.836,1025,5.035,1026,5.035,1027,2.836,1028,4.218,1029,4.218,1030,2.836,1031,2.836,1032,2.836,1033,5.576,1034,2.836,1035,2.836,1036,4.218,1037,3.641,1038,2.003,1039,2.836,1040,2.836,1041,2.836,1042,2.836,1043,2.449,1044,2.836,1045,4.218,1046,2.836,1047,2.836,1048,4.218,1049,2.836,1050,2.836]],["title/classes/Paginated.html",[51,0.052,1051,2.69]],["body/classes/Paginated.html",[3,0.225,4,0.199,5,0.199,9,0.417,20,0.81,23,0.017,25,0.727,50,0.225,51,0.07,79,0.013,80,0.013,88,2.736,89,2.073,92,1.668,94,1.841,549,2.116,631,3.12,811,3.971,990,5.458,1051,4.464,1052,4.433,1053,5.297,1054,5.914,1055,5.135,1056,5.135,1057,5.135,1058,5.135,1059,5.135,1060,4.433,1061,5.135,1062,5.135,1063,5.135,1064,4.433,1065,5.135,1066,5.135]],["title/modules/PaginationModule.html",[109,1.144,124,2.485]],["body/modules/PaginationModule.html",[3,0.222,4,0.197,5,0.197,23,0.017,36,0.405,40,0.741,50,0.222,51,0.07,79,0.013,80,0.013,97,1.994,109,1.885,111,2.195,112,1.903,113,2.568,114,2.568,115,2.309,116,3.448,117,3.176,124,4.927,127,3.176,128,2.568,129,2.568,133,2.889,1067,4.38,1068,4.38,1069,4.38,1070,5.078,1071,5.073,1072,5.073,1073,5.073,1074,5.073]],["title/injectables/PaginationProvider.html",[38,0.476,1070,2.485]],["body/injectables/PaginationProvider.html",[3,0.148,4,0.131,5,0.131,9,0.275,10,1.017,11,1.601,13,1.061,15,1.439,20,0.566,22,1.289,23,0.017,24,0.888,25,0.551,26,0.81,31,0.686,32,1.975,34,3.884,36,0.428,37,1.393,38,0.598,40,0.494,43,2.614,50,0.148,51,0.046,53,1.108,57,2.741,64,1.158,67,1.503,75,0.717,79,0.01,80,0.01,88,1.463,94,1.717,153,2.205,193,1.061,200,1.995,232,2.911,418,1.268,430,1.393,486,3.064,536,3.929,631,2.054,643,2.205,753,2.918,811,2.614,1038,4.513,1051,3.383,1053,2.614,1054,2.918,1060,4.805,1064,2.918,1070,3.126,1075,2.918,1076,5.565,1077,3.38,1078,3.38,1079,3.38,1080,4.275,1081,3.38,1082,2.614,1083,3.38,1084,3.38,1085,3.38,1086,3.38,1087,3.38,1088,3.38,1089,3.38,1090,3.38,1091,4.791,1092,4.791,1093,3.38,1094,2.918,1095,2.387,1096,6.054,1097,6.974,1098,3.38,1099,2.918,1100,4.791,1101,3.38,1102,3.38,1103,4.791,1104,3.38,1105,3.38,1106,3.38,1107,3.38,1108,3.38,1109,2.918,1110,3.38,1111,3.38,1112,3.38,1113,3.38,1114,3.38,1115,3.38,1116,5.565,1117,3.38,1118,3.38,1119,3.38,1120,4.791,1121,3.38,1122,3.38,1123,3.38,1124,3.38,1125,3.38,1126,3.38,1127,3.38,1128,3.38]],["title/classes/PaginationQueryDto.html",[51,0.052,1080,2.69]],["body/classes/PaginationQueryDto.html",[3,0.218,4,0.193,5,0.193,9,0.405,20,0.734,23,0.017,25,0.615,26,1.195,36,0.322,50,0.218,51,0.085,79,0.013,80,0.013,89,2.035,94,2.225,101,1.864,283,2.975,531,4.382,549,2.054,564,4.772,566,2.268,703,4.049,1038,4.382,1080,4.382,1095,4.382,1129,5.835,1130,4.302,1131,4.799,1132,6.206,1133,4.984,1134,4.984,1135,6.759,1136,4.984,1137,4.984]],["title/classes/RefreshTokenDto.html",[51,0.052,204,2.315]],["body/classes/RefreshTokenDto.html",[3,0.229,4,0.203,5,0.203,9,0.425,20,0.618,23,0.017,25,0.684,36,0.337,50,0.229,51,0.099,79,0.014,80,0.014,85,0.926,89,2.096,92,1.898,101,1.571,201,5.21,204,3.885,206,4.171,549,2.156,553,3.885,566,2.38,670,3.885,1138,4.515,1139,6.394,1140,4.515,1141,5.23]],["title/injectables/RefreshTokensProvider.html",[38,0.476,312,2.315]],["body/injectables/RefreshTokensProvider.html",[3,0.156,4,0.139,5,0.139,9,0.29,10,1.057,11,1.65,13,1.947,15,1.496,17,5.556,18,4.435,19,4.381,20,0.589,22,1.154,23,0.017,24,0.924,25,0.494,26,0.842,31,0.725,36,0.447,37,2.557,38,0.622,40,0.522,41,1.809,42,2.331,46,2.331,50,0.156,51,0.079,53,2.034,54,2.523,57,1.958,59,3.239,62,2.523,67,1.799,68,3.085,75,0.758,79,0.011,80,0.011,85,0.633,87,0.924,91,2.523,103,1.958,182,1.915,193,1.121,200,2.056,204,3.965,206,4.257,226,1.809,239,2.763,248,2.034,310,3.325,312,3.027,316,1.915,325,2.331,341,2.331,342,3.218,348,2.331,349,2.171,368,3.027,588,2.171,799,2.763,818,2.763,819,3.085,822,3.085,823,3.085,824,3.085,825,3.085,826,3.085,827,3.085,830,3.517,1142,4.951,1143,4.981,1144,5.356,1145,3.573,1146,4.981,1147,3.573,1148,4.981,1149,3.085,1150,3.573,1151,3.573,1152,3.573,1153,3.085]],["title/interfaces/ServerToClientEvents.html",[81,2.169,1154,2.946]],["body/interfaces/ServerToClientEvents.html",[3,0.255,4,0.226,5,0.226,23,0.016,50,0.255,66,3.8,79,0.015,80,0.015,81,3.316,83,4.112,653,2.65,1154,5.273,1155,4.112,1156,5.028,1157,5.028,1158,5.824]],["title/classes/SignInDto.html",[51,0.052,218,2.315]],["body/classes/SignInDto.html",[3,0.214,4,0.19,5,0.19,9,0.398,20,0.726,23,0.017,25,0.608,36,0.316,50,0.214,51,0.096,79,0.013,80,0.013,85,0.867,87,1.304,89,2.012,90,2.984,92,1.855,101,1.844,180,3.664,218,4.272,400,3.495,549,2.018,553,3.73,566,2.228,669,4.334,670,4.075,1140,4.228,1159,4.228,1160,4.897,1161,4.897,1162,5.299,1163,6.138,1164,4.897]],["title/injectables/SignInProvider.html",[38,0.476,313,2.315]],["body/injectables/SignInProvider.html",[3,0.154,4,0.136,5,0.136,9,0.285,10,1.045,11,1.635,13,1.783,15,1.479,20,0.582,22,1.141,23,0.017,24,0.913,25,0.488,26,0.832,31,0.713,36,0.418,37,1.448,38,0.615,39,2.292,40,0.513,50,0.154,51,0.078,53,1.863,63,3.117,64,1.948,65,2.135,67,1.783,72,2.135,73,2.877,75,0.746,79,0.01,80,0.01,85,0.872,87,1.246,103,1.935,180,2.877,182,1.883,193,1.102,200,2.037,202,3.476,217,3.807,218,3.941,220,3.212,226,1.778,236,2.717,248,3.236,275,2.481,309,3.699,310,3.301,313,2.992,316,1.883,325,2.292,341,2.292,342,3.205,348,2.292,349,2.135,366,3.476,368,2.992,685,2.135,724,2.717,729,2.717,787,4.763,830,2.481,1037,4.907,1144,5.317,1149,3.033,1153,3.033,1165,4.907,1166,3.033,1167,3.514,1168,3.514,1169,5.684,1170,3.514,1171,3.514,1172,3.514,1173,4.923,1174,4.923,1175,3.514,1176,5.684,1177,3.514,1178,3.514,1179,3.514,1180,3.514]],["title/classes/UpdateChatRoomDto.html",[51,0.052,456,2.485]],["body/classes/UpdateChatRoomDto.html",[3,0.245,4,0.217,5,0.217,23,0.016,36,0.43,50,0.245,51,0.077,79,0.014,80,0.014,396,3.37,430,2.305,441,3.399,456,4.343,463,4.325,549,2.305,551,4.325,768,4.829,771,5.748,776,4.829,777,4.829,1181,4.829,1182,6.658]],["title/entities/User.html",[87,0.706,387,1.649]],["body/entities/User.html",[3,0.113,4,0.1,5,0.1,9,0.21,20,0.783,23,0.017,24,0.988,25,0.669,26,1.02,36,0.389,50,0.113,51,0.054,76,3.099,79,0.008,80,0.008,85,0.844,87,1.36,89,1.291,90,2.361,92,1.782,94,1.412,101,1.989,180,2.412,182,2.11,207,1.387,209,1.573,283,2.285,380,2.746,387,2.304,388,1.828,391,1.963,392,2.714,396,2.9,398,2.002,400,3.032,402,5.717,403,4.261,404,4.118,407,2.002,408,3.474,410,2.235,413,3.045,415,2.569,416,3.4,417,3.4,418,0.971,425,4.114,428,4.43,534,2.235,567,1.474,575,2.169,587,1.689,603,3.685,605,3.109,606,2.554,607,3.109,608,4.564,614,4.406,631,2.393,637,1.828,643,2.569,653,2.942,655,1.387,665,1.828,678,2.002,685,3.236,704,2.002,728,2.235,767,3.4,813,2.235,986,2.002,1009,3.685,1053,2.002,1162,3.4,1183,2.235,1184,3.938,1185,4.114,1186,2.589,1187,2.589,1188,5.729,1189,3.938,1190,3.938,1191,3.938,1192,6.464,1193,2.589,1194,2.589,1195,3.938,1196,2.589,1197,3.938,1198,2.589,1199,2.589,1200,2.589,1201,3.938,1202,2.589,1203,2.589,1204,2.589,1205,2.589,1206,3.938,1207,3.938,1208,3.938,1209,2.589,1210,2.589,1211,2.589,1212,2.002,1213,2.589,1214,2.589,1215,2.589,1216,2.589]],["title/controllers/UserController.html",[95,1.497,132,2.485]],["body/controllers/UserController.html",[3,0.086,4,0.076,5,0.076,9,0.16,10,0.674,15,0.591,20,0.542,22,1.062,23,0.017,24,1.091,25,0.533,26,0.956,31,1.195,32,1.889,36,0.347,40,0.287,50,0.086,51,0.027,53,0.645,64,1.842,75,0.973,76,1.523,79,0.007,80,0.007,85,1.292,87,1.434,88,2.326,94,2.525,95,1.569,97,0.774,101,1.376,103,1.801,106,0.774,107,1.39,132,2.072,198,1.284,200,2.33,215,1.93,227,3.55,228,1.284,232,1.93,241,1.196,242,3.28,243,3.28,244,3.447,245,0.996,248,1.121,249,2.313,254,2.989,255,2.989,257,3.507,283,2.197,342,0.896,391,2.462,392,3.702,397,2.605,430,1.646,435,2.605,451,3.993,459,2.243,461,3.956,462,1.284,581,3.236,583,2.456,587,2.072,599,3.344,610,4.551,614,3.507,653,1.445,661,2.456,668,3.544,685,3.267,710,2.456,712,1.522,723,2.742,726,2.243,764,4.071,766,1.522,783,2.243,834,3.839,847,4.641,866,2.456,1038,3.236,1082,3.544,1094,3.956,1095,4.791,1131,4.373,1217,1.699,1218,2.742,1219,2.742,1220,3.176,1221,3.993,1222,1.968,1223,3.176,1224,1.968,1225,1.968,1226,3.176,1227,1.699,1228,1.968,1229,3.176,1230,1.968,1231,1.968,1232,2.742,1233,2.742,1234,1.968,1235,1.968,1236,4.883,1237,1.968,1238,1.968,1239,2.742,1240,1.968,1241,2.742,1242,4.582,1243,1.968,1244,1.968,1245,1.968,1246,3.176,1247,3.176,1248,1.968,1249,1.968,1250,2.742,1251,3.956,1252,3.176,1253,3.993,1254,1.968,1255,1.968,1256,1.699,1257,1.699,1258,1.699,1259,4.582,1260,3.176,1261,1.968,1262,1.968,1263,3.176,1264,1.968,1265,1.968,1266,1.968,1267,1.968,1268,1.968,1269,1.968,1270,1.968,1271,1.968,1272,1.699,1273,1.968,1274,1.968,1275,1.968,1276,1.968,1277,1.968]],["title/modules/UserModule.html",[109,1.144,125,2.315]],["body/modules/UserModule.html",[3,0.17,4,0.151,5,0.151,23,0.017,36,0.482,40,0.567,50,0.17,51,0.053,79,0.011,80,0.011,87,0.72,90,1.601,97,2.074,109,1.8,111,1.681,112,1.458,113,1.966,114,1.966,115,1.768,116,3.033,117,3.033,121,3.207,125,4.689,127,2.671,128,1.966,129,1.966,132,3.909,133,3.005,141,2.743,142,1.601,316,2.828,342,3.423,569,4.213,606,2.082,655,2.828,706,4.213,725,2.534,778,4.213,792,4.213,918,4.523,1256,3.354,1278,3.354,1279,3.354,1280,3.885,1281,3.354,1282,3.885,1283,3.885,1284,3.885,1285,3.354,1286,5.277,1287,3.885,1288,3.885,1289,3.885,1290,3.885]],["title/injectables/UserService.html",[38,0.476,342,1.734]],["body/injectables/UserService.html",[3,0.075,4,0.066,5,0.066,9,0.139,10,0.601,11,1.952,13,1.464,15,0.85,20,0.683,22,1.415,23,0.017,24,1.071,25,0.572,26,0.976,31,1.348,32,2.572,36,0.403,37,0.705,38,0.354,40,0.25,50,0.075,51,0.05,53,1.381,64,1.599,67,1.137,75,1.264,76,0.82,79,0.006,80,0.009,85,1.023,87,1.419,88,2.176,90,2.454,92,1.47,94,2.476,103,2.54,106,1.834,112,0.641,142,0.705,193,0.536,200,2.544,207,1.941,226,2.546,227,1.999,249,2.577,342,1.288,368,1.039,387,1.225,391,2.402,392,3.29,397,2.748,418,0.641,430,1.167,431,2.363,462,1.115,486,2.411,487,2.201,502,0.973,504,0.973,505,2.559,515,1.999,569,3.511,574,3.127,575,2.84,576,2.444,577,1.115,579,2.444,580,3.045,587,3.045,589,2.444,593,1.207,594,2.801,599,2.854,606,1.941,655,1.517,706,3.511,710,2.189,712,2.189,725,1.115,726,1.999,764,3.474,766,1.322,778,3.511,783,1.999,784,1.476,788,2.189,792,3.511,794,2.444,796,2.444,808,2.444,834,3.634,865,1.476,866,2.189,1082,2.189,1095,3.551,1131,3.257,1218,2.444,1219,2.444,1227,2.444,1232,2.444,1233,2.444,1236,2.444,1239,2.444,1250,4.029,1251,2.444,1257,1.476,1258,1.476,1272,1.476,1285,1.476,1291,1.476,1292,2.831,1293,2.831,1294,2.831,1295,1.71,1296,1.71,1297,1.71,1298,1.71,1299,2.831,1300,2.831,1301,1.71,1302,2.831,1303,2.444,1304,1.71,1305,1.71,1306,2.831,1307,1.71,1308,4.212,1309,2.831,1310,2.831,1311,1.71,1312,2.831,1313,2.831,1314,1.71,1315,1.71,1316,1.71,1317,1.476,1318,1.71,1319,1.71,1320,1.71,1321,1.71,1322,1.71,1323,2.831,1324,1.71,1325,2.831,1326,1.71,1327,2.831,1328,1.71,1329,2.831,1330,1.71,1331,1.71,1332,1.71,1333,1.71]],["title/modules/WebSocketModule.html",[109,1.144,126,2.485]],["body/modules/WebSocketModule.html",[3,0.254,4,0.225,5,0.225,23,0.016,36,0.375,40,0.848,50,0.254,51,0.08,79,0.015,80,0.015,109,2.044,111,2.512,126,4.44,162,5.011,1155,4.098,1334,5.804]],["title/classes/WebsocketGateway.html",[51,0.052,164,2.69]],["body/classes/WebsocketGateway.html",[3,0.228,4,0.202,5,0.202,9,0.424,10,1.354,20,0.616,22,1.208,23,0.017,24,0.967,25,0.517,26,0.881,31,1.058,36,0.336,50,0.228,51,0.072,66,4.499,75,1.107,79,0.014,80,0.014,92,1.684,101,1.566,164,5.074,196,4.501,549,2.149,874,4.501,1155,4.506,1335,4.501,1336,6.382,1337,6.382,1338,6.382,1339,5.214,1340,5.214,1341,4.501,1342,5.214]],["title/coverage.html",[1343,4.495]],["body/coverage.html",[0,2.949,1,1.701,5,0.109,6,2.416,7,1.976,8,2.416,23,0.017,25,0.277,38,0.927,48,2.164,51,0.097,64,0.959,79,0.009,80,0.009,81,2.844,82,1.826,84,2.416,87,0.519,95,2.443,96,1.976,98,2.416,104,1.701,115,1.273,131,1.826,132,1.826,154,1.976,156,2.164,164,1.976,192,1.976,194,2.416,197,2.416,199,1.5,204,1.701,218,1.701,234,1.701,264,2.416,265,2.416,281,2.164,309,1.5,310,1.5,311,1.594,312,1.701,313,1.701,315,1.826,317,1.976,340,2.416,342,1.273,353,2.416,378,1.701,380,1.273,381,1.976,387,2.162,389,2.416,396,2.114,401,1.976,404,5.865,427,2.416,441,1.701,456,1.826,482,2.416,539,5.534,550,2.416,551,3.229,569,1.701,570,2.416,580,1.826,599,1.5,600,3.229,601,3.527,653,1.273,655,2.238,686,1.976,706,1.701,707,2.416,708,2.416,748,2.416,749,2.416,750,2.416,764,1.826,765,2.416,778,1.701,779,3.229,780,2.416,792,1.701,793,2.416,798,2.164,799,3.229,834,1.826,835,2.416,841,2.164,842,2.416,846,1.826,859,2.416,860,2.416,906,2.416,908,2.416,909,2.416,911,2.416,922,1.826,951,2.416,973,2.416,987,1.976,988,2.416,1002,1.701,1023,2.416,1051,1.976,1052,2.416,1070,1.826,1075,2.416,1080,1.976,1129,2.416,1130,2.416,1138,2.416,1142,2.416,1154,2.164,1155,2.949,1156,2.416,1157,2.416,1159,2.416,1165,2.416,1166,2.416,1181,2.416,1183,2.416,1185,2.416,1217,2.416,1291,2.416,1335,2.416,1343,2.416,1344,2.416,1345,2.799,1346,6.44,1347,6.44,1348,3.605,1349,5.539,1350,6.44,1351,2.416,1352,2.416,1353,2.416,1354,4.995,1355,4.176,1356,4.176,1357,4.176,1358,4.176,1359,5.926,1360,5.926,1361,4.176,1362,4.995,1363,2.799,1364,2.799,1365,2.799,1366,2.799,1367,4.176,1368,4.995,1369,2.416,1370,2.799,1371,2.799,1372,2.799,1373,2.799,1374,2.799,1375,2.799,1376,2.799,1377,2.799]],["title/dependencies.html",[112,1.72,1378,2.743]],["body/dependencies.html",[23,0.017,40,0.703,41,2.436,42,3.14,43,3.722,45,3.399,51,0.083,79,0.013,80,0.013,112,1.806,142,1.984,145,2.925,146,3.399,153,3.14,199,2.58,245,2.436,367,4.156,418,1.806,566,2.19,567,2.741,575,2.19,872,4.156,928,3.722,1341,4.156,1379,4.813,1380,4.813,1381,4.813,1382,6.652,1383,4.813,1384,6.072,1385,6.072,1386,6.072,1387,6.072,1388,4.813,1389,4.813,1390,4.813,1391,4.813,1392,4.813,1393,4.813,1394,4.813,1395,4.813,1396,4.813,1397,4.813,1398,4.813,1399,4.813,1400,4.813,1401,4.813,1402,4.813,1403,4.813,1404,4.813,1405,4.813]],["title/miscellaneous/enumerations.html",[1406,1.931,1407,3.957]],["body/miscellaneous/enumerations.html",[9,0.434,13,2.033,23,0.016,79,0.014,80,0.014,87,1.293,237,4.548,406,4.575,408,4.227,608,4.575,665,3.775,703,4.843,1406,3.249,1407,4.615,1408,5.346,1409,5.346,1410,5.346,1411,5.346,1412,5.346,1413,5.346,1414,5.346,1415,5.346,1416,6.479,1417,5.346,1418,6.479,1419,6.479]],["title/miscellaneous/functions.html",[1406,1.931,1420,3.957]],["body/miscellaneous/functions.html",[9,0.467,23,0.014,79,0.014,80,0.014,115,3.271,145,3.491,637,4.057,924,4.96,1212,5.231,1369,4.96,1406,3.491,1420,4.96,1421,5.745,1422,4.443,1423,4.96,1424,4.96,1425,5.745,1426,5.745,1427,4.96,1428,5.745,1429,4.96]],["title/index.html",[9,0.258,1430,2.743,1431,2.743]],["body/index.html",[4,0.154,23,0.016,34,2.411,41,2.008,51,0.073,64,1.359,79,0.011,80,0.011,95,1.559,106,1.559,109,1.192,112,1.488,137,3.425,142,1.635,145,3.252,182,2.126,283,2.566,335,3.425,418,2.008,430,1.635,486,1.902,566,1.805,567,2.259,588,2.411,614,2.588,662,3.068,663,3.068,718,3.425,721,3.425,867,3.425,925,3.425,950,3.425,966,4.62,1099,3.425,1109,4.62,1212,4.684,1317,3.425,1344,3.425,1422,3.068,1423,3.425,1424,3.425,1427,3.425,1429,3.425,1430,3.425,1431,3.425,1432,6.77,1433,3.967,1434,3.967,1435,3.967,1436,3.967,1437,3.967,1438,3.967,1439,3.967,1440,6.976,1441,3.967,1442,5.352,1443,5.352,1444,3.967,1445,3.967,1446,3.967,1447,3.967,1448,5.352,1449,3.967,1450,6.77,1451,3.967,1452,3.967,1453,3.967,1454,3.967,1455,3.967,1456,3.967,1457,3.967,1458,3.967,1459,3.967,1460,3.967,1461,3.967,1462,3.967,1463,3.967,1464,3.967,1465,3.967,1466,3.967,1467,5.352,1468,3.967,1469,3.967,1470,3.967,1471,5.352,1472,5.352,1473,3.967,1474,3.967,1475,3.967,1476,3.967,1477,3.967,1478,3.967,1479,5.352,1480,6.057,1481,3.967,1482,3.967,1483,3.967,1484,3.967,1485,3.967,1486,3.967,1487,3.967,1488,5.352,1489,3.967,1490,3.967,1491,3.967,1492,3.967,1493,3.967,1494,5.352,1495,3.967,1496,3.967,1497,4.62,1498,3.967,1499,3.425,1500,3.967]],["title/modules.html",[111,2.253]],["body/modules.html",[23,0.014,79,0.014,80,0.014,110,3.751,111,2.299,121,3.228,122,3.466,123,3.466,124,3.466,125,3.228,126,3.466,902,3.751,918,3.466,1501,7.696,1502,7.696,1503,7.696,1504,7.751,1505,5.312,1506,5.312]],["title/overview.html",[1507,4.495]],["body/overview.html",[2,2.598,23,0.017,79,0.01,80,0.01,83,2.372,97,1.321,104,3.371,109,1.009,110,5.324,111,1.454,112,1.261,113,1.701,114,1.701,115,1.529,116,1.701,117,1.701,118,2.901,119,2.901,120,2.901,121,4.557,122,4.322,123,4.322,124,4.322,125,4.582,126,3.619,127,2.415,128,1.701,129,1.701,193,1.054,234,4.141,306,2.901,307,2.901,308,2.901,309,3.236,310,2.973,311,3.438,312,3.371,313,3.371,342,3.101,375,2.901,376,2.901,377,2.901,378,4.141,388,2.372,531,2.372,549,1.385,569,3.371,706,3.371,778,3.371,792,3.371,902,4.263,903,2.901,918,4.322,919,2.901,920,2.901,921,2.901,922,4.445,1002,4.141,1016,2.901,1017,2.901,1018,2.901,1043,4.119,1067,2.901,1068,2.901,1069,2.901,1070,4.445,1278,2.901,1279,2.901,1281,2.901,1507,2.901,1508,3.36,1509,3.36,1510,3.36,1511,3.36]],["title/properties.html",[89,1.503,1378,2.743]],["body/properties.html",[23,0.016,79,0.015,80,0.015,85,1.053,89,1.95,1497,5.134,1512,5.947,1513,5.947,1514,5.947,1515,5.947]],["title/miscellaneous/variables.html",[1406,1.931,1516,3.957]],["body/miscellaneous/variables.html",[9,0.369,23,0.017,25,0.58,28,3.207,34,4.3,48,5.006,51,0.062,57,2.3,70,3.921,75,0.964,79,0.012,80,0.012,82,3.818,86,5.052,87,1.367,88,2.532,92,1.544,199,3.664,209,2.76,237,4.224,281,4.525,283,3.278,284,3.921,354,3.921,625,4.525,703,4.461,1241,5.052,1303,3.921,1348,3.921,1351,3.921,1352,5.052,1353,3.921,1406,2.76,1422,3.512,1499,3.921,1516,3.921,1517,4.542,1518,4.542,1519,5.852,1520,4.542,1521,4.542,1522,4.542,1523,4.542,1524,4.542,1525,4.542,1526,4.542,1527,4.542,1528,4.542,1529,5.852,1530,5.852]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":539,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1513,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1038,"title":{},"body":{"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{}}}],["1.1.23",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":370,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["10.0.0",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":404,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{},"coverage.html":{}}}],["11",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1384,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1511,"title":{},"body":{"overview.html":{}}}],["123456789",{"_index":1213,"title":{},"body":{"entities/User.html":{}}}],["150",{"_index":628,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["18",{"_index":1510,"title":{},"body":{"overview.html":{}}}],["1})@apiresponse({status",{"_index":1229,"title":{},"body":{"controllers/UserController.html":{}}}],["2",{"_index":531,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{},"classes/PaginationQueryDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["2/8",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1253,"title":{},"body":{"controllers/UserController.html":{}}}],["200",{"_index":847,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["201",{"_index":583,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{}}}],["20})@apiquery({name",{"_index":1245,"title":{},"body":{"controllers/UserController.html":{}}}],["225",{"_index":1195,"title":{},"body":{"entities/User.html":{}}}],["25",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1043,"title":{},"body":{"injectables/MessageService.html":{},"overview.html":{}}}],["3.1.10",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1347,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["34",{"_index":1110,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["4.0.0",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":1356,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":714,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["408",{"_index":717,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["409",{"_index":585,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["5.0.2",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1509,"title":{},"body":{"overview.html":{}}}],["6.9.13",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["7.3.0",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1357,"title":{},"body":{"coverage.html":{}}}],["8.13.1",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1508,"title":{},"body":{"overview.html":{}}}],["9!@#$%^&*]{8,16",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["9.15.1",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["9/10",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["9])[a",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["_",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["access",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["accesstoken",{"_index":828,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["active",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"miscellaneous/variables.html":{}}}],["activeuser",{"_index":1352,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":82,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":948,"title":{},"body":{"modules/MailModule.html":{}}}],["add",{"_index":545,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["additional",{"_index":817,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["address",{"_index":1162,"title":{},"body":{"classes/SignInDto.html":{},"entities/User.html":{}}}],["adduser",{"_index":429,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["adduser(id",{"_index":436,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["addusertochatroom",{"_index":483,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["addusertochatroom(chatroomid",{"_index":490,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["admin",{"_index":1418,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["allows",{"_index":1190,"title":{},"body":{"entities/User.html":{}}}],["alphabets",{"_index":618,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["already",{"_index":715,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["alt",{"_index":1489,"title":{},"body":{"index.html":{}}}],["always",{"_index":1472,"title":{},"body":{"index.html":{}}}],["aminu",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apibody",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":581,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":1260,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":677,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["apiproperty({enum",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiproperty({type",{"_index":609,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":1259,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":282,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["apitags('authentication",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('google",{"_index":855,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["apitags('users",{"_index":592,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["apiversrion:'0.0.1",{"_index":762,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1462,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1458,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1463,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["app_interceptor",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["appcontroller",{"_index":96,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1212,"title":{},"body":{"entities/User.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["appmodule",{"_index":110,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":104,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":689,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["args.object",{"_index":692,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["arguments",{"_index":690,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["array",{"_index":295,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["assert",{"_index":932,"title":{},"body":{"modules/MailModule.html":{}}}],["associated",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":824,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtypes.none",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["auth.controller",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":467,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/auth.controller",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":843,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guard/auth",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":466,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["auth/social/interfaces/user.interface",{"_index":591,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["auth_type_key",{"_index":281,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig/jwt.config",{"_index":819,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["authcontroller",{"_index":131,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":844,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":857,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":845,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticated",{"_index":573,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authenticates",{"_index":850,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["authentication.controller",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.controller.ts",{"_index":842,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:32",{"_index":849,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["authentication.service.ts",{"_index":860,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:17",{"_index":864,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:40",{"_index":869,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:55",{"_index":868,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authguard",{"_index":266,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authguardguard",{"_index":154,"title":{"guards/AuthGuardGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["authguardguard.defaultauthtype",{"_index":294,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authmodule",{"_index":121,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1515,"title":{},"body":{"properties.html":{}}}],["authorized",{"_index":278,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authservice",{"_index":234,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtication.module.ts",{"_index":905,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["authtype",{"_index":284,"title":{},"body":{"guards/AuthGuardGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypeguardmap",{"_index":268,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtypes.bearer",{"_index":285,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.map((type",{"_index":296,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["authtypes.none",{"_index":288,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["auto",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["autoloadentities",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":423,"title":{},"body":{"entities/ChatRoom.html":{}}}],["available",{"_index":1506,"title":{},"body":{"modules.html":{}}}],["await",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":501,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["badrequestexception('cannot",{"_index":544,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('one",{"_index":528,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('private",{"_index":532,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["badrequestexception('user",{"_index":741,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["baseurl",{"_index":1103,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":367,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":374,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":372,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(inppassword",{"_index":373,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":317,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1413,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["before",{"_index":1477,"title":{},"body":{"index.html":{}}}],["between",{"_index":1189,"title":{},"body":{"entities/User.html":{}}}],["bind",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["blog",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["body",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["body.senderid",{"_index":1007,"title":{},"body":{"controllers/MessageController.html":{}}}],["body.text",{"_index":1008,"title":{},"body":{"controllers/MessageController.html":{}}}],["boolean",{"_index":275,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapped",{"_index":1433,"title":{},"body":{"index.html":{}}}],["branch",{"_index":1471,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1504,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1501,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1494,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":754,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["cascade",{"_index":413,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["catch((err",{"_index":304,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["cause",{"_index":737,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["cd",{"_index":1446,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1473,"title":{},"body":{"index.html":{}}}],["character",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["chat",{"_index":396,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatmodule",{"_index":122,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatroom",{"_index":380,"title":{"entities/ChatRoom.html":{}},"body":{"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"coverage.html":{}}}],["chatroom.controller",{"_index":383,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatroom.entity",{"_index":382,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{}}}],["chatroom.id",{"_index":978,"title":{},"body":{"entities/Message.html":{}}}],["chatroom.type",{"_index":529,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users",{"_index":534,"title":{},"body":{"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["chatroom.users)@jointable",{"_index":1186,"title":{},"body":{"entities/User.html":{}}}],["chatroom.users.filter(user",{"_index":547,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroom.users.push(user",{"_index":546,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatroomcontroller",{"_index":381,"title":{"controllers/ChatRoomController.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["chatroomid",{"_index":492,"title":{},"body":{"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["chatroomrepository",{"_index":489,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["chatrooms",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["chatrooms/chatroom.entity",{"_index":986,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["chatrooms/chatrooms.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["chatroomservice",{"_index":378,"title":{"injectables/ChatRoomService.html":{}},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"coverage.html":{},"overview.html":{}}}],["chatroomsrepo",{"_index":1025,"title":{},"body":{"injectables/MessageService.html":{}}}],["chatroomtype",{"_index":406,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"miscellaneous/enumerations.html":{}}}],["chatroomtype.group",{"_index":422,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{}}}],["chatroomtype.private",{"_index":530,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["check",{"_index":1169,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["class",{"_index":51,"title":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/WebsocketGateway.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":549,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"classes/UpdateChatRoomDto.html":{},"classes/WebsocketGateway.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["cleanup",{"_index":426,"title":{},"body":{"entities/ChatRoom.html":{}}}],["cli",{"_index":1435,"title":{},"body":{"index.html":{}}}],["client",{"_index":874,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"classes/WebsocketGateway.html":{}}}],["client_id",{"_index":875,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["client_secret",{"_index":877,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clone",{"_index":1442,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":306,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":307,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":308,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":375,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":377,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_providers",{"_index":376,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule",{"_index":903,"title":{},"body":{"modules/GoogleAuthticationModule.html":{},"overview.html":{}}}],["cluster_googleauthticationmodule_providers",{"_index":904,"title":{},"body":{"modules/GoogleAuthticationModule.html":{}}}],["cluster_mailmodule",{"_index":919,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":921,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":920,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_messagemodule",{"_index":1016,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_exports",{"_index":1018,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_messagemodule_providers",{"_index":1017,"title":{},"body":{"modules/MessageModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1067,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1069,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1068,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1278,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1279,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1280,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1281,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":1456,"title":{},"body":{"index.html":{}}}],["column",{"_index":415,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["column('varchar",{"_index":402,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["column({type",{"_index":407,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["commands",{"_index":1493,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1480,"title":{},"body":{"index.html":{}}}],["commenting",{"_index":1487,"title":{},"body":{"index.html":{}}}],["common/pagination.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":682,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["comparepasswords",{"_index":355,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(password",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["comparison",{"_index":914,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":338,"title":{},"body":{"modules/AuthModule.html":{}}}],["config",{"_index":925,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["config.get('mail_host",{"_index":939,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('mail_port",{"_index":941,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_password",{"_index":944,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('smtp_username",{"_index":942,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["configservice.get('database.autoload",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.blog",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["configuration",{"_index":867,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"index.html":{}}}],["configurations",{"_index":1427,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["confirm",{"_index":624,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["confirmation",{"_index":1233,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["confirmpassword",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["conflictexception",{"_index":590,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["conflictexception(error",{"_index":598,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["connecting",{"_index":729,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["connection",{"_index":718,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["conpare",{"_index":1175,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["console.error(\"google",{"_index":900,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"google",{"_index":888,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log(\"received",{"_index":881,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["console.log('before",{"_index":760,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log(baseurl",{"_index":1108,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(getuserparamdto",{"_index":1268,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(newurl",{"_index":1114,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(payload",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(chatroomrepository",{"_index":485,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(mailerservice",{"_index":953,"title":{},"body":{"injectables/MailProvider.html":{}}}],["constructor(messagesrepo",{"_index":1024,"title":{},"body":{"injectables/MessageService.html":{}}}],["constructor(private",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":271,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["constructor(request",{"_index":1077,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(userrepository",{"_index":577,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":616,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["containing",{"_index":722,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["contains",{"_index":1461,"title":{},"body":{"index.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailProvider.html":{}}}],["context.getclass",{"_index":293,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.gethandler",{"_index":292,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":95,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":856,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('chat",{"_index":468,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["controller('message",{"_index":1004,"title":{},"body":{"controllers/MessageController.html":{}}}],["controller('users",{"_index":1261,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":1343,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":430,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/UpdateChatRoomDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":470,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{}}}],["create(body",{"_index":989,"title":{},"body":{"controllers/MessageController.html":{}}}],["create(chatroomid",{"_index":1029,"title":{},"body":{"injectables/MessageService.html":{}}}],["create(createchatroomdto",{"_index":440,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["createchatroomdto",{"_index":441,"title":{"classes/CreateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["createchatroomdto.name",{"_index":517,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.type",{"_index":518,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.length",{"_index":512,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["createchatroomdto.userids.map(id",{"_index":509,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["created",{"_index":397,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created'})@post",{"_index":1224,"title":{},"body":{"controllers/UserController.html":{}}}],["created.'})@apiresponse({status",{"_index":584,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["createdat",{"_index":390,"title":{},"body":{"entities/ChatRoom.html":{}}}],["createdatecolumn",{"_index":394,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["creategoogleuser",{"_index":576,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":579,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":569,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":587,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":599,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":731,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserdto.password",{"_index":744,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":706,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":710,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createusers(@body",{"_index":1270,"title":{},"body":{"controllers/UserController.html":{}}}],["createusers(createuserdto",{"_index":712,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["creating",{"_index":572,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["creation",{"_index":594,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apibody({type",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1064,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1122,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["currentpage:number",{"_index":1061,"title":{},"body":{"classes/Paginated.html":{}}}],["custom",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custum",{"_index":681,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["data",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"modules/MailModule.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiresponse({status",{"_index":1223,"title":{},"body":{"controllers/UserController.html":{}}}],["data.length",{"_index":763,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["data:t",{"_index":1058,"title":{},"body":{"classes/Paginated.html":{}}}],["database",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"index.html":{}}}],["databaseconfig",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":192,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["date",{"_index":393,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["db",{"_index":1037,"title":{},"body":{"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["declarations",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":354,"title":{},"body":{"injectables/BcryptProvider.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/WebsocketGateway.html":{}}}],["decorators/auth.decorator",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":283,"title":{},"body":{"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":270,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["defaultmessage",{"_index":970,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["defaultmessage(args",{"_index":697,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["defaultvaluepipe",{"_index":1254,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(1",{"_index":1267,"title":{},"body":{"controllers/UserController.html":{}}}],["defaultvaluepipe(20",{"_index":1265,"title":{},"body":{"controllers/UserController.html":{}}}],["define",{"_index":1412,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["defining",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete",{"_index":451,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":449,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':id/users/:userid",{"_index":453,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["delete(':messageid",{"_index":993,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(@param('messageid",{"_index":1012,"title":{},"body":{"controllers/MessageController.html":{}}}],["delete(messageid",{"_index":992,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["deleted",{"_index":1272,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleted'})@delete",{"_index":1230,"title":{},"body":{"controllers/UserController.html":{}}}],["deletes",{"_index":1232,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser",{"_index":1219,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@query('id",{"_index":1273,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1227,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deletion",{"_index":1299,"title":{},"body":{"injectables/UserService.html":{}}}],["denied",{"_index":290,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["dependencies",{"_index":112,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1170,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["description",{"_index":85,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["details",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["details'})@apibody({type",{"_index":1235,"title":{},"body":{"controllers/UserController.html":{}}}],["development",{"_index":1449,"title":{},"body":{"index.html":{}}}],["dir",{"_index":946,"title":{},"body":{"modules/MailModule.html":{}}}],["directly",{"_index":1470,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1344,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1210,"title":{},"body":{"entities/User.html":{}}}],["doesnt",{"_index":1171,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["double",{"_index":1482,"title":{},"body":{"index.html":{}}}],["dto",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["dtos/create",{"_index":462,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/getuserparamdto",{"_index":1258,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/google",{"_index":853,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/patch",{"_index":1257,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/refreshtokendto",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/update",{"_index":464,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["dtos/userdto",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["during",{"_index":915,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["each",{"_index":558,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["edit",{"_index":766,"title":{},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["edit.email",{"_index":1329,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.firstname",{"_index":1323,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.lastname",{"_index":1325,"title":{},"body":{"injectables/UserService.html":{}}}],["edit.password",{"_index":1327,"title":{},"body":{"injectables/UserService.html":{}}}],["editedpost",{"_index":1220,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(@body",{"_index":1276,"title":{},"body":{"controllers/UserController.html":{}}}],["editedpost(edituserdto",{"_index":1234,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser",{"_index":1292,"title":{},"body":{"injectables/UserService.html":{}}}],["edituser(edituserdto",{"_index":1300,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto",{"_index":764,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto.email",{"_index":1330,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.firstname",{"_index":1324,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.id",{"_index":1322,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.lastname",{"_index":1326,"title":{},"body":{"injectables/UserService.html":{}}}],["edituserdto.password",{"_index":1328,"title":{},"body":{"injectables/UserService.html":{}}}],["ejs",{"_index":928,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["ejsadapter",{"_index":933,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["email.ts",{"_index":780,"title":{},"body":{"injectables/FindOneByEmail.html":{},"coverage.html":{}}}],["email.ts:10",{"_index":782,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["email.ts:27",{"_index":786,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["encrypassword",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enforced",{"_index":1439,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":694,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["entities",{"_index":388,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":387,"title":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}},"body":{"entities/ChatRoom.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"entities/Message.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity('chat_rooms",{"_index":421,"title":{},"body":{"entities/ChatRoom.html":{}}}],["entry",{"_index":1423,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["enum",{"_index":408,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1407,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/authtypes.enum",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/chatroomtype",{"_index":420,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{}}}],["enums/userrole.enum",{"_index":678,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["env.development",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":305,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["error",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{}}}],["everything",{"_index":770,"title":{},"body":{"classes/EditUserDto.html":{}}}],["exactly",{"_index":533,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["example",{"_index":614,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"controllers/UserController.html":{},"index.html":{}}}],["example:rukky@gmail.com",{"_index":1163,"title":{},"body":{"classes/SignInDto.html":{}}}],["exception",{"_index":899,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["exclude",{"_index":1206,"title":{},"body":{"entities/User.html":{}}}],["exclude()@column('varchar",{"_index":1203,"title":{},"body":{"entities/User.html":{}}}],["execute",{"_index":300,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["execution",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":787,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["existinguser",{"_index":730,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":728,"title":{},"body":{"injectables/CreateUserProvider.html":{},"entities/User.html":{}}}],["exists.'})@apiresponse({status",{"_index":716,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expiration",{"_index":814,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["expiresin",{"_index":810,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["exports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[paginationprovider",{"_index":1074,"title":{},"body":{"modules/PaginationModule.html":{}}}],["express",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":771,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["extract",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extracts",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":595,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["false",{"_index":685,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["family_name",{"_index":891,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fatima",{"_index":630,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fatimaaminu@mail.com",{"_index":626,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["fetch",{"_index":790,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["field",{"_index":625,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"miscellaneous/variables.html":{}}}],["field'})@isemail()@maxlength(150)@column({unique",{"_index":627,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isnotempty()@maxlength(100",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["field'})@isstring()@isoptional()@maxlength(100",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["filtering",{"_index":1306,"title":{},"body":{"injectables/UserService.html":{}}}],["finalresponse",{"_index":1120,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":505,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":431,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["findall(@param('chatroomid",{"_index":1010,"title":{},"body":{"controllers/MessageController.html":{}}}],["findall(chatroomid",{"_index":996,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["findall(getuserparamdto",{"_index":1304,"title":{},"body":{"injectables/UserService.html":{}}}],["finding",{"_index":781,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["findone",{"_index":432,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findone(@param('id",{"_index":473,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["findone(id",{"_index":445,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["findonebyemail",{"_index":778,"title":{"injectables/FindOneByEmail.html":{}},"body":{"injectables/FindOneByEmail.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyemail(email",{"_index":785,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["findonebygoogleid",{"_index":794,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":796,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":792,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1293,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":631,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["firstname",{"_index":605,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["folder",{"_index":1460,"title":{},"body":{"index.html":{}}}],["form",{"_index":926,"title":{},"body":{"modules/MailModule.html":{}}}],["forwardref",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UserModule.html":{}}}],["found",{"_index":515,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/FindOneByEmail.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["function",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1420,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":830,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generated",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["generates",{"_index":807,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokenprovider",{"_index":1144,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":802,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":805,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":310,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":800,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["get('/:id",{"_index":1263,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':chatroomid",{"_index":997,"title":{},"body":{"controllers/MessageController.html":{}}}],["get(':id",{"_index":446,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["gethello",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getonebyemail",{"_index":1294,"title":{},"body":{"injectables/UserService.html":{}}}],["getonebyemail(email",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1430,"title":{"index.html":{}},"body":{"index.html":{}}}],["getuserparamdto",{"_index":834,"title":{"classes/GetuserParamDto.html":{}},"body":{"classes/GetuserParamDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["getusers",{"_index":1221,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers(getuserparamdto",{"_index":1240,"title":{},"body":{"controllers/UserController.html":{}}}],["git",{"_index":1444,"title":{},"body":{"index.html":{}}}],["give",{"_index":1111,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["given",{"_index":808,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/UserService.html":{}}}],["given_name",{"_index":890,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":924,"title":{},"body":{"modules/MailModule.html":{},"miscellaneous/functions.html":{}}}],["google",{"_index":575,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["google'})@isstring()@isoptional()@maxlength(225",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["googleauthenticationcontroller",{"_index":315,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":311,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{},"overview.html":{}}}],["googleauthticationmodule",{"_index":902,"title":{"modules/GoogleAuthticationModule.html":{}},"body":{"modules/GoogleAuthticationModule.html":{},"modules.html":{},"overview.html":{}}}],["googleid",{"_index":606,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["googleid.ts",{"_index":793,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["googleid.ts:10",{"_index":795,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleid.ts:20",{"_index":797,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["googleinterface",{"_index":580,"title":{"interfaces/GoogleInterface.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleInterface.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["googletokendto",{"_index":846,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":882,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":589,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["googleuserprovider",{"_index":1315,"title":{},"body":{"injectables/UserService.html":{}}}],["grab",{"_index":1151,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["graph",{"_index":1505,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1416,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["guard.guard.ts",{"_index":265,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guard.guard.ts:34",{"_index":273,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard.guard.ts:54",{"_index":274,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["guard/access",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard/auth",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"overview.html":{}}}],["handle",{"_index":865,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{}}}],["handlemessage",{"_index":1336,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handlemessage(client",{"_index":1337,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["handles",{"_index":424,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["handling",{"_index":709,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["hashedpassword",{"_index":742,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["hashing",{"_index":366,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":309,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":356,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(inppassword",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasing",{"_index":912,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["hasshing",{"_index":364,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["having",{"_index":738,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["header",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"classes/WebsocketGateway.html":{}}}],["helpdesk",{"_index":962,"title":{},"body":{"injectables/MailProvider.html":{}}}],["host",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["hot",{"_index":1451,"title":{},"body":{"index.html":{}}}],["http",{"_index":1101,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["http://localhost:3000",{"_index":969,"title":{},"body":{"injectables/MailProvider.html":{}}}],["http://localhost:3000/resource",{"_index":1100,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["httpcode",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/phertyameen/realtimechat.git",{"_index":1445,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.ok",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.unauthorized",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":1099,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["id",{"_index":391,"title":{},"body":{"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@apiparam({name",{"_index":1243,"title":{},"body":{"controllers/UserController.html":{}}}],["id'})@apiquery({name",{"_index":1228,"title":{},"body":{"controllers/UserController.html":{}}}],["id:number",{"_index":1274,"title":{},"body":{"controllers/UserController.html":{}}}],["id?:number",{"_index":840,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["identifier",{"_index":401,"title":{},"body":{"entities/ChatRoom.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["ids",{"_index":507,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["idtoken",{"_index":887,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["implementation",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{}}}],["implementing",{"_index":267,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["import",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["imports",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{}}}],["in'})@apiresponse({status",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["in.provider",{"_index":321,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1166,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:28",{"_index":1168,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:9",{"_index":1167,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["include",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["incorrect",{"_index":1174,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":276,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{}}}],["information",{"_index":1303,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":1086,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":38,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{}}}],["injectrepository",{"_index":502,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["injectrepository(chatroom",{"_index":503,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["injectrepository(message",{"_index":1035,"title":{},"body":{"injectables/MessageService.html":{}}}],["injectrepository(user",{"_index":504,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/MessageService.html":{},"injectables/UserService.html":{}}}],["injects",{"_index":593,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByEmail.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/UserService.html":{}}}],["inlinecssenabled",{"_index":949,"title":{},"body":{"modules/MailModule.html":{}}}],["inppassword",{"_index":365,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["input",{"_index":688,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["install",{"_index":1443,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1441,"title":{},"body":{"index.html":{}}}],["installed",{"_index":1464,"title":{},"body":{"index.html":{}}}],["instance",{"_index":301,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instance.canactivate(context",{"_index":303,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["instead",{"_index":1481,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1466,"title":{},"body":{"index.html":{}}}],["interact",{"_index":784,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/UserService.html":{}}}],["intercept",{"_index":751,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":752,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":81,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["interface/activeinterface",{"_index":820,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces",{"_index":83,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleInterface.html":{},"interfaces/ServerToClientEvents.html":{},"overview.html":{}}}],["interfaces/paginatedinterface",{"_index":1085,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["invalid",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["isarray",{"_index":562,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isarray()@isnumber",{"_index":557,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["ischeckedpassword",{"_index":1176,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isemail",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1160,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":561,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isenum(chatroomtype",{"_index":568,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(chatroomtype)@isoptional",{"_index":555,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isenum(userrole",{"_index":702,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["isglobal",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":775,"title":{},"body":{"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{}}}],["isint()@isnotempty",{"_index":773,"title":{},"body":{"classes/EditUserDto.html":{}}}],["isint()@type(undefined",{"_index":837,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["isnotempty",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnumber",{"_index":565,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["isoptional",{"_index":564,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@ispositive",{"_index":1132,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional,isint",{"_index":839,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["ispositive",{"_index":1135,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":553,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1140,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["issue",{"_index":719,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{}}}],["issuer",{"_index":826,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["issues",{"_index":740,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["isuuid",{"_index":563,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["items",{"_index":611,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["itemsperpage",{"_index":1121,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["itemsperpage:number",{"_index":1059,"title":{},"body":{"classes/Paginated.html":{}}}],["john",{"_index":1209,"title":{},"body":{"entities/User.html":{}}}],["johndoe@example.com",{"_index":1211,"title":{},"body":{"entities/User.html":{}}}],["join",{"_index":929,"title":{},"body":{"modules/MailModule.html":{}}}],["join(__dirname",{"_index":947,"title":{},"body":{"modules/MailModule.html":{}}}],["jointable",{"_index":417,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["junction",{"_index":1214,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":818,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtauthguard",{"_index":465,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfigurattion",{"_index":863,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["jwtmodule",{"_index":322,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["key",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyboard",{"_index":1485,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["last:string",{"_index":1063,"title":{},"body":{"classes/Paginated.html":{}}}],["lastname",{"_index":607,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["later",{"_index":736,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["legend",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":403,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["letter",{"_index":656,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["letter'})@isstring()@maxlength(225)@matches(/^(?=.*[!@#$%^&])(?=.*[a",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":620,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["library",{"_index":872,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1497,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1498,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1131,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["limit?:number",{"_index":1136,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["line",{"_index":1109,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["link",{"_index":1053,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["list",{"_index":1251,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["literal",{"_index":990,"title":{},"body":{"controllers/MessageController.html":{},"classes/Paginated.html":{}}}],["load",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":1180,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["loginticket",{"_index":885,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":889,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":968,"title":{},"body":{"injectables/MailProvider.html":{}}}],["loop",{"_index":298,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["lowercase",{"_index":657,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["lts",{"_index":1438,"title":{},"body":{"index.html":{}}}],["mac",{"_index":1491,"title":{},"body":{"index.html":{}}}],["mailer",{"_index":958,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailermodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":936,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":954,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailerservice:mailerservice",{"_index":959,"title":{},"body":{"injectables/MailProvider.html":{}}}],["mailmodule",{"_index":918,"title":{"modules/MailModule.html":{}},"body":{"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mailprovider",{"_index":922,"title":{"injectables/MailProvider.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1422,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["main.ts",{"_index":1457,"title":{},"body":{"index.html":{}}}],["make",{"_index":1215,"title":{},"body":{"entities/User.html":{}}}],["makes",{"_index":769,"title":{},"body":{"classes/EditUserDto.html":{}}}],["management",{"_index":1317,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["managing",{"_index":1218,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["many",{"_index":1188,"title":{},"body":{"entities/User.html":{}}}],["manytomany",{"_index":416,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":410,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["manytoone",{"_index":985,"title":{},"body":{"entities/Message.html":{}}}],["manytoone(undefined",{"_index":977,"title":{},"body":{"entities/Message.html":{}}}],["map",{"_index":757,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":621,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matches",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matching",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchpasswords",{"_index":684,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["matchpasswordsconstraint",{"_index":686,"title":{"classes/MatchPasswordsConstraint.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["math.ceil(totalitems",{"_index":1117,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(100",{"_index":698,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(150",{"_index":699,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["maxlength(225",{"_index":700,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["merging",{"_index":1478,"title":{},"body":{"index.html":{}}}],["message",{"_index":653,"title":{"entities/Message.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"interfaces/ServerToClientEvents.html":{},"entities/User.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["message.entity",{"_index":1020,"title":{},"body":{"modules/MessageModule.html":{},"injectables/MessageService.html":{}}}],["message.interface.ts",{"_index":1157,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["message.sender",{"_index":1201,"title":{},"body":{"entities/User.html":{}}}],["message.text",{"_index":1050,"title":{},"body":{"injectables/MessageService.html":{}}}],["messagecontroller",{"_index":987,"title":{"controllers/MessageController.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"coverage.html":{}}}],["messageid",{"_index":995,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["messagemodule",{"_index":123,"title":{"modules/MessageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessageModule.html":{},"modules.html":{},"overview.html":{}}}],["messages",{"_index":1009,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{},"entities/User.html":{}}}],["messages.controller",{"_index":1021,"title":{},"body":{"modules/MessageModule.html":{}}}],["messages/messages.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["messageservice",{"_index":1002,"title":{"injectables/MessageService.html":{}},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"coverage.html":{},"overview.html":{}}}],["messagesmodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["messagesrepo",{"_index":1028,"title":{},"body":{"injectables/MessageService.html":{}}}],["meta",{"_index":1054,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["miscellaneous",{"_index":1406,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":696,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["mit",{"_index":1500,"title":{},"body":{"index.html":{}}}],["moderator",{"_index":1419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":109,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"index.html":{},"overview.html":{}}}],["module,forwardref",{"_index":1072,"title":{},"body":{"modules/PaginationModule.html":{}}}],["modules",{"_index":111,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":934,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":734,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["more",{"_index":514,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["multi",{"_index":1479,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":1191,"title":{},"body":{"entities/User.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["nest",{"_index":1434,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":756,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/core",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":776,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["nestjs/platform",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/websockets",{"_index":1341,"title":{},"body":{"classes/WebsocketGateway.html":{},"dependencies.html":{}}}],["network",{"_index":739,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["new",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":723,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UserController.html":{}}}],["newmessage",{"_index":1158,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["newtext",{"_index":1033,"title":{},"body":{"injectables/MessageService.html":{}}}],["newurl",{"_index":1106,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&${totalpage",{"_index":1124,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${nextpage",{"_index":1126,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${paginationquerydto.page",{"_index":1125,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=${prevpage",{"_index":1128,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquerydto.limit}&page=1",{"_index":1123,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":745,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["next",{"_index":753,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe(map((data",{"_index":761,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["next:string",{"_index":1066,"title":{},"body":{"classes/Paginated.html":{}}}],["nextpage",{"_index":1118,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1437,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1414,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":500,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["notfoundexception('chat",{"_index":1040,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('message",{"_index":1048,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception('one",{"_index":513,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception('sender",{"_index":1042,"title":{},"body":{"injectables/MessageService.html":{}}}],["notfoundexception(`chat",{"_index":523,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["notfoundexception(`user",{"_index":543,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["npm",{"_index":1440,"title":{},"body":{"index.html":{}}}],["null",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["nullable",{"_index":1192,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":94,"title":{},"body":{"interfaces/ActiveUserData.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(id",{"_index":510,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["number(userid",{"_index":542,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["numbers",{"_index":617,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["numeric",{"_index":506,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["oauth",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["oauth2",{"_index":873,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client",{"_index":871,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(client_id",{"_index":880,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":861,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{}}}],["object.assign(chatroom",{"_index":535,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["object.password",{"_index":693,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["objectliteral",{"_index":1084,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["ondelete",{"_index":412,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{}}}],["one",{"_index":655,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1207,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1200,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":862,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1474,"title":{},"body":{"index.html":{}}}],["operations",{"_index":783,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["option",{"_index":950,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["optional)'})@apiquery({name",{"_index":1244,"title":{},"body":{"controllers/UserController.html":{}}}],["out",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1507,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1378,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages",{"_index":1465,"title":{},"body":{"index.html":{}}}],["page",{"_index":1095,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["page?:number",{"_index":1137,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginated",{"_index":1051,"title":{"classes/Paginated.html":{}},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":1076,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(paginationquerydto",{"_index":1079,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1082,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pagination/provider/pagination.provider",{"_index":1073,"title":{},"body":{"modules/PaginationModule.html":{}}}],["paginationmodule",{"_index":124,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1070,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":1080,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paginationquerydto.limit",{"_index":1096,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto.page",{"_index":1097,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto:paginationquerydto",{"_index":1088,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["param",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["param('id",{"_index":475,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["param('userid",{"_index":479,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["parameter",{"_index":1252,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["paramsdto",{"_index":836,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["parseintpipe",{"_index":461,"title":{},"body":{"controllers/ChatRoomController.html":{},"controllers/UserController.html":{}}}],["part",{"_index":767,"title":{},"body":{"classes/EditUserDto.html":{},"entities/User.html":{}}}],["partialtype",{"_index":768,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createchatroomdto",{"_index":1182,"title":{},"body":{"classes/UpdateChatRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":772,"title":{},"body":{"classes/EditUserDto.html":{}}}],["pass",{"_index":943,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["password'})@isstring()@maxlength(225)@validate(matchpasswordsconstraint",{"_index":622,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password123",{"_index":615,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["passwords",{"_index":683,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["patch",{"_index":459,"title":{},"body":{"controllers/ChatRoomController.html":{},"classes/EditUserDto.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":457,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["patch(':messageid",{"_index":1000,"title":{},"body":{"controllers/MessageController.html":{}}}],["path",{"_index":930,"title":{},"body":{"modules/MailModule.html":{}}}],["payload",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/ServerToClientEvents.html":{},"classes/WebsocketGateway.html":{}}}],["per",{"_index":1094,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UserController.html":{}}}],["pg",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":758,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["please",{"_index":735,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["point",{"_index":1424,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm",{"_index":705,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["port",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["post",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{}}}],["post('/refreshtoken",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/refreshtoken')@apioperation({summary",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin')@auth(authtypes.none)@httpcode(httpstatus.ok)@useinterceptors(classserializerinterceptor)@apioperation({summary",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(':id/users/:userid",{"_index":438,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["postgres",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatRoomController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MessageController.html":{},"controllers/UserController.html":{}}}],["prerequisites",{"_index":1436,"title":{},"body":{"index.html":{}}}],["present",{"_index":695,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["previous",{"_index":1127,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["previous:string",{"_index":1065,"title":{},"body":{"classes/Paginated.html":{}}}],["prevpage",{"_index":1119,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":398,"title":{},"body":{"entities/ChatRoom.html":{},"entities/Message.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1197,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["process",{"_index":733,"title":{},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{}}}],["project",{"_index":1432,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":829,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":302,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["properties",{"_index":89,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthGuardGuard.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"entities/Message.html":{},"classes/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{}}}],["provider",{"_index":368,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["provider/create",{"_index":1284,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/find",{"_index":1286,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/googleuserprovider",{"_index":1288,"title":{},"body":{"modules/UserModule.html":{}}}],["provider/message.service",{"_index":1003,"title":{},"body":{"controllers/MessageController.html":{},"modules/MessageModule.html":{}}}],["provider/user.service",{"_index":1256,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/chatrooms/chatrooms.service",{"_index":384,"title":{},"body":{"modules/ChatModule.html":{},"controllers/ChatRoomController.html":{}}}],["providers/generate",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":852,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{}}}],["providers/hashing",{"_index":319,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.provider",{"_index":935,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/refresh",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":320,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pull",{"_index":1475,"title":{},"body":{"index.html":{}}}],["push",{"_index":1469,"title":{},"body":{"index.html":{}}}],["query",{"_index":1255,"title":{},"body":{"controllers/UserController.html":{}}}],["query('limit",{"_index":1264,"title":{},"body":{"controllers/UserController.html":{}}}],["query('page",{"_index":1266,"title":{},"body":{"controllers/UserController.html":{}}}],["query.dto",{"_index":1083,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1130,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":1133,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:14",{"_index":1134,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"controllers/ChatRoomController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/MessageController.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["realtimechat",{"_index":966,"title":{},"body":{"injectables/MailProvider.html":{},"index.html":{}}}],["realtimechat.com",{"_index":963,"title":{},"body":{"injectables/MailProvider.html":{}}}],["record",{"_index":286,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["reflect",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":272,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["refresh",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshed",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtoken",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":204,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1150,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokenprovider",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1143,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1146,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":312,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["related",{"_index":866,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":521,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["relationship",{"_index":425,"title":{},"body":{"entities/ChatRoom.html":{},"entities/User.html":{}}}],["reload",{"_index":1452,"title":{},"body":{"index.html":{}}}],["remove",{"_index":433,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["remove(@param('id",{"_index":477,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["remove(id",{"_index":448,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["removeuser",{"_index":434,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuser(id",{"_index":452,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["removeuserfromchatroom",{"_index":484,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["removeuserfromchatroom(chatroomid",{"_index":497,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["reply",{"_index":945,"title":{},"body":{"modules/MailModule.html":{}}}],["repo",{"_index":1149,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["repository",{"_index":486,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":1115,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1090,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository:repository",{"_index":1089,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["representing",{"_index":1184,"title":{},"body":{"entities/User.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request:request",{"_index":1087,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request[request_user_key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":724,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/SignInProvider.html":{}}}],["requesttimeoutexception('could",{"_index":789,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["requesttimeoutexception(error",{"_index":1179,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["requesturl",{"_index":1098,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["required",{"_index":610,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{}}}],["reset",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":851,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["response.interceptor.ts",{"_index":750,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:10",{"_index":755,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":749,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["responsible",{"_index":571,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["result",{"_index":536,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{}}}],["result.affected",{"_index":538,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/MessageService.html":{}}}],["results",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":1247,"title":{},"body":{"controllers/UserController.html":{}}}],["retrieve",{"_index":1241,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":1250,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{}}}],["review",{"_index":1476,"title":{},"body":{"index.html":{}}}],["role",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["room",{"_index":443,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["room.dto",{"_index":463,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{}}}],["room.dto.ts",{"_index":551,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:11",{"_index":556,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:17",{"_index":560,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["room.dto.ts:7",{"_index":554,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["rooms",{"_index":428,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"entities/User.html":{}}}],["root",{"_index":1459,"title":{},"body":{"index.html":{}}}],["rules",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["run",{"_index":1450,"title":{},"body":{"index.html":{}}}],["running",{"_index":1447,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":371,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["saltrounds",{"_index":369,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1036,"title":{},"body":{"injectables/MessageService.html":{}}}],["secret",{"_index":822,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":940,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":897,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{}}}],["sender",{"_index":974,"title":{},"body":{"entities/Message.html":{},"injectables/MessageService.html":{}}}],["senderid",{"_index":1005,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["sent",{"_index":884,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["server",{"_index":1429,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["servertoclientevents",{"_index":1154,"title":{"interfaces/ServerToClientEvents.html":{}},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["service",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailProvider.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["setmetadata(auth_type_key",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shift",{"_index":1488,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":1486,"title":{},"body":{"index.html":{}}}],["show",{"_index":1093,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sign",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/SignInProvider.html":{}}}],["signed",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signin",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":218,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":313,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":813,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/User.html":{}}}],["signtoken",{"_index":803,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":809,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signup",{"_index":917,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["single",{"_index":1242,"title":{},"body":{"controllers/UserController.html":{}}}],["skip",{"_index":1091,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slash",{"_index":1483,"title":{},"body":{"index.html":{}}}],["social/google",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["socket.io",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["socket.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["socket.module.ts",{"_index":1334,"title":{},"body":{"modules/WebSocketModule.html":{}}}],["socket/interfaces/websockets",{"_index":1156,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["socket/web",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{}}}],["socket/websocketevents/websocket.gateway",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["socket/websocketevents/websocket.gateway.ts",{"_index":1335,"title":{},"body":{"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["socket/websocketevents/websocket.gateway.ts:6",{"_index":1339,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/GoogleAuthticationModule.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"interfaces/ServerToClientEvents.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateChatRoomDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"index.html":{}}}],["special",{"_index":658,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["specific",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"controllers/UserController.html":{}}}],["src",{"_index":1455,"title":{},"body":{"index.html":{}}}],["src/.../activeuser.decorator.ts",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constant.ts",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authtypes.enum.ts",{"_index":1408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../chatroomtype.ts",{"_index":1409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../userrole.enum.ts",{"_index":1410,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:8",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1289,"title":{},"body":{"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":314,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/authconfig/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constant",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1348,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/activeuser.decorator.ts",{"_index":1351,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1353,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refreshtokendto.ts",{"_index":1138,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/refreshtokendto.ts:9",{"_index":1141,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["src/auth/dtos/userdto.ts",{"_index":1159,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/userdto.ts:13",{"_index":1164,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/userdto.ts:8",{"_index":1161,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/authtypes.enum",{"_index":280,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["src/auth/enums/authtypes.enum.ts",{"_index":1411,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guard/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/auth",{"_index":264,"title":{},"body":{"guards/AuthGuardGuard.html":{},"coverage.html":{}}}],["src/auth/interface/activeinterface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:33",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.ts",{"_index":353,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.ts:10",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.ts:18",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":798,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing",{"_index":727,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.ts",{"_index":911,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.ts:10",{"_index":913,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.ts:7",{"_index":916,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1142,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1165,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":908,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":841,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"modules/GoogleAuthticationModule.html":{},"coverage.html":{}}}],["src/auth/social/interfaces/user.interface",{"_index":1316,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/social/interfaces/user.interface.ts",{"_index":906,"title":{},"body":{"interfaces/GoogleInterface.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":859,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts",{"_index":427,"title":{},"body":{"controllers/ChatRoomController.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.controller.ts:25",{"_index":442,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:30",{"_index":444,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:35",{"_index":447,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:40",{"_index":458,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:49",{"_index":450,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:54",{"_index":439,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.controller.ts:62",{"_index":454,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["src/chatrooms/chatroom.entity",{"_index":680,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"modules/MessageModule.html":{}}}],["src/chatrooms/chatroom.entity.ts",{"_index":389,"title":{},"body":{"entities/ChatRoom.html":{},"coverage.html":{}}}],["src/chatrooms/chatroom.entity.ts:10",{"_index":399,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:13",{"_index":405,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:21",{"_index":409,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:26",{"_index":414,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatroom.entity.ts:30",{"_index":395,"title":{},"body":{"entities/ChatRoom.html":{}}}],["src/chatrooms/chatrooms.module.ts",{"_index":379,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chatrooms/dtos/create",{"_index":550,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/dtos/update",{"_index":1181,"title":{},"body":{"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["src/chatrooms/enums/chatroomtype.ts",{"_index":1415,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts",{"_index":482,"title":{},"body":{"injectables/ChatRoomService.html":{},"coverage.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:111",{"_index":498,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:15",{"_index":488,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:23",{"_index":493,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:43",{"_index":494,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:49",{"_index":495,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:62",{"_index":499,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:85",{"_index":496,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/chatrooms/providers/chatrooms/chatrooms.service.ts:93",{"_index":491,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["src/common/interceptor/data",{"_index":748,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination.module.ts",{"_index":1071,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts",{"_index":1052,"title":{},"body":{"classes/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:11",{"_index":1056,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:4",{"_index":1055,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/interfaces/paginatedinterface.ts:5",{"_index":1057,"title":{},"body":{"classes/Paginated.html":{}}}],["src/common/pagination/pagination",{"_index":1129,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts",{"_index":1075,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:10",{"_index":1078,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/provider/pagination.provider.ts:18",{"_index":1081,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module",{"_index":1287,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mail/mail.module.ts",{"_index":923,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.provider.ts",{"_index":951,"title":{},"body":{"injectables/MailProvider.html":{},"coverage.html":{}}}],["src/mail/providers/mail.provider.ts:15",{"_index":957,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/mail/providers/mail.provider.ts:8",{"_index":955,"title":{},"body":{"injectables/MailProvider.html":{}}}],["src/main.ts",{"_index":1369,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messages/message.entity",{"_index":1208,"title":{},"body":{"entities/User.html":{}}}],["src/messages/message.entity.ts",{"_index":973,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/messages/message.entity.ts:14",{"_index":980,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:17",{"_index":979,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:20",{"_index":982,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:23",{"_index":983,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/message.entity.ts:26",{"_index":984,"title":{},"body":{"entities/Message.html":{}}}],["src/messages/messages.controller.ts",{"_index":988,"title":{},"body":{"controllers/MessageController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:10",{"_index":991,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:17",{"_index":998,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:23",{"_index":994,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.controller.ts:29",{"_index":1001,"title":{},"body":{"controllers/MessageController.html":{}}}],["src/messages/messages.module.ts",{"_index":1019,"title":{},"body":{"modules/MessageModule.html":{}}}],["src/messages/provider/message.service.ts",{"_index":1023,"title":{},"body":{"injectables/MessageService.html":{},"coverage.html":{}}}],["src/messages/provider/message.service.ts:17",{"_index":1030,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:36",{"_index":1032,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:41",{"_index":1031,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:49",{"_index":1034,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/messages/provider/message.service.ts:9",{"_index":1027,"title":{},"body":{"injectables/MessageService.html":{}}}],["src/users/dtos/create",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts",{"_index":835,"title":{},"body":{"classes/GetuserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/getuserparamdto.ts:10",{"_index":838,"title":{},"body":{"classes/GetuserParamDto.html":{}}}],["src/users/dtos/patch",{"_index":765,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/users/enums/userrole.enum.ts",{"_index":1417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/users/provider/create",{"_index":707,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/find",{"_index":779,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts",{"_index":570,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"coverage.html":{}}}],["src/users/provider/googleuserprovider.ts:15",{"_index":578,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/googleuserprovider.ts:35",{"_index":586,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["src/users/provider/user.service",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/provider/user.service.ts",{"_index":1291,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/provider/user.service.ts:100",{"_index":1298,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:113",{"_index":1301,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:133",{"_index":1307,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:143",{"_index":1296,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:19",{"_index":1295,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:52",{"_index":1305,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:67",{"_index":1297,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:78",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/provider/user.service.ts:89",{"_index":1314,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.controller.ts",{"_index":1217,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:32",{"_index":1249,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:51",{"_index":1225,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:66",{"_index":1231,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:83",{"_index":1238,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.entitly",{"_index":419,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{},"injectables/MessageService.html":{}}}],["src/users/user.entitly.ts",{"_index":1183,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entitly.ts:14",{"_index":1198,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:21",{"_index":1194,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:28",{"_index":1199,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:35",{"_index":1193,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:39",{"_index":1204,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:46",{"_index":1205,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:53",{"_index":1196,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:61",{"_index":1187,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entitly.ts:65",{"_index":1202,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.module",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/user.module.ts",{"_index":1282,"title":{},"body":{"modules/UserModule.html":{}}}],["src/web",{"_index":1155,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"modules/WebSocketModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["start",{"_index":1448,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1453,"title":{},"body":{"index.html":{}}}],["started",{"_index":1431,"title":{"index.html":{}},"body":{"index.html":{}}}],["starts",{"_index":1428,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statements",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":269,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["status",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["step",{"_index":896,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["stored",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":931,"title":{},"body":{"modules/MailModule.html":{}}}],["strig",{"_index":907,"title":{},"body":{"interfaces/GoogleInterface.html":{}}}],["string",{"_index":92,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1454,"title":{},"body":{"index.html":{}}}],["sub",{"_index":91,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":964,"title":{},"body":{"injectables/MailProvider.html":{}}}],["subscribemessage",{"_index":1340,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["subscribemessage('message",{"_index":1338,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["successful",{"_index":1246,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["successfully'})@apiresponse({status",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1502,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1216,"title":{},"body":{"entities/User.html":{}}}],["svg",{"_index":1503,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":721,"title":{},"body":{"injectables/CreateUserProvider.html":{},"index.html":{}}}],["t",{"_index":811,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1185,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1092,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["taking",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["tap",{"_index":759,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["template",{"_index":927,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailProvider.html":{}}}],["terminal",{"_index":1113,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1495,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1496,"title":{},"body":{"index.html":{}}}],["text",{"_index":975,"title":{},"body":{"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["this.accesstokenguard",{"_index":287,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.appservice.gethello",{"_index":108,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.refreshtoken(refreshtoken",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type",{"_index":297,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.chatroomrepository.create",{"_index":516,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.delete(number(id",{"_index":537,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.find",{"_index":520,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.findone",{"_index":522,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomrepository.save(chatroom",{"_index":519,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.chatroomservice.addusertochatroom(id",{"_index":480,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.create(createchatroomdto",{"_index":471,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findall",{"_index":472,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.findone(id",{"_index":474,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.remove(id",{"_index":478,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.removeuserfromchatroom(id",{"_index":481,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomservice.update(id",{"_index":476,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["this.chatroomsrepo.findone",{"_index":1039,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1333,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createuserprovider.createusers(createuserdto",{"_index":1319,"title":{},"body":{"injectables/UserService.html":{}}}],["this.extractrequestfromheader(request",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findone(chatroomid",{"_index":540,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findone(id",{"_index":524,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.findonebyemail.findonebyemail(email",{"_index":1320,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1332,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1153,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":895,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":893,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":858,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords(signindto.password",{"_index":1177,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword",{"_index":743,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.audience",{"_index":825,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":827,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":823,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.ttl",{"_index":832,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfigurattion.googleclient_id",{"_index":876,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfigurattion.googleclient_secret",{"_index":878,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtservice.signasync",{"_index":821,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":961,"title":{},"body":{"injectables/MailProvider.html":{}}}],["this.messageservice.create(body.chatroomid",{"_index":1006,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.delete(messageid",{"_index":1013,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.findall(chatroomid",{"_index":1011,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messageservice.update(messageid",{"_index":1015,"title":{},"body":{"controllers/MessageController.html":{}}}],["this.messagesrepo.create",{"_index":1044,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.delete(messageid",{"_index":1047,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.find",{"_index":1046,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.findone",{"_index":1049,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.messagesrepo.save(message",{"_index":1045,"title":{},"body":{"injectables/MessageService.html":{}}}],["this.oauthclient",{"_index":879,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":886,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":291,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":1105,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1104,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.requestprotocol",{"_index":1102,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":831,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.userrepository.create",{"_index":746,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":596,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.delete(id",{"_index":1321,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1318,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findbyids",{"_index":508,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["this.userrepository.findone",{"_index":541,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":788,"title":{},"body":{"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(edit",{"_index":1331,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":747,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":597,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userservice.creategoogleuser",{"_index":894,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createusers(createuserdto",{"_index":1271,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.deleteuser(id",{"_index":1275,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.edituser(edituserdto",{"_index":1277,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":1269,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":892,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1152,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.getonebyemail(signindto.email",{"_index":1172,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersrepo.findone",{"_index":1041,"title":{},"body":{"injectables/MessageService.html":{}}}],["through",{"_index":299,"title":{},"body":{"guards/AuthGuardGuard.html":{}}}],["throw",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MessageService.html":{},"injectables/SignInProvider.html":{}}}],["throws",{"_index":289,"title":{},"body":{"guards/AuthGuardGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["time",{"_index":815,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["timestamp",{"_index":976,"title":{},"body":{"entities/Message.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token'})@apibody({type",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["token'})@apiresponse({status",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["token'})@post",{"_index":848,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["token.dto",{"_index":854,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["token.dto.ts",{"_index":909,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:8",{"_index":910,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.guard",{"_index":279,"title":{},"body":{"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:24",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:47",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["tokendto",{"_index":1139,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["tokens",{"_index":801,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["tokens.provider",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":799,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1145,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:13",{"_index":804,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:37",{"_index":1147,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:40",{"_index":812,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:60",{"_index":806,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":1060,"title":{},"body":{"classes/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":1116,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalpage:number",{"_index":1062,"title":{},"body":{"classes/Paginated.html":{}}}],["transfer",{"_index":1226,"title":{},"body":{"controllers/UserController.html":{}}}],["transform",{"_index":679,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["transformation",{"_index":1468,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":567,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"dependencies.html":{},"index.html":{}}}],["transport",{"_index":938,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuardGuard.html":{},"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"modules/MailModule.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["true})@type(undefined",{"_index":559,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuardGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"entities/ChatRoom.html":{},"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/CreateChatRoomDto.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/EditUserDto.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetuserParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleInterface.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"classes/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type:string",{"_index":93,"title":{},"body":{"interfaces/ActiveUserData.html":{}}}],["typeorm",{"_index":418,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"injectables/MessageService.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{}}}],["typeormmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessageModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([chatroom",{"_index":386,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":1022,"title":{},"body":{"modules/MessageModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1290,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":777,"title":{},"body":{"classes/EditUserDto.html":{},"classes/UpdateChatRoomDto.html":{}}}],["types/bcrypt",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["u",{"_index":1112,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["unable",{"_index":732,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["unauthorised",{"_index":898,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthGuardGuard.html":{},"injectables/FindOneByEmail.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('email",{"_index":1173,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('failed",{"_index":901,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception('user",{"_index":791,"title":{},"body":{"injectables/FindOneByEmail.html":{}}}],["unauthorizedexception(error",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["undefined",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"entities/ChatRoom.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":612,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["under",{"_index":1499,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":400,"title":{},"body":{"entities/ChatRoom.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/SignInDto.html":{},"entities/User.html":{}}}],["unknown",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MessageController.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1514,"title":{},"body":{"properties.html":{}}}],["up",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["update",{"_index":435,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"controllers/MessageController.html":{},"injectables/MessageService.html":{},"controllers/UserController.html":{}}}],["update(@param('messageid",{"_index":1014,"title":{},"body":{"controllers/MessageController.html":{}}}],["update(id",{"_index":455,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{}}}],["update(messageid",{"_index":999,"title":{},"body":{"controllers/MessageController.html":{},"injectables/MessageService.html":{}}}],["updatechatroomdto",{"_index":456,"title":{"classes/UpdateChatRoomDto.html":{}},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"classes/UpdateChatRoomDto.html":{},"coverage.html":{}}}],["updatechatroomdto.userids",{"_index":525,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.length",{"_index":527,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updatechatroomdto.userids.map(id",{"_index":526,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["updated",{"_index":1236,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated'})@patch",{"_index":1237,"title":{},"body":{"controllers/UserController.html":{}}}],["updates",{"_index":1239,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updating",{"_index":1302,"title":{},"body":{"injectables/UserService.html":{}}}],["uppercase",{"_index":619,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["uproper",{"_index":1484,"title":{},"body":{"index.html":{}}}],["url(this.request.url",{"_index":1107,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["useclass",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["used",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["usefactory",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory:async(config:configservice",{"_index":937,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":1492,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":460,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useguards(jwtauthguard",{"_index":469,"title":{},"body":{"controllers/ChatRoomController.html":{}}}],["useinterceptors",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":87,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailProvider.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/Message.html":{},"modules/MessageModule.html":{},"injectables/MessageService.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apibody({type",{"_index":1222,"title":{},"body":{"controllers/UserController.html":{}}}],["user'})@apiresponse({status",{"_index":582,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["user'})@isenum(userrole)@isoptional()@transform",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.chatrooms",{"_index":411,"title":{},"body":{"entities/ChatRoom.html":{}}}],["user.controller",{"_index":1283,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":726,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"coverage.html":{}}}],["user.dto.ts:108",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:12",{"_index":774,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:121",{"_index":623,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:133",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:146",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:159",{"_index":613,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":972,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:43",{"_index":971,"title":{},"body":{"classes/MatchPasswordsConstraint.html":{}}}],["user.dto.ts:63",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:76",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:89",{"_index":629,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":833,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailProvider.html":{}}}],["user.entitly",{"_index":725,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.firstname",{"_index":967,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user.id",{"_index":548,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["user.messages",{"_index":981,"title":{},"body":{"entities/Message.html":{}}}],["user.password",{"_index":1178,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1285,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.provider.ts",{"_index":708,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:14",{"_index":711,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:40",{"_index":720,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user:user):promise",{"_index":960,"title":{},"body":{"injectables/MailProvider.html":{}}}],["user?.[field",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":132,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":437,"title":{},"body":{"controllers/ChatRoomController.html":{},"injectables/ChatRoomService.html":{},"injectables/GenerateTokensProvider.html":{}}}],["userids",{"_index":552,"title":{},"body":{"classes/CreateChatRoomDto.html":{}}}],["usermodule",{"_index":125,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":487,"title":{},"body":{"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByEmail.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["userrole",{"_index":608,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":704,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"entities/User.html":{}}}],["users",{"_index":392,"title":{},"body":{"entities/ChatRoom.html":{},"injectables/ChatRoomService.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/GetuserParamDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["users'})@get('/:id?')@get('/:id",{"_index":1248,"title":{},"body":{"controllers/UserController.html":{}}}],["users.length",{"_index":511,"title":{},"body":{"injectables/ChatRoomService.html":{}}}],["users/user.controller",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["users/user.entitly",{"_index":385,"title":{},"body":{"modules/ChatModule.html":{},"entities/Message.html":{},"modules/MessageModule.html":{}}}],["users/user.module",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["userservice",{"_index":342,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":1262,"title":{},"body":{"controllers/UserController.html":{}}}],["usersrepo",{"_index":1026,"title":{},"body":{"injectables/MessageService.html":{}}}],["user})@apiresponse({status",{"_index":713,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["using",{"_index":588,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/EditUserDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"index.html":{}}}],["utilities",{"_index":1467,"title":{},"body":{"index.html":{}}}],["validate",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"injectables/RefreshTokensProvider.html":{}}}],["validate(confirmpassword",{"_index":691,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validate(matchpasswordsconstraint",{"_index":701,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatenested",{"_index":676,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validates",{"_index":687,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validating",{"_index":1148,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["validation",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"index.html":{}}}],["validationarguments",{"_index":675,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validator",{"_index":566,"title":{},"body":{"classes/CreateChatRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/EditUserDto.html":{},"classes/GetuserParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{},"index.html":{}}}],["validatorconstraint",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["value",{"_index":703,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1516,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":883,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["version",{"_index":1512,"title":{},"body":{"properties.html":{}}}],["via",{"_index":574,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["void",{"_index":870,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["web",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["websocketgateway",{"_index":164,"title":{"classes/WebsocketGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/WebsocketGateway.html":{},"coverage.html":{}}}],["websocketmodule",{"_index":126,"title":{"modules/WebSocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WebSocketModule.html":{},"modules.html":{},"overview.html":{}}}],["welcome",{"_index":965,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail",{"_index":952,"title":{},"body":{"injectables/MailProvider.html":{}}}],["welcomeemail(user",{"_index":956,"title":{},"body":{"injectables/MailProvider.html":{}}}],["whether",{"_index":277,"title":{},"body":{"guards/AuthGuardGuard.html":{},"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["windows/linux",{"_index":1490,"title":{},"body":{"index.html":{}}}],["world",{"_index":1342,"title":{},"body":{"classes/WebsocketGateway.html":{}}}],["yes",{"_index":816,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["z0",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[0",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["z])(?=.*[a",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["za",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MatchPasswordsConstraint.html":{}}}],["zoom",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/GoogleAuthticationModule.html":{},"modules/MailModule.html":{},"modules/MessageModule.html":{},"modules/PaginationModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/access-token/access-token.guard.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    //Extract the request from the execution context\n    const request = context.switchToHttp().getRequest();\n    // Extract the token from the header\n    const token = this.extractRequestFromHeader(request);\n    // Validate the token\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request[REQUEST_USER_KEY] = payload;\n      console.log(payload);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request) {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/activeInterface.ts\n        \n\n\n            \n                Description\n            \n            \n                Active user data interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    email of type:string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    sub of type:string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n    \n    /**sub of type:string */\n    sub: number,\n\n    /**email of type:string */\n    email?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                App controller class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:12\n                        \n                    \n\n\n            \n                \n                        get method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**App controller class */\n@Controller()\nexport class AppController {\n    /**constructor for the app service */\n  constructor(private readonly appService: AppService) {}\n\n  /**get method */\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MessageModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WebSocketModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './users/user.module';\n// import { MailerModule } from '@nestjs-modules/mailer';\nimport { PaginationModule } from './common/pagination.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AuthController } from './auth/auth.controller';\nimport { UserController } from './users/user.controller';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AuthGuardGuard } from './auth/guard/auth-guard/auth-guard.guard';\n// import { MessagesModule } from './messages/messages.module';\nimport { ChatModule } from './chatrooms/chatrooms.module';\nimport { MessageModule } from './messages/messages.module';\nimport { WebSocketModule } from './web-socket/web-socket.module';\nimport { WebsocketGateway } from './web-socket/websocketEvents/websocket.gateway';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env.development'],\n      load: [appConfig, databaseConfig],\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('database.host'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n        blog: configService.get('database.blog'),\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get('database.autoload'),\n      }),\n    }),\n    AuthModule,\n    UserModule,\n    PaginationModule,\n    ChatModule,\n    MessageModule,\n    // MessagesModule,\n    WebSocketModule\n  ],\n  controllers: [AppController, AuthController, UserController],\n  providers: [\n    AppService,\n    WebsocketGateway,\n    // {\n    //   provide: APP_GUARD,\n    //   useClass: AuthGuardGuard,\n    // },\n    // {\n    //   provide: APP_INTERCEPTOR,\n    //   useClass: DataResponseInterceptor\n    // },\n    // AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService  class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:8\n                        \n                    \n\n\n            \n                \n                        Get  hello method\n\n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**AppService  class*/\n@Injectable()\n\nexport class AppService {\n  \n   /**Get  hello method */\n  getHello(): string {\n    return 'Hello';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Auth controller class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                RefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        RefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    RefreshToken(refreshToken: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refreshToken')@ApiOperation({summary: 'Refresh authentication token'})@ApiResponse({status: undefined, description: 'Token refreshed successfully'})@ApiResponse({status: undefined, description: 'Invalid refresh token'})@ApiBody({type: RefreshTokenDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Refresh token method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRefresh token object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                New access token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signIn')@Auth(authTypes.None)@HttpCode(HttpStatus.OK)@UseInterceptors(ClassSerializerInterceptor)@ApiOperation({summary: 'User sign-in'})@ApiResponse({status: undefined, description: 'User signed in successfully'})@ApiResponse({status: undefined, description: 'Invalid credentials'})@ApiBody({type: SignInDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Sign in method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser credentials\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Access token and user details\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, HttpCode, HttpStatus, Post, UseInterceptors } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/userDto';\nimport { authTypes } from './enums/authTypes.enum';\nimport { RefreshTokenDto } from './dtos/refreshTokenDto';\nimport { Auth } from './decorators/auth.decorator';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';\n\n/**\n * Auth controller class\n */\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        /** Injecting auth service*/ \n        private readonly authservice: AuthService,\n    ) {}\n\n    /**\n     * Sign in method\n     * @param signInDto - User credentials\n     * @returns Access token and user details\n     */\n    @Post('/signIn')\n    @Auth(authTypes.None)\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(ClassSerializerInterceptor)\n    @ApiOperation({ summary: 'User sign-in' })\n    @ApiResponse({ status: HttpStatus.OK, description: 'User signed in successfully' })\n    @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Invalid credentials' })\n    @ApiBody({ type: SignInDto })\n    public async SignIn(@Body() signInDto: SignInDto) {\n       return await this.authservice.SignIn(signInDto);\n    }\n\n    /**\n     * Refresh token method\n     * @param refreshToken - Refresh token object\n     * @returns New access token\n     */\n    @Post('/refreshToken')\n    @ApiOperation({ summary: 'Refresh authentication token' })\n    @ApiResponse({ status: HttpStatus.OK, description: 'Token refreshed successfully' })\n    @ApiResponse({ status: HttpStatus.UNAUTHORIZED, description: 'Invalid refresh token' })\n    @ApiBody({ type: RefreshTokenDto })\n    public RefreshToken(@Body() refreshToken: RefreshTokenDto) {\n        return this.authservice.refreshToken(refreshToken);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardGuard.html":{"url":"guards/AuthGuardGuard.html","title":"guard - AuthGuardGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    AuthGuard class implementing CanActivate\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/auth-guard/auth-guard.guard.ts:54\n                        \n                    \n\n\n            \n                \n                        CanActivate method to get authTypes from the reflector\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A boolean indicating whether the request is authorized\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { authTypes } from 'src/auth/enums/authTypes.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * AuthGuard class implementing CanActivate\n */\n@ApiTags('Auth')\n@Injectable()\nexport class AuthGuardGuard implements CanActivate {\n  /**\n   * Injecting default AuthType\n   */\n  private static readonly defaultAuthType = authTypes.Bearer;\n\n  /**\n   * Injecting default AuthTypeGuardMap\n   */\n  private readonly authTypeGuardMap: Record = {\n    [authTypes.Bearer]: this.accessTokenGuard,\n    [authTypes.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    /**\n     * Injecting reflector\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting Access Token Guard\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * CanActivate method to get authTypes from the reflector\n   * @param context - Execution context\n   * @returns A boolean indicating whether the request is authorized\n   * @throws UnauthorizedException if access is denied\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get authTypes from the reflector\n    const authTypes =\n      this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]) ?? [AuthGuardGuard.defaultAuthType];\n\n    // Get array of guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]);\n\n    // Loop through the guards and execute the canActivate method\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        error: err;\n      });\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw new UnauthorizedException();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { BcryptProvider } from './providers/bcrypt';\nimport { HashingProvider } from './providers/hashing';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './guard/access-token/access-token.guard';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { UserModule } from 'src/users/user.module';\nimport { AuthController } from './auth.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UserModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // Use the abstract class as a token\n      useClass: BcryptProvider, // Bind it to the concrete implementation\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Auth service class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n                        method for the refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n                        signin method taking signinDto\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { UserService } from 'src/users/provider/user.service';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n/**Auth service class */\n@Injectable()\nexport class AuthService {\n    constructor(\n        /* \n          injecting user service\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /*inject signInProvider*/\n        private readonly signInProvider: SignInProvider,\n\n        /* \n         inject refreshTokenProvider\n         */\n         private readonly refreshTokensProvider: RefreshTokensProvider\n    ) {}\n\n        /**signin method taking signinDto */\n    public async SignIn(signInDto: SignInDto) {\n        return await this.signInProvider.SignIn(signInDto)\n    }\n\n        /**method for the refresh token */\n    public refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return this.refreshTokensProvider.refreshTokens(refreshTokenDto)\n    }    \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.ts\n        \n\n\n            \n                Description\n            \n            \n                injectable decorator\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:18\n                        \n                    \n\n\n            \n                \n                        Comparing password method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.ts:10\n                        \n                    \n\n\n            \n                \n                        Hasshing  password method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing';\nimport * as bcrypt from 'bcrypt';\n\n/**injectable decorator */\n@Injectable()\n/**BcryptProvider class that implements Hashing provider */\nexport class BcryptProvider implements HashingProvider {\n        /**Hasshing  password method*/\n    public async hashPassword(inpPassword: string | Buffer): Promise {\n        const saltRounds = 10\n        const salt = await bcrypt.genSalt(saltRounds)\n        \n        return await bcrypt.hash(inpPassword, salt) \n    }\n\n    /**Comparing password method */ \n    public async comparePasswords(password: string, encryPassword: string): Promise {\n        return await bcrypt.compare(password, encryPassword)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_exports\n\n\n\n\nChatRoomService \n\nChatRoomService \n\n\n\nChatModule\n\nChatModule\n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chatrooms/chatrooms.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            chatroom module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatRoomController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatRoomService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ChatRoom } from './chatroom.entity'; \nimport { ChatRoomController } from './chatroom.controller';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service'; \nimport { User } from '../users/user.entitly'; \n\n/**chatroom module */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ChatRoom, User]),\n  ],\n  controllers: [ChatRoomController],\n  providers: [ChatRoomService],\n  exports: [ChatRoomService],\n})\nexport class ChatModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ChatRoom.html":{"url":"entities/ChatRoom.html","title":"entity - ChatRoom","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ChatRoom\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Chatroom entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:30\n                        \n                    \n\n            \n                \n                    The date the chat was created\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:10\n                        \n                    \n\n            \n                \n                    unique identifier\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ChatRoomType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:21\n                        \n                    \n\n            \n                \n                    chatroomtype  of type enum\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.chatRooms, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/chatroom.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToMany, CreateDateColumn, JoinTable } from 'typeorm';\nimport { User } from 'src/users/user.entitly'; \nimport { ChatRoomType } from './enums/chatroomType';\n\n/**Chatroom entity */\n@Entity('chat_rooms')\nexport class ChatRoom {\n  /**unique identifier */\n  @PrimaryGeneratedColumn() \n  id: number;\n\n  @Column('varchar', { length: 100 })\n  name: string;\n\n  /**chatroomtype  of type enum */\n  @Column({\n    type: 'enum',\n    enum: ChatRoomType,\n    default: ChatRoomType.GROUP\n  })\n  type: ChatRoomType;\n\n  @ManyToMany(() => User, (user) => user.chatRooms, {\n    onDelete: 'CASCADE' // Automatically handles the relationship cleanup\n  })\n  users: User[];\n\n  /**The date the chat was created */\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatRoomController.html":{"url":"controllers/ChatRoomController.html","title":"controller - ChatRoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatRoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/chatroom.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat-rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addUser\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                removeUser\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        chat room to create a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        chat room to delete a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: number, userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/users/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/chatrooms/chatroom.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // src/chatrooms/chatroom.controller.ts\nimport { \n  Controller, \n  Get, \n  Post, \n  Body, \n  Patch, \n  Param, \n  Delete, \n  UseGuards,\n  ParseIntPipe\n} from '@nestjs/common';\nimport { ChatRoomService } from './providers/chatrooms/chatrooms.service';\nimport { CreateChatRoomDto } from './DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from './DTOs/update-chat-room.dto';\n// import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\n\n@Controller('chat-rooms')\n// @UseGuards(JwtAuthGuard)\nexport class ChatRoomController {\n  constructor(private readonly chatRoomService: ChatRoomService) {}\n\n    /**chat room to create a post */\n  @Post()\n  create(@Body() createChatRoomDto: CreateChatRoomDto) {\n    return this.chatRoomService.create(createChatRoomDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.chatRoomService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateChatRoomDto: UpdateChatRoomDto\n  ) {\n    return this.chatRoomService.update(id, updateChatRoomDto);\n  }\n\n  /**chat room to delete a post */\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.chatRoomService.remove(id);\n  }\n\n  @Post(':id/users/:userId')\n  addUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.addUserToChatRoom(id, userId);\n  }\n\n  @Delete(':id/users/:userId')\n  removeUser(\n    @Param('id', ParseIntPipe) id: number,\n    @Param('userId', ParseIntPipe) userId: number\n  ) {\n    return this.chatRoomService.removeUserFromChatRoom(id, userId);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatRoomService.html":{"url":"injectables/ChatRoomService.html","title":"injectable - ChatRoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatRoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/providers/chatrooms/chatrooms.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Chatroom service class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserToChatRoom\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeUserFromChatRoom\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatRoomRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatRoomRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addUserToChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    addUserToChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createChatRoomDto: CreateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createChatRoomDto\n                                            \n                                                            CreateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUserFromChatRoom\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserFromChatRoom(chatRoomId: number, userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateChatRoomDto: UpdateChatRoomDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/chatrooms/providers/chatrooms/chatrooms.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateChatRoomDto\n                                            \n                                                            UpdateChatRoomDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ChatRoom } from '../../chatroom.entity';\nimport { CreateChatRoomDto } from '../../DTOs/create-chat-room.dto';\nimport { UpdateChatRoomDto } from '../../DTOs/update-chat-room.dto';\nimport { User } from 'src/users/user.entitly';\nimport { ChatRoomType } from '../../enums/chatroomType';\n\n/**\n * Chatroom service class\n */\n@Injectable()\nexport class ChatRoomService {\n  constructor(\n    @InjectRepository(ChatRoom)\n    private chatRoomRepository: Repository,\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n  async create(createChatRoomDto: CreateChatRoomDto): Promise {\n    // Find users by their numeric IDs\n    const users = await this.userRepository.findByIds(\n      createChatRoomDto.userIds.map(id => Number(id))\n    );\n    \n    if (users.length !== createChatRoomDto.userIds.length) {\n      throw new NotFoundException('One or more users not found');\n    }\n\n    // Create new chat room\n    const chatRoom = this.chatRoomRepository.create({\n      name: createChatRoomDto.name,\n      type: createChatRoomDto.type || ChatRoomType.GROUP,\n      users: users\n    });\n\n    return await this.chatRoomRepository.save(chatRoom);\n  }\n\n  async findAll(): Promise {\n    return this.chatRoomRepository.find({\n      relations: ['users'],\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const chatRoom = await this.chatRoomRepository.findOne({\n      where: { id: Number(id) },\n      relations: ['users'],\n    });\n\n    if (!chatRoom) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n\n    return chatRoom;\n  }\n\n  async update(id: number, updateChatRoomDto: UpdateChatRoomDto): Promise {\n    const chatRoom = await this.findOne(id);\n    \n    if (updateChatRoomDto.userIds) {\n      const users = await this.userRepository.findByIds(\n        updateChatRoomDto.userIds.map(id => Number(id))\n      );\n      \n      if (users.length !== updateChatRoomDto.userIds.length) {\n        throw new BadRequestException('One or more users not found');\n      }\n\n      if (chatRoom.type === ChatRoomType.PRIVATE && users.length !== 2) {\n        throw new BadRequestException('Private chat rooms must have exactly 2 users');\n      }\n\n      chatRoom.users = users;\n    }\n\n    Object.assign(chatRoom, updateChatRoomDto);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async remove(id: number): Promise {\n    const result = await this.chatRoomRepository.delete(Number(id));\n    \n    if (result.affected === 0) {\n      throw new NotFoundException(`Chat room with ID ${id} not found`);\n    }\n  }\n\n  async addUserToChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n    const user = await this.userRepository.findOne({ \n      where: { id: Number(userId) }\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${userId} not found`);\n    }\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot add users to private chat rooms');\n    }\n\n    chatRoom.users.push(user);\n    return this.chatRoomRepository.save(chatRoom);\n  }\n\n  async removeUserFromChatRoom(chatRoomId: number, userId: number): Promise {\n    const chatRoom = await this.findOne(chatRoomId);\n\n    if (chatRoom.type === ChatRoomType.PRIVATE) {\n      throw new BadRequestException('Cannot remove users from private chat rooms');\n    }\n\n    chatRoom.users = chatRoom.users.filter(user => user.id !== Number(userId));\n    return this.chatRoomRepository.save(chatRoom);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChatRoomDto.html":{"url":"classes/CreateChatRoomDto.html","title":"class - CreateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/create-chat-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                type\n                            \n                            \n                                    \n                                    \n                                    \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoomType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ChatRoomType)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNumber({}, {each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chatrooms/DTOs/create-chat-room.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsArray, IsUUID, IsOptional, IsNumber } from 'class-validator';\nimport { ChatRoomType } from '../enums/chatroomType'; \nimport { Type } from 'class-transformer';\n\nexport class CreateChatRoomDto {\n  @IsString()\n  name: string;\n\n  @IsEnum(ChatRoomType)\n  @IsOptional()\n  type?: ChatRoomType;\n\n\n  @IsArray()\n  @IsNumber({}, { each: true })\n  @Type(() => Number)\n  userIds: number[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/googleUserProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for creating users authenticated via Google.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/googleUserProvider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Google-authenticated user'})@ApiResponse({status: 201, description: 'User successfully created.'})@ApiResponse({status: 409, description: 'Could not create a new user.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/googleUserProvider.ts:35\n                        \n                    \n\n\n            \n                \n                        Creates a new user using Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Google user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created user entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { GoogleInterface } from '../../auth/social/interfaces/user.interface';\nimport { Repository } from 'typeorm';\nimport { User } from 'src/users/user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Service responsible for creating users authenticated via Google.\n */\n@ApiTags('Users')\n@Injectable()\n\n/**Create Google User Provider class */\nexport class CreateGoogleUserProvider {\n  constructor(\n    /**\n     * Injects the user repository.\n     */\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new user using Google authentication.\n   * @param googleUser - The Google user data.\n   * @returns The created user entity.\n   * @throws ConflictException if user creation fails.\n   */\n  @ApiOperation({ summary: 'Create a Google-authenticated user' })\n  @ApiResponse({ status: 201, description: 'User successfully created.' })\n  @ApiResponse({ status: 409, description: 'Could not create a new user.' })\n\n  /**Method to create GoogleUser */\n  public async createGoogleUser(googleUser: GoogleInterface): Promise {\n    try {\n      const user = this.userRepository.create(googleUser);\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                chatRooms\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                confirmpassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        confirmpassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Must contain numbers, alphabets, uppercase letters, and match the password'})@IsString()@MaxLength(225)@Validate(MatchPasswordsConstraint)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:121\n                        \n                    \n\n            \n                \n                    Confirm password field, must match the password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'fatimaaminu@mail.com', description: 'Email field'})@IsEmail()@MaxLength(150)@Column({unique: true, length: 150})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:89\n                        \n                    \n\n            \n                \n                    Email field (must be unique).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Fatima', description: 'First name field'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:63\n                        \n                    \n\n            \n                \n                    First name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'poiuytrdspoiuytrewazxcvbnmml;poiuytrdsdcvbnm]', description: 'This is auto-generated from Google when you sign up with Google'})@IsString()@IsOptional()@MaxLength(225)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:146\n                        \n                    \n\n            \n                \n                    Google ID (used for OAuth authentication).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: 'Aminu', description: 'Last name field'})@IsString()@IsOptional()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:76\n                        \n                    \n\n            \n                \n                    Last name of the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', example: '@Password123', description: 'Password should contain a number, alphabets, and an uppercase letter'})@IsString()@MaxLength(225)@Matches(/^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/, {message: 'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:108\n                        \n                    \n\n            \n                \n                    Password field with specific validation rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: userRole, description: 'Role of the user'})@IsEnum(userRole)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-user.dto.ts:133\n                        \n                    \n\n            \n                \n                    User role (default is USER if not provided).\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nexport class MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  /**\n   * Validates whether the confirmPassword field matches the password field.\n   * @param confirmPassword - The confirm password input.\n   * @param args - Validation arguments.\n   * @returns Boolean indicating if passwords match.\n   */\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  /**\n   * Returns the default error message for password mismatch.\n   * @param args - Validation arguments.\n   * @returns Error message string.\n   */\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user.\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain a number, alphabets, and an uppercase letter',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Must contain numbers, alphabets, uppercase letters, and match the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    description: 'Role of the user',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is auto-generated from Google when you sign up with Google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/create-user.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling user creation\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                createUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/create-user.provider.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for User entity\n\n\n                                                        \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for password hashing\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiResponse({status: 201, description: 'User successfully created.', type: User})@ApiResponse({status: 400, description: 'User already exists.'})@ApiResponse({status: 408, description: 'Database connection issue.'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/provider/create-user.provider.ts:40\n                        \n                    \n\n\n            \n                \n                        Creates a new user in the system\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created user.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {   BadRequestException,   forwardRef,   Inject,   Injectable,   RequestTimeoutException, } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { HashingProvider } from 'src/auth/providers/hashing';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Service responsible for handling user creation\n */\n@ApiTags('Users')\n@Injectable()\nexport class CreateUserProvider {\n  /**\n   * Constructor to inject dependencies.\n   * @param userRepository - Repository for User entity\n   * @param hashingProvider - Service for password hashing\n   */\n  constructor(\n    /** Inject userRepository */\n    @InjectRepository(User) private userRepository: Repository,\n\n    /** Inject hashingProvider */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  /**\n   * Creates a new user in the system\n   * @param createUserDto - DTO containing user data.\n   * @returns The newly created user.\n   * @throws BadRequestException If the user already exists.\n   * @throws RequestTimeoutException If there is an issue connecting to the database.\n   */\n  @ApiOperation({ summary: 'Create a new user' })\n  @ApiResponse({ status: 201, description: 'User successfully created.', type: User })\n  @ApiResponse({ status: 400, description: 'User already exists.' })\n  @ApiResponse({ status: 408, description: 'Database connection issue.' })\n  public async createUsers(createUserDto: CreateUserDto): Promise {\n    let existingUser = undefined;\n\n    try {\n      existingUser = await this.userRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'The user is having network issues',\n        },\n      );\n    }\n\n    if (existingUser) {\n      throw new BadRequestException('User already exists');\n    }\n\n    const hashedPassword = await this.hashingProvider.hashPassword(\n      createUserDto.password,\n    );\n\n    const newUser = this.userRepository.create({\n      ...createUserDto,\n      password: hashedPassword,\n    });\n\n    try {\n      await this.userRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, Please try later',\n        {\n          description: 'Error connecting to your database',\n          cause: 'The user is having network issues',\n        },\n      );\n    }\n\n    return newUser;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptor/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptor/data-response/data-response.interceptor.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, \n  ExecutionContext, \n  Injectable, \n  NestInterceptor \n} from '@nestjs/common';\nimport { map, Observable, pipe, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('before')\n    return next.handle().pipe(map((data) => ({\n      apiversrion:'0.0.1',\n      result: data.length,\n      data: data\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                using the patch to edit part of the data, the partialtype makes everything optional\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/patch-user.dto.ts:12\n                        \n                    \n\n            \n                \n                    unique identifier id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsInt, IsNotEmpty, IsString } from \"class-validator\";\nimport { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\n \n/**using the patch to edit part of the data, the partialtype makes everything optional */ \nexport class EditUserDto extends PartialType(CreateUserDto) {\n    /**unique identifier id */\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByEmail.html":{"url":"injectables/FindOneByEmail.html","title":"injectable - FindOneByEmail","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByEmail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-email.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for finding a user by email.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-email.ts:10\n                            \n                        \n\n                \n                    \n                            Injects the User repository for database operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository to interact with the User entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-email.ts:27\n                        \n                    \n\n\n            \n                \n                        Method to find a user by email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The found user.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n/**\n   Service responsible for finding a user by email.\n */\n@Injectable()\nexport class FindOneByEmail {\n     /**\n       Injects the User repository for database operations.\n      @param {Repository} userRepository - Repository to interact with the User entity.\n     */\n    constructor(\n        @InjectRepository(User) private userRepository: Repository) {}\n\n        \n    /**\n     \n      @param {string} email - The email of the user to find.\n      @returns {Promise} The found user.\n      @throws {RequestTimeoutException} If there is an issue connecting to the database.\n      @throws {UnauthorizedException} If the user does not exist.\n     */\n     /** Method to find a user by email. */\n    public async findOneByEmail(email: string): Promise {\n        let user: User | undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({ email });\n        } catch (error) {\n            throw new RequestTimeoutException('Could not fetch user', {\n                description: 'Error connecting to database',\n            });\n        }\n\n        if (!user) {\n            throw new UnauthorizedException('User does not exist');\n        }\n\n        return user; \n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/find-one-by-googleId.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for finding a user by Google ID.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/find-one-by-googleId.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/find-one-by-googleId.ts:20\n                        \n                    \n\n\n            \n                \n                        Method to find a user by their Google ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entitly';\n\n/**\n  Service responsible for finding a user by Google ID.\n */\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /*\n     *inject userRepository\n     */\n    @InjectRepository(User)\n    private userRepository: Repository,\n  ) {}\n\n   /** Method to find a user by their Google ID. */\n  public async findOneByGoogleId(googleId: string) {\n    return await this.userRepository.findOneBy({ googleId })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable service for generating tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:60\n                        \n                    \n\n\n            \n                \n                        Generates access and refresh tokens for a given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user entity for whom tokens are generated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An object containing access token, refresh token, and user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Signs a token with a given user ID, expiration time, and optional payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user.\n\n\n                                            \n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe expiration time for the token.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAdditional data to include in the token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A signed JWT token.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { ActiveUserData } from '../interface/activeInterface';\nimport { UserService } from 'src/users/provider/user.service';\nimport { User } from 'src/users/user.entitly';\n\n/**\n * Injectable service for generating tokens.\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Injecting userService repository.\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * Injecting JwtService.\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting jwtConfig.\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Signs a token with a given user ID, expiration time, and optional payload.\n   * @param userId - The ID of the user.\n   * @param expiresIn - The expiration time for the token.\n   * @param payload - Additional data to include in the token.\n   * @returns A signed JWT token.\n   */\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      } as ActiveUserData,\n      {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        expiresIn,\n      },\n    );\n  }\n\n  /**\n   * Generates access and refresh tokens for a given user.\n   * @param user - The user entity for whom tokens are generated.\n   * @returns An object containing access token, refresh token, and user details.\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      /**\n       * Generate access token.\n       */\n      this.signToken(user.id, this.jwtConfiguration.ttl, { email: user.email }),\n\n      /**\n       * Generate refresh token.\n       */\n      this.signToken(user.id, this.jwtConfiguration.ttl),\n    ]);\n\n    return { accessToken, refreshToken, user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetuserParamDto.html":{"url":"classes/GetuserParamDto.html","title":"class - GetuserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetuserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/getUserparamdto.ts\n        \n\n\n            \n                Description\n            \n            \n                Get users paramsdto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/getUserparamdto.ts:10\n                        \n                    \n\n            \n                \n                    Unique identifier id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional,IsInt } from \"class-validator\";\nimport { Type } from 'class-transformer';\n\n/**Get users paramsdto class */\nexport class GetuserParamDto {\n   \n     /**Unique identifier id */\n    @IsInt()\n    @Type (() => Number )\n    id?:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n            \n                Description\n            \n            \n                Google authentication controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Authenticate user with Google token'})@ApiResponse({status: 200, description: 'Successfully authenticated user'})@ApiResponse({status: 400, description: 'Invalid Google token'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Authenticates a user using Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Google authentication token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Authentication response.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Auth } from '../decorators/auth.decorator';\nimport { authTypes } from '../enums/authTypes.enum';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n/**\n * Google authentication controller\n */\n@ApiTags('Google Authentication')\n@Auth(authTypes.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n    /**\n     * Constructor for GoogleAuthenticationController\n     * @param googleAuthenticationService - Injects GoogleAuthenticationService\n     */\n    constructor(\n        private readonly googleAuthenticationService: GoogleAuthenticationService\n    ) {}\n\n    /**\n     * Authenticates a user using Google authentication.\n     * @param googleTokenDto - The Google authentication token.\n     * @returns Authentication response.\n     */\n    @ApiOperation({ summary: 'Authenticate user with Google token' })\n    @ApiResponse({ status: 200, description: 'Successfully authenticated user' })\n    @ApiResponse({ status: 400, description: 'Invalid Google token' })\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googleTokenDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Authentication Service\nHandles authentication using Google OAuth tokens.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oAuthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtConfigurattion: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle user-related operations\n\n\n                                                        \n                                                \n                                                \n                                                        jwtConfigurattion\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT\n\n\n                                                        \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to generate authentication tokens\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Authenticate method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nDTO containing the Google ID token\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The generated authentication tokens for the user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oAuthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                        \n                    \n\n            \n                \n                    inject oAuthClient\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/authConfig/jwt.config';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\n\n/**\n Google Authentication Service\n  Handles authentication using Google OAuth tokens.\n */\n@Injectable()\n/** OAuth2 client for handling Google authentication */\nexport class GoogleAuthenticationService implements OnModuleInit {\n  /**inject oAuthClient */\n  private oAuthClient: OAuth2Client;\n  /**\n   Constructor to inject dependencies.\n    @param userService - Service to handle user-related operations\n    @param jwtConfigurattion - Configuration object for JWT\n   @param generateTokensProvider - Service to generate authentication tokens\n   */\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n       /** Inject JWT configuration */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfigurattion: ConfigType,\n    /**\n      inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const client_id = this.jwtConfigurattion.googleClient_id;\n    const client_secret = this.jwtConfigurattion.googleClient_secret;\n\n    this.oAuthClient = new OAuth2Client(client_id, client_secret);\n  }\n\n  /**\n    Authenticates a user using a Google token.\n    @param googleTokenDto - DTO containing the Google ID token\n    @returns The generated authentication tokens for the user\n    @throws UnauthorizedException if authentication fails\n   */\n\n    /**Authenticate method */\n  public async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      console.log(\"Received Token:\", googleTokenDto.token);\n\n      // verify the google token sent by user\n      const loginTicket = await this.oAuthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n\n      console.log(\"Google Token Payload:\", loginTicket.getPayload());\n\n      // extract the payload from google jwt token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n\n      // find the user in the database using googleId\n      const user = await this.userService.findOneByGoogleId(googleId);\n\n      // if user exist, generate token\n      if (user) {\n        return this.generateTokensProvider.generateTokens(user);\n      }\n      // else generate the user and create the token\n      const newUser = await this.userService.createGoogleUser({\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        googleId: googleId,\n      });\n      return this.generateTokensProvider.generateTokens(newUser);\n    } catch (error) {\n      // if any of the step fails, send an unauthorised exception\n      console.error(\"Google Auth Error:\", error);\n      throw new UnauthorizedException('failed to authenticate with google');\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleAuthticationModule.html":{"url":"modules/GoogleAuthticationModule.html","title":"module - GoogleAuthticationModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleAuthticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_GoogleAuthticationModule_providers\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/social/google-authtication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GoogleAuthenticationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GoogleAuthenticationController } from './google-authentication.controller';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\n\n@Module({\n  controllers: [GoogleAuthenticationController],\n  providers: [GoogleAuthenticationService]\n})\nexport class GoogleAuthticationModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleInterface.html":{"url":"interfaces/GoogleInterface.html","title":"interface - GoogleInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/interfaces/user.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Google interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    email as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    first name as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Google id as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    last name as strig\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleInterface {\n    /**email as string */\n    email: string\n\n    /**first name as string */\n    firstName: string\n    /**last name as strig */\n    lastName: string\n    /**Google id as string */\n    googleId: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                class for GoogleTokendto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:8\n                        \n                    \n\n            \n                \n                    The Token of type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\n\n/**class for GoogleTokendto */\nexport class GoogleTokenDto {\n\n     /**The Token of type string */\n    @IsNotEmpty()\n    token: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.ts\n        \n\n\n            \n                Description\n            \n            \n                Hasing provider abstract class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(password: string, encryPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:10\n                        \n                    \n\n\n            \n                \n                        comparison during signIn\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(inpPassword: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.ts:7\n                        \n                    \n\n\n            \n                \n                        hashing during signUp\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                inpPassword\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**Hasing provider abstract class */\n@Injectable()\nexport abstract class HashingProvider {\n     /**hashing during signUp */ \n    abstract hashPassword(inpPassword: string | Buffer): Promise\n\n /**comparison during signIn */ \n    abstract comparePasswords(password: string, encryPassword: string): Promise\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { config } from 'process';\nimport { from } from 'form-data';\nimport { Template } from 'ejs';\nimport { join } from 'path';\nimport { strict } from 'assert';\nimport {EjsAdapter} from '@nestjs-modules/mailer/dist/adapters/ejs.adapter'\nimport { MailProvider } from './providers/mail.provider';\n\n\n@Global()\n@Module({\n    imports: [MailerModule.forRootAsync({\n        inject: [ConfigService],\n        useFactory:async(config:ConfigService) => ({\n            transport: {\n                host: config.get('MAIL_HOST'),\n                secure: false,\n                port: config.get('MAIL_PORT'),\n                auth: {\n                    user: config.get('SMTP_USERNAME'),\n                    pass: config.get('SMTP_PASSWORD'),\n                },\n                default: {\n                    from: `no-reply-`\n                },\n                template: {\n                    dir: join(__dirname, 'template'),\n                    adapter: new EjsAdapter({\n                    inlineCssEnabled: true,\n                    }),\n                    Option : {\n                        strict: false,\n                    }\n\n                }\n            }\n        })\n    })],\n    providers: [MailProvider],\n    exports: [MailProvider]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailProvider.html":{"url":"injectables/MailProvider.html","title":"injectable - MailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                WelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        WelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    WelcomeEmail(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { name } from 'ejs';\nimport { User } from 'src/users/user.entitly';\n\n\n@Injectable()\nexport class MailProvider {\n    constructor (\n        //inject the mailer Service\n        private readonly mailerService:MailerService,\n    ) {}\n\n\n    public async WelcomeEmail (user:User):Promise {\n        await this.mailerService.sendMail({\n         to: user.email,\n         from: `helpdesk from realTimeChat.com`,\n         subject: `welcome to realTimeChat`,\n         template: './welcome',\n        context: {\n            name: user.firstName,\n            email: user.email,\n            loginUrl: 'http://localhost:3000/',\n        }\n        })\n\n\n    }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchPasswordsConstraint.html":{"url":"classes/MatchPasswordsConstraint.html","title":"class - MatchPasswordsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchPasswordsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns the default error message for password mismatch.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValidation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Error message string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(confirmPassword: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/DTOs/create-user.dto.ts:32\n                        \n                    \n\n\n            \n                \n                        Validates whether the confirmPassword field matches the password field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                confirmPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe confirm password input.\n\n\n                                            \n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nValidation arguments.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Boolean indicating if passwords match.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsEnum,\n  IsOptional,\n  Validate,\n  MaxLength,\n  Matches,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  IsArray,\n  ValidateNested,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Column } from 'typeorm';\nimport { userRole } from '../Enums/userRole.enum';\nimport { Transform, Type } from 'class-transformer';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n// custum validation to compare passwords\n\n@ValidatorConstraint({ name: 'MatchPasswords', async: false })\nexport class MatchPasswordsConstraint implements ValidatorConstraintInterface {\n  /**\n   * Validates whether the confirmPassword field matches the password field.\n   * @param confirmPassword - The confirm password input.\n   * @param args - Validation arguments.\n   * @returns Boolean indicating if passwords match.\n   */\n  validate(confirmPassword: string, args: ValidationArguments): boolean {\n    const object = args.object as CreateUserDto;\n    if (!object.password) return false; // Ensure password is present\n    return confirmPassword === object.password;\n  }\n\n  /**\n   * Returns the default error message for password mismatch.\n   * @param args - Validation arguments.\n   * @returns Error message string.\n   */\n  defaultMessage(args: ValidationArguments): string {\n    return 'Password and confirm password do not match';\n  }\n}\n\n/**\n * DTO for creating a user.\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Fatima',\n    description: 'First name field',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'Aminu',\n    description: 'Last name field',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  lastName: string;\n\n  /**\n   * Email field (must be unique).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'fatimaaminu@mail.com',\n    description: 'Email field',\n  })\n  @IsEmail()\n  @MaxLength(150)\n  @Column({ unique: true, length: 150 })\n  email: string;\n\n  /**\n   * Password field with specific validation rules.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Password should contain a number, alphabets, and an uppercase letter',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Matches(\n    /^(?=.*[!@#$%^&])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{8,16}$/,\n    {\n      message:\n        'Password must include at least one uppercase letter, one lowercase letter, one number, and one special character.',\n    },\n  )\n  password?: string;\n\n  /**\n   * Confirm password field, must match the password.\n   */\n  @ApiProperty({\n    type: 'string',\n    example: '@Password123',\n    description: 'Must contain numbers, alphabets, uppercase letters, and match the password',\n  })\n  @IsString()\n  @MaxLength(225)\n  @Validate(MatchPasswordsConstraint)\n  confirmpassword?: string;\n\n  /**\n   * User role (default is USER if not provided).\n   */\n  @ApiProperty({\n    enum: userRole,\n    description: 'Role of the user',\n  })\n  @IsEnum(userRole)\n  @IsOptional()\n  @Transform(({ value }) => value ?? userRole.USER)\n  userRole?: userRole;\n\n  /**\n   * Google ID (used for OAuth authentication).\n   */\n  @ApiProperty({\n    type: 'string',\n    example: 'poiuytrdspoiuytrewa\\zxcvbnmml;poiuytrdsdcvbnm]',\n    description: 'This is auto-generated from Google when you sign up with Google',\n  })\n  @IsString()\n  @IsOptional()\n  @MaxLength(225)\n  googleId?: string;\n\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'Chatroom',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => ChatRoom)\n  chatRooms: ChatRoom[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chatRoom\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                sender\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chatRoom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, chatRoom => chatRoom.id, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messages/message.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Entity,\n    PrimaryGeneratedColumn,\n    ManyToOne,\n    Column,\n    CreateDateColumn,\n  } from 'typeorm';\n  import { ChatRoom } from '../chatrooms/chatroom.entity'\n  import { User } from '../users/user.entitly';\n  \n  @Entity()\n  export class Message {\n    @PrimaryGeneratedColumn()\n    id: string;\n  \n    @ManyToOne(() => ChatRoom, (chatRoom) => chatRoom.id, { onDelete: 'CASCADE' })\n    chatRoom: ChatRoom;\n  \n    @ManyToOne(() => User, (user) => user.messages, { onDelete: 'CASCADE' })\n    sender: User;\n  \n    @Column({ type: 'text' })\n    text: string;\n  \n    @CreateDateColumn()\n    timestamp: Date;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessageController.html":{"url":"controllers/MessageController.html","title":"controller - MessageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                message\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':chatRoomId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':messageId')\n                \n            \n\n                    \n                        \n                            Defined in src/messages/messages.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Delete, Patch, Body, Param } from '@nestjs/common';\nimport { MessageService } from './provider/message.service';\n\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) {}\n\n  //  POST: Send a new message\n  @Post()\n  async create(@Body() body: { chatRoomId: string; senderId: string; text: string }) {\n    return await this.messageService.create(body.chatRoomId, body.senderId, body.text);\n    \n  }\n\n  //  GET: Get all messages in a chat room\n  @Get(':chatRoomId')\n  async findAll(@Param('chatRoomId') chatRoomId: string) {\n    return await this.messageService.findAll(chatRoomId);\n  }\n\n  //  DELETE: Delete a message by ID\n  @Delete(':messageId')\n  async delete(@Param('messageId') messageId: string) {\n    return await this.messageService.delete(messageId);\n  }\n\n  //  PATCH: Update a message text by ID\n  @Patch(':messageId')\n  async update(@Param('messageId') messageId: string, @Body() body: { text: string }) {\n    return await this.messageService.update(messageId, body.text);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessageModule.html":{"url":"modules/MessageModule.html","title":"module - MessageModule","body":"\n                   \n\n\n\n\n    Modules\n    MessageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_MessageModule_exports\n\n\n\n\nMessageService \n\nMessageService \n\n\n\nMessageModule\n\nMessageModule\n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessageService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessageController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessageService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Message } from './message.entity';\nimport { MessageService } from './provider/message.service';\nimport { MessageController } from './messages.controller';\nimport { User } from '../users/user.entitly';\nimport { ChatRoom } from 'src/chatrooms/chatroom.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Message, User, ChatRoom])],\n  providers: [MessageService],\n  controllers: [MessageController],\n  exports: [MessageService],\n})\nexport class MessageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessageService.html":{"url":"injectables/MessageService.html","title":"injectable - MessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/provider/message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepo: Repository, chatRoomsRepo: Repository, usersRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/messages/provider/message.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatRoomsRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(chatRoomId: string, senderId: string, text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                senderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(messageId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(chatRoomId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                chatRoomId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(messageId: string, newText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messages/provider/message.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Message } from '../message.entity';\nimport { ChatRoom } from '../../chatrooms/chatroom.entity';\nimport { User } from 'src/users/user.entitly';\n\n@Injectable()\nexport class MessageService {\n  constructor(\n    @InjectRepository(Message) private messagesRepo: Repository,\n    @InjectRepository(ChatRoom) private chatRoomsRepo: Repository,\n    @InjectRepository(User) private usersRepo: Repository,\n  ) {}\n\n  //  Create a new message and SAVE it in DB\n  async create(chatRoomId: string, senderId: string, text: string): Promise {\n    // 1️ Find the chat room\n    const chatRoom = await this.chatRoomsRepo.findOne({ where: { id: chatRoomId as any } });\n    if (!chatRoom) {\n      throw new NotFoundException('Chat room not found');\n    }\n\n    // 2️ Find the sender\n    const sender = await this.usersRepo.findOne({ where: { id: senderId as any } });\n    if (!sender) {\n      throw new NotFoundException('Sender not found');\n    }\n\n    // 3️ Create and save the message in the DB\n    const message = this.messagesRepo.create({ chatRoom, sender, text });\n    return await this.messagesRepo.save(message);\n  }\n\n  //  Find all messages in a chat room\n  async findAll(chatRoomId: string): Promise {\n    return await this.messagesRepo.find({ where: { chatRoom: { id: chatRoomId as any} }, relations: ['sender'] });\n  }\n\n  //  Delete a message\n  async delete(messageId: string): Promise {\n    const result = await this.messagesRepo.delete(messageId);\n    if (result.affected === 0) {\n      throw new NotFoundException('Message not found');\n    }\n  }\n\n  //  Update a message text\n  async update(messageId: string, newText: string): Promise {\n    const message = await this.messagesRepo.findOne({ where: { id: messageId } });\n    if (!message) {\n      throw new NotFoundException('Message not found');\n    }\n\n    message.text = newText;\n    return await this.messagesRepo.save(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Paginated.html":{"url":"classes/Paginated.html","title":"class - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Interfaces/paginatedInterface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                link\n                            \n                            \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/Interfaces/paginatedInterface.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Paginated   {\n    data:T[];\n    meta: {\n        itemsPerPage:number,\n        totalItems: number,\n        currentPage:number,\n        totalPage:number,\n    };\n    link: \n    {\n        first: string,\n        last:string,\n        current: string,\n        previous:string,\n        next:string,\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module,forwardRef } from '@nestjs/common';\nimport { PaginationProvider } from './pagination/Provider/pagination.provider';\n\n\n\n\n@Module({\n  imports:[],\n  providers: [PaginationProvider],\n  controllers: [],\n  exports:[PaginationProvider]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/Provider/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/Provider/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(paginationQueryDto: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/Provider/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQueryDto\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { PaginationQueryDto } from \"../pagination-query.dto\";\nimport { ObjectLiteral, Repository } from \"typeorm\";\nimport { Request } from \"express\";\nimport { REQUEST } from \"@nestjs/core\"\nimport { Paginated } from \"../Interfaces/paginatedInterface\";\n\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor (\n        @Inject(REQUEST)\n        private readonly request:Request,\n    ) {}\n    \n\n    public async paginatedQuery (paginationQueryDto:PaginationQueryDto, repository:Repository,): Promise> {\n\n        const result = await repository.find({\n\n            //skip: number of post\n            //take: number of post to show per page\n            skip: paginationQueryDto.limit * (paginationQueryDto.page - 1),\n            take: paginationQueryDto.limit,\n        })\n\n\n        // create a requestUrl \n        // i.e http://localhost:3000/resource \n        // the http is this.requestprotocol\n        const baseUrl = this.request.protocol; + \"://\" + this.request.headers.host + \"/\"\n\n        const newUrl = new URL(this.request.url, baseUrl)\n\n        console.log(baseUrl);\n        // line 34 give u http://localhost:3000/resource  as result on your terminal\n        console.log(newUrl)\n\n       const totalItems = await repository.count()\n\n       const totalpage = Math.ceil(totalItems / paginationQueryDto.limit)\n\n       const nextpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page +1\n\n       const prevpage = paginationQueryDto.page === 1 ? paginationQueryDto.page: paginationQueryDto.page -1\n\n\n        const finalResponse: Paginated = {\n            data: result,\n            meta: {\n                itemsPerPage: paginationQueryDto.limit,\n                totalItems: totalItems,\n                currentPage: paginationQueryDto.page,\n                totalPage : totalpage\n            }, \n            link: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=1`,\n\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&${totalpage}`,\n   \n               current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${paginationQueryDto.page}`,\n   \n               next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${nextpage}`,\n   \n               previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQueryDto.limit}&page=${prevpage}`\n   \n            }\n        }\n\n        return finalResponse\n\n\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/pagination-query.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from \"class-validator\";\n\n\nexport class PaginationQueryDto {\n\n    @IsOptional()\n    @IsPositive()\n    limit?:number = 2;\n\n    @IsOptional()\n    @IsPositive()\n    page?:number = 1;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refreshTokenDto.ts\n        \n\n\n            \n                Description\n            \n            \n                refresh tokendto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refreshTokenDto.ts:9\n                        \n                    \n\n            \n                \n                    refreshToken of type string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, } from \"class-validator\";\n\n/**refresh tokendto class */\nexport class RefreshTokenDto {\n\n    /**refreshToken of type string */\n    @IsString()\n    @IsNotEmpty()\n    refreshToken: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Refresh token provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:37\n                        \n                    \n\n\n            \n                \n                        A method for validating refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refreshTokenDto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../authConfig/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n/**Refresh token provider class */\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /*\n      injecting userService repo\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /*\n     inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /*\n      inject jwtService\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /* \n      inject generateTokenProvider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider\n  ) {}\n\n    /**A method for validating refresh token */\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    // validate the refresh token using jwt\n   const { sub } = await this.jwtService.verifyAsync(\n        refreshTokenDto.refreshToken, \n        {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n    })\n\n    // grab the user from the database\n    const user = await this.userService.FindOneById(sub)\n\n    // generate the token\n    return await this.generateTokenProvider.generateTokens(user)\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerToClientEvents.html":{"url":"interfaces/ServerToClientEvents.html","title":"interface - ServerToClientEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerToClientEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/interfaces/websockets-message.interface.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface ServerToClientEvents {\n    // newMessage: Payload: Message\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/userDto.ts\n        \n\n\n            \n                Description\n            \n            \n                signinDto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:8\n                        \n                    \n\n            \n                \n                    A unique email address of the user example:Rukky@gmail.com\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/userDto.ts:13\n                        \n                    \n\n            \n                \n                    password of the user\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\n/**signinDto class */\nexport class SignInDto {\n  /**A unique email address of the user example:Rukky@gmail.com */\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**password of the user */\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Sign in provider class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        SignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        A method to check if user exist in db\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/userDto';\nimport { HashingProvider } from './hashing';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/provider/user.service';\n\n/**Sign in provider class */\n@Injectable()\nexport class SignInProvider {\n    constructor(\n        /* \n          injecting userService repo\n         */\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n\n        /* \n          injecting hashing dependency\n         */\n        private readonly hashingProvider: HashingProvider,\n        \n        /* \n          injecting generateTokenProvider\n         */\n        private readonly generateTokenProvider: GenerateTokensProvider\n    ){}\n        /**A method to check if user exist in db */\n        public async SignIn(signInDto: SignInDto) {\n        // check if user exist in db\n        // throw error if user doesnt exist\n        let user = await this.userService.GetOneByEmail(signInDto.email)\n\n        if (!user) {\n            throw new UnauthorizedException('email or password is incorrect');\n        }\n        \n        /**conpare password */\n        let isCheckedPassword: boolean = false\n\n        try {\n            isCheckedPassword = await this.hashingProvider.comparePasswords(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'error  connecting to the database'\n            })\n        }\n\n        if (!isCheckedPassword) {\n            throw new UnauthorizedException('email or password is incorrect')\n        }\n        // login\n        return await this.generateTokenProvider.generateTokens(user)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateChatRoomDto.html":{"url":"classes/UpdateChatRoomDto.html","title":"class - UpdateChatRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateChatRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chatrooms/DTOs/update-chat-room.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateChatRoomDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChatRoomDto } from './create-chat-room.dto';\n\nexport class UpdateChatRoomDto extends PartialType(CreateChatRoomDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entitly.ts\n        \n\n\n            \n                Description\n            \n            \n                User entity representing the user table in the database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                chatRooms\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                messages\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                userRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        chatRooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChatRoom[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, chatRoom => chatRoom.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:61\n                        \n                    \n\n            \n                \n                    Many-to-Many relationship between users and chat rooms.\nThis allows a user to be part of multiple chat rooms.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:35\n                        \n                    \n\n            \n                \n                    Unique email address of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:21\n                        \n                    \n\n            \n                \n                    First name of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 225, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:53\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:28\n                        \n                    \n\n            \n                \n                    Last name of the user.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, message => message.sender, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         userRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: userRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entitly.ts:46\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany, JoinTable, OneToMany } from 'typeorm';\nimport { userRole } from './Enums/userRole.enum';\nimport { ChatRoom } from '../chatrooms/chatroom.entity';\nimport { Message } from 'src/messages/message.entity';\n// import { Message } from 'src/messages/message.entity';\n\n/**\n  User entity representing the user table in the database.\n */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: number;\n\n  /**\n    First name of the user.\n    @example \"John\"\n   */\n  @Column('varchar', { length: 100, nullable: false })\n  firstName: string;\n\n  /**\n     Last name of the user.\n    @example \"Doe\"\n   */\n  @Column('varchar', { length: 100 })\n  lastName: string;\n\n  /**\n   Unique email address of the user.\n    @example \"johndoe@example.com\"\n   */\n  @Column('varchar', { unique: true, nullable: false })\n  email: string;\n\n  @Exclude()\n  @Column('varchar', { nullable: true })\n  password?: string;\n\n  /**\n    @description Role of the user in the application. Default is `USER`.\n   @example \"USER\"\n   */\n  @Column({ type: 'enum', enum: userRole, default: userRole.USER })\n  userRole?: userRole;\n\n  /**\n    @description Google ID for authentication when the user signs up with Google.\n    @example \"123456789-google-id\"\n   */\n  @Column('varchar', { length: 225, nullable: true })\n  googleId?: string;\n\n  /**\n    Many-to-Many relationship between users and chat rooms.\n    This allows a user to be part of multiple chat rooms.\n   */\n  @ManyToMany(() => ChatRoom, (chatRoom) => chatRoom.users)\n  @JoinTable() // This creates a junction table to link users and chat rooms\n  chatRooms: ChatRoom[];\n\n  // One-to-Many relationship with Message\n  @OneToMany(() => Message, (message) => message.sender, { cascade: true })\n  messages: Message[]; // ✅ Make sure this exists\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing user-related operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                editedPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user'})@ApiBody({type: CreateUserDto, description: 'User data'})@ApiResponse({status: 201, description: 'User successfully created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Creates a new user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data transfer object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete a user by ID'})@ApiQuery({name: 'id', required: true, description: 'User ID', example: 1})@ApiResponse({status: 200, description: 'User successfully deleted'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        editedPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    editedPost(edituserDto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user details'})@ApiBody({type: EditUserDto, description: 'Updated user data'})@ApiResponse({status: 200, description: 'User successfully updated'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Updates user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUpdated user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated user details.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getuserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Retrieve users or a single user by ID'})@ApiParam({name: 'id', required: false, description: 'User ID (optional)'})@ApiQuery({name: 'limit', required: false, description: 'Number of users per page', example: 20})@ApiQuery({name: 'page', required: false, description: 'Page number for pagination', example: 1})@ApiResponse({status: 200, description: 'Successful retrieval of users'})@Get('/:id?')@Get('/:id?')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users or a single user if an ID is provided.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getuserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptional user ID parameter.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users per page (default: 20).\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number for pagination (default: 1).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A list of users or a specific user if ID is provided.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from \"@nestjs/common\";\nimport { UserService } from \"./provider/user.service\";\nimport { CreateUserDto } from \"./DTOs/create-user.dto\";\nimport { EditUserDto } from \"./DTOs/patch-user.dto\";\nimport { GetuserParamDto } from \"./DTOs/getUserparamdto\";\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody, ApiResponse } from \"@nestjs/swagger\";\n\n/**\n  Controller for managing user-related operations.\n */\n@Controller('users')\nexport class UserController {\n    /**constructor for injecting user service */\n    constructor(private readonly userService:UserService) {}\n\n    /**\n      Retrieves a list of users or a single user if an ID is provided.\n      @param {GetuserParamDto} getuserParamDto - Optional user ID parameter.\n      @param {number} limit - The number of users per page (default: 20).\n      @param {number} page - The page number for pagination (default: 1).\n      @returns {Promise} A list of users or a specific user if ID is provided.\n     */\n      @ApiOperation({ summary: 'Retrieve users or a single user by ID' })\n      @ApiParam({ name: 'id', required: false, description: 'User ID (optional)' })\n      @ApiQuery({ name: 'limit', required: false, description: 'Number of users per page', example: 20 })\n      @ApiQuery({ name: 'page', required: false, description: 'Page number for pagination', example: 1 })\n      @ApiResponse({ status: 200, description: 'Successful retrieval of users' })\n      @Get('/:id?')\n  \n      /**Get user method */\n    @Get('/:id?')\n  public getUsers(\n    @Param() getuserParamDto: GetuserParamDto,\n    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    console.log(getuserParamDto);\n    return this.userService.findAll(getuserParamDto, limit, page);\n  }\n\n  /**\n    Creates a new user.\n      @param {CreateUserDto} createUserDto - User data transfer object.\n      @returns {Promise} The newly created user.\n     */\n      @ApiOperation({ summary: 'Create a new user' })\n      @ApiBody({ type: CreateUserDto, description: 'User data' })\n      @ApiResponse({ status: 201, description: 'User successfully created' })\n  /**Create a user method */\n@Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.userService.createUsers(createUserDto);\n  }\n  \n  /**\n     Deletes a user by ID.\n      @param {number} id - The ID of the user to delete.\n      @returns {Promise} A confirmation message.\n     */\n      @ApiOperation({ summary: 'Delete a user by ID' })\n      @ApiQuery({ name: 'id', required: true, description: 'User ID', example: 1 })\n      @ApiResponse({ status: 200, description: 'User successfully deleted' })\n\n  /**Delete a user method */\n  @Delete()\n  public deleteUser(@Query('id', ParseIntPipe) id:number)  {\n      return this.userService.deleteUser(id)\n\n  }\n\n  /**\n      Updates user details.\n      @param {EditUserDto} edituserDto - Updated user data.\n      @returns {Promise} The updated user details.\n     */\n      @ApiOperation({ summary: 'Update user details' })\n      @ApiBody({ type: EditUserDto, description: 'Updated user data' })\n      @ApiResponse({ status: 200, description: 'User successfully updated' })\n  \n\n  /**Update or edit  a user method */\n  @Patch()\n  public editedPost(@Body() edituserDto: EditUserDto) {\n    return this.userService.editUser(edituserDto);\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByEmail\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './provider/user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entitly';\nimport { CreateUserProvider } from './provider/create-user.provider';\nimport { FindOneByEmail } from './provider/find-one-by-email';\nimport { MailModule } from 'src/mail/mail.module';\nimport { FindOneByGoogleIdProvider } from './provider/find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './provider/googleUserProvider';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]), MailModule],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    CreateUserProvider,\n    FindOneByEmail,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/provider/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service class for managing user-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUsers\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                editUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                FindOneById\n                            \n                            \n                                    Public\n                                    Async\n                                GetOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, createUserProvider: CreateUserProvider, findOneByemail: FindOneByEmail, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/provider/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByemail\n                                                  \n                                                        \n                                                                        FindOneByEmail\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Creates a new user via Google authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGoogle user data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Method to Creates a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser data for creation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:100\n                        \n                    \n\n\n            \n                \n                        A method to Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Deletion confirmation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(edituserDto: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:113\n                        \n                    \n\n\n            \n                \n                        A method to Updates user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                edituserDto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for updating user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The updated user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetuserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Method to Retrieves all users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetuserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                List of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:133\n                        \n                    \n\n\n            \n                \n                        A method to Finds a user by Google ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nGoogle ID of the user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user associated with the given Google ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        FindOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    FindOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:78\n                        \n                    \n\n\n            \n                \n                        A method to Finds a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The found user or null.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        GetOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/provider/user.service.ts:89\n                        \n                    \n\n\n            \n                \n                        A method to Retrieves a user by email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser email.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The user matching the email.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entitly';\nimport { Repository } from 'typeorm';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../DTOs/create-user.dto';\nimport { FindOneByEmail } from './find-one-by-email';\nimport { EditUserDto } from '../DTOs/patch-user.dto';\nimport { GetuserParamDto } from '../DTOs/getUserparamdto';\nimport { FindOneByGoogleIdProvider } from './find-one-by-googleId';\nimport { CreateGoogleUserProvider } from './googleUserProvider';\nimport { GoogleInterface } from 'src/auth/social/interfaces/user.interface';\n\n\n/**\n   Service class for managing user-related operations.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    /*\n     *inject User entity*/\n     /**\n    Injects dependencies for user management.\n    @param {Repository} userRepository - Repository to interact with the User entity.\n    @param {CreateUserProvider} createUserProvider - Provider to handle user creation.\n    @param {FindOneByEmail} findOneByemail - Service to find a user by email.\n    @param {FindOneByGoogleIdProvider} findOneByGoogleIdProvider - Service to find a user by Google ID.\n    @param {CreateGoogleUserProvider} createGoogleUserProvider - Service to create a user via Google authentication.\n   */\n    @InjectRepository(User)\n    private userRepository: Repository,\n\n    private readonly createUserProvider: CreateUserProvider,\n\n    private readonly findOneByemail: FindOneByEmail,\n\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  /**\n    Retrieves all users.\n    @param {GetuserParamDto} getUserParamDto - Parameters for filtering users.\n    @param {number} limit - Number of users to return.\n    @param {number} page - Page number for pagination.\n    @returns {Promise} List of users.\n   */\n\n  /**Method to Retrieves all users. */\n  public findAll(\n    getUserParamDto: GetuserParamDto,\n    limit: number,\n    page: number,\n  ): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n     Creates a new user.\n    @param {CreateUserDto} createUserDto - User data for creation.\n    @returns {Promise} The created user.\n   */\n\n  /**Method to Creates a new user */\n  public async createUsers(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUsers(createUserDto);\n  }\n\n  /**\n   \n    @param {number} id - User ID.\n    @returns {Promise} The found user or null.\n   */\n\n  /**A method to Finds a user by ID. */\n  public FindOneById(id: number): Promise {\n    return this.userRepository.findOneBy({ id });\n  }\n\n  /**\n    \n    @param {string} email - User email.\n    @returns {Promise} The user matching the email.\n   */\n\n  /**A method to Retrieves a user by email. */\n  public async GetOneByEmail(email: string) {\n    return await this.findOneByemail.findOneByEmail(email);\n  }\n\n  /**\n     \n    @param {number} id - User ID.\n    @returns {Promise} Deletion confirmation.\n   */\n\n  /**A method to Deletes a user by ID. */\n  public async deleteUser(id: number) {\n    await this.userRepository.delete(id);\n\n    return { deleted: true, id };\n  }\n\n  /**\n    \n    @param {EditUserDto} edituserDto - Data for updating user information.\n    @returns {Promise} The updated user.\n   */\n\n  /**A method to Updates user details. */\n  public async editUser(edituserDto: EditUserDto) {\n    let edit = await this.userRepository.findOneBy({\n      id: edituserDto.id,\n    });\n\n    edit.firstName = edituserDto.firstName ?? edit.firstName;\n    edit.lastName = edituserDto.lastName ?? edit.lastName;\n    edit.password = edituserDto.password ?? edit.password;\n    edit.email = edituserDto.email ?? edit.email;\n\n    return this.userRepository.save(edit);\n  }\n\n  /**\n   \n    @param {string} googleId - Google ID of the user.\n    @returns {Promise} The user associated with the given Google ID.\n   */\n\n  /**A method to Finds a user by Google ID. */\n  public async findOneByGoogleId(googleId: string) {\n    return this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  /**\n    @param {GoogleInterface} googleUser - Google user data.\n    @returns {Promise} The created user.\n   */\n  \n  /** Creates a new user via Google authentication. */\n  public async createGoogleUser(googleUser: GoogleInterface) {\n    return this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebSocketModule.html":{"url":"modules/WebSocketModule.html","title":"module - WebSocketModule","body":"\n                   \n\n\n\n\n    Modules\n    WebSocketModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/web-socket/web-socket.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class WebSocketModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebsocketGateway.html":{"url":"classes/WebsocketGateway.html","title":"class - WebsocketGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebsocketGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/web-socket/websocketEvents/websocket.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n                    \n                        \n                            Defined in src/web-socket/websocketEvents/websocket.gateway.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\n\n@WebSocketGateway()\nexport class WebsocketGateway {\n  @SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/activeUser.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refreshTokenDto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/userDto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guard/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/auth-guard/auth-guard.guard.ts\n            \n            guard\n            AuthGuardGuard\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/auth/interface/activeInterface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/social/interfaces/user.interface.ts\n            \n            interface\n            GoogleInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/create-chat-room.dto.ts\n            \n            class\n            CreateChatRoomDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/chatrooms/DTOs/update-chat-room.dto.ts\n            \n            class\n            UpdateChatRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.controller.ts\n            \n            controller\n            ChatRoomController\n            \n                25 %\n                (2/8)\n            \n        \n        \n            \n                \n                src/chatrooms/chatroom.entity.ts\n            \n            entity\n            ChatRoom\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chatrooms/providers/chatrooms/chatrooms.service.ts\n            \n            injectable\n            ChatRoomService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/common/interceptor/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pagination/Interfaces/paginatedInterface.ts\n            \n            class\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/Provider/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.provider.ts\n            \n            injectable\n            MailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/messages/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessageController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/messages/provider/message.service.ts\n            \n            injectable\n            MessageService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-user.dto.ts\n            \n            class\n            MatchPasswordsConstraint\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/getUserparamdto.ts\n            \n            class\n            GetuserParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/provider/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-email.ts\n            \n            injectable\n            FindOneByEmail\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/provider/find-one-by-googleId.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/provider/googleUserProvider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/provider/user.service.ts\n            \n            injectable\n            UserService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/user.entitly.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/web-socket/interfaces/websockets-message.interface.ts\n            \n            interface\n            ServerToClientEvents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/web-socket/websocketEvents/websocket.gateway.ts\n            \n            class\n            WebsocketGateway\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.15.1\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.13.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authTypes   (src/.../authTypes.enum.ts)\n                        \n                        \n                            ChatRoomType   (src/.../chatroomType.ts)\n                        \n                        \n                            userRole   (src/.../userRole.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/authTypes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        authTypes\n                    \n                \n                    \n                        \n                            define authTypes enum\n\n                        \n                    \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/chatrooms/enums/chatroomType.ts\n    \n        \n            \n                \n                    \n                        \n                        ChatRoomType\n                    \n                \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n\n    src/users/Enums/userRole.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        userRole\n                    \n                \n                    \n                        \n                            Enum for user role\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The main entry point of the application. \nIt initializes the NestJS application, sets up global configurations, \nand starts the server.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nrealTimeChat (NestJS Project)\nThis is a NestJS project bootstrapped using the Nest CLI.\nGetting Started\nPrerequisites\n\nNode.js (LTS enforced)\nnpm\n\nInstallation\nClone the repository and install dependencies:\nExample :git clone https://github.com/phertyameen/realTimeChat.git\ncd realTimeChat\nnpm install\n\n# Running the Application\n\nStart the development server:\n```npm run start\n\nFor hot reload:\n```npm run start:dev\n\n# Project Structure\n\nsrc/ - Main application source code\nmain.ts - Entry point of the application\napp.module.ts - Root module with TypeORM connection\nconfig folder - contains appConfig and database configurations\napp.controller.ts - Default controller\napp.service.ts - Default service\n\n# Installed Packages\n\n@nestjs/config - Configuration management\n@nestjs/typeorm - TypeORM integration\nclass-validator - Validation utilities\nclass-transformer - Transformation utilities\n\n#Rules\n\nDo not push directly to any branch.\nAlways create a new branch for your changes.\nOpen a pull request for review before merging.\nAlways use multi-line comment i.e (/**...*/) comment system instead of the double slash (//) for uproper documentation\n\n#The keyboard shortcut for commenting\nMulti-line comment: Shift + Alt + A (Windows/Linux) or Shift + Option + A (Mac)\n\n#Useful Commands\nnpm run build - Build the project\nnpm run test - Run tests\n\n#License\nThis project is licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleAuthticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebSocketModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_GoogleAuthticationModule\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MessageModule\n\n\n\ncluster_MessageModule_exports\n\n\n\ncluster_MessageModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatRoomService \n\nChatRoomService \n\nChatRoomService  -->\n\nChatModule->ChatRoomService \n\n\n\n\n\nMessageModule\n\nMessageModule\n\nAppModule -->\n\nMessageModule->AppModule\n\n\n\n\n\nMessageService \n\nMessageService \n\nMessageService  -->\n\nMessageModule->MessageService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nWebSocketModule\n\nWebSocketModule\n\nAppModule -->\n\nWebSocketModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule\n\nGoogleAuthticationModule -->\n\nGoogleAuthenticationService->GoogleAuthticationModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nChatRoomService\n\nChatRoomService\n\nChatModule -->\n\nChatRoomService->ChatModule\n\n\n\n\n\nMailProvider \n\nMailProvider \n\n\n\nMailModule\n\nMailModule\n\nUserModule -->\n\nMailModule->UserModule\n\n\n\nMailProvider  -->\n\nMailModule->MailProvider \n\n\n\n\n\nMailProvider\n\nMailProvider\n\nMailModule -->\n\nMailProvider->MailModule\n\n\n\n\n\nMessageService\n\nMessageService\n\nMessageModule -->\n\nMessageService->MessageModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUserModule -->\n\nCreateGoogleUserProvider->UserModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUserModule -->\n\nCreateUserProvider->UserModule\n\n\n\n\n\nFindOneByEmail\n\nFindOneByEmail\n\nUserModule -->\n\nFindOneByEmail->UserModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUserModule -->\n\nFindOneByGoogleIdProvider->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../activeUser.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/activeUser.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const user: ActiveUserData = request[REQUEST_USER_KEY]\n    return field ? user?.[field] : user \n  },\n)\n                    \n                \n\n            \n                \n                    Custom decorator to retrieve active user data from the request.\nIt extracts the user information stored under REQUEST_USER_KEY.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: authTypes[]) => \n    SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    main auth class retrieve active user data from the request\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'auth'\n                    \n                \n\n            \n                \n                    defining the request authtype key\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    defining the request user key\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
