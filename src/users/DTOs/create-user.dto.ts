import {
  IsString,
  IsEmail,
  IsNotEmpty,
  IsEnum,
  IsOptional,
  Validate,
  MaxLength,
  Matches,
  ValidatorConstraint,
  ValidatorConstraintInterface,
  ValidationArguments,
  IsArray,
  ValidateNested,
} from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';
import { Column } from 'typeorm';
import { userRole } from '../Enums/userRole.enum';
import { Transform, Type } from 'class-transformer';
import { ChatRoom } from 'src/chatrooms/chatroom.entity';

/**
 * Custom validation to compare passwords
 */
@ValidatorConstraint({ name: 'MatchPasswords', async: false })
class MatchPasswordsConstraint implements ValidatorConstraintInterface {
  validate(confirmPassword: string, args: ValidationArguments): boolean {
    const object = args.object as CreateUserDto;
    if (!object.password) return false; // Ensure password is present
    return confirmPassword === object.password;
  }

  defaultMessage(args: ValidationArguments): string {
    return 'Password and confirm password do not match';
  }
}

/**
 * DTO for creating a user
 */
export class CreateUserDto {
  @ApiProperty({
    type: 'string',
    example: 'Fatima',
    description: 'First name field',
  })
  @IsString()
  @IsNotEmpty()
  @MaxLength(100)
  firstName: string;

  @ApiProperty({
    type: 'string',
    example: 'Aminu',
    description: 'Last name field',
  })
  @IsString()
  @IsOptional()
  @MaxLength(100)
  lastName: string;

  @ApiProperty({
    type: 'string',
    example: 'fatimaaminu@mail.com',
    description: 'Email field',
  })
  @IsEmail()
  @MaxLength(150)
  @Column({ unique: true, length: 150 })
  email: string;

  @ApiProperty({
    type: 'string',
    example: '@Password123',
    description: 'Password should contain numbers, alphabets, and uppercase',
  })
  @IsString()
  @MaxLength(6)
  password?: string;

  @ApiProperty({
    type: 'string',
    example: '@Password123',
    description:
      'Password should contain numbers, alphabets, and uppercase, and should match the password',
  })
  @IsString()
  @MaxLength(6)
  @Validate(MatchPasswordsConstraint)
  confirmpassword?: string;

  @IsEnum(userRole)
  @IsOptional()
  @Transform(({ value }) => value ?? userRole.USER)
  userRole?: userRole;

  @ApiProperty({
    type: 'string',
    example: 'poiuytrdspoiuytrewa\zxcvbnmml;poiuytrdsdcvbnm]',
    description: 'Autogenerated from Google when signing up with Google',
  })
  @IsString()
  @IsOptional()
  @MaxLength(225)
  googleId?: string;

  @ApiProperty({
    type: 'array',
    required: true,
    items: {
      type: 'Chatroom',
    },
  })
  @IsOptional()
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => ChatRoom)
  chatRooms?: ChatRoom[];
}
